import cx from '/_snowpack/pkg/clsx.v1.2.1.js';
import React, { memo, createElement, useReducer, useRef, useState, useMemo, useCallback, useDebugValue, useEffect } from '/_snowpack/pkg/react.v18.2.0.js';
import { equals, range, identity } from '/_snowpack/pkg/rambda.v6.9.0.js';
import { createPopper } from '/_snowpack/pkg/@popperjs.core.v2.11.5.js';
import { findDOMNode, createPortal } from '/_snowpack/pkg/react-dom.v18.2.0.js';
import { startOfMonth, addMonths, format, endOfMonth, addDays, parse, isEqual as isEqual$1 } from '/_snowpack/pkg/date-fns.v2.28.0.js';
import { onlyText } from '/_snowpack/pkg/react-children-utilities.v2.8.0.js';
import AutoSizer from '/_snowpack/pkg/react-virtualized-auto-sizer.v1.0.6.js';
import { useTable, useFilters, useSortBy, useResizeColumns, useFlexLayout } from '/_snowpack/pkg/react-table.v7.8.0.js';
import { FixedSizeList } from '/_snowpack/pkg/react-window.v1.8.7.js';
import getScrollbarWidth from '/_snowpack/pkg/scrollbar-size.v2.1.0.js';

var adwaita_dark_default = `
*{box-sizing:border-box}body{font-family:"Cantarell","Ubuntu",-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Fira Sans","Droid Sans","Helvetica Neue",sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}code{font-family:source-code-pro,"Source Code Pro",Menlo,Monaco,Consolas,"Courier New",monospace}.title-large{font-weight:300;font-size:24pt}h1{font-weight:800;font-size:20pt}h2{font-weight:800;font-size:15pt}h3{font-weight:700;font-size:15pt}h4{font-weight:700;font-size:13pt}html,body{font-weight:400;font-size:11pt}.heading{font-weight:700;font-size:11pt}.caption-heading{font-weight:700;font-size:9pt}.caption{font-weight:400;font-size:9pt}button{font-size:inherit;font-family:inherit}code{font-size:.9em;padding:1px 4px;color:#fff;background-color:#3f3f3f;border:1px solid #494949;border-radius:3px}pre{font-size:.9em;padding:1px 4px;color:#fff;background-color:#3f3f3f;border:1px solid #494949;border-radius:3px}.text-info{color:#15539e;--icon-color: #15539e}.text-success{color:#26ab62;--icon-color: #26ab62}.text-warning{color:#f57900;--icon-color: #f57900}.text-danger{color:#b2161d;--icon-color: #b2161d}.text-muted{color:#929291;--icon-color: #929291}.text-italic{font-style:italic}.text-bold{font-weight:700}.weight-100{font-weight:100}.weight-200{font-weight:200}.weight-300{font-weight:300}.weight-400{font-weight:400}.weight-500{font-weight:500}.weight-600{font-weight:600}.weight-700{font-weight:700}.weight-800{font-weight:800}.weight-900{font-weight:900}*::selection{background-color:#15539e;color:#fff}*::-webkit-scrollbar{width:8px;height:8px}*::-webkit-scrollbar-track{background-color:rgba(0,0,0,0);padding:0 5px}*::-webkit-scrollbar-thumb{background-clip:padding-box;background-color:#bbb;border:2px solid rgba(0,0,0,0);border-radius:5px;margin:0 2px}*::-webkit-scrollbar-thumb:hover{background-color:#999}*::-webkit-scrollbar-thumb:active{background-color:#888}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.user-select-none{user-select:none}.fill{width:100%;height:100%}.fill-width{width:100%}.fill-height{height:100%}.background{color:#eeeeec;background-color:#353535}.window-inactive .background{text-shadow:none;--icon-shadow: none}.background-low{background-color:#2d2d2d}.background-default{background-color:#353535}.background-medium{background-color:#2d2d2d}.background-high{background-color:#282828}.separator{border-bottom:1px solid #282828;border-right:1px solid #282828;min-width:1px;min-height:1px}.Box.horizontal{display:flex;flex-direction:row}.Box.horizontal>*:not(:last-child){margin-right:1rem}.Box.horizontal.compact>*:not(:last-child){margin-right:0}.Box.vertical{display:flex;flex-direction:column}.Box.vertical>*:not(:last-child){margin-bottom:1rem}.Box.vertical.compact>*:not(:last-child){margin-bottom:0}.Box.inline{display:inline-flex}.Box.align{align-items:center}.Box.align-center{align-items:center}.Box.align-start{align-items:flex-start}.Box.align-end{align-items:flex-end}.Box.justify{justify-content:center}.Box.justify-center{justify-content:center}.Box.justify-start{justify-content:flex-start}.Box.justify-end{justify-content:flex-end}.Box.space-around{justify-content:space-around}.Box.space-between{justify-content:space-between}.Box.fill{display:inline-flex;width:100%;height:100%}.Box.fill-width{display:inline-flex;width:100%}.Box.fill-height{display:inline-flex;height:100%}.Box.padded{padding:1em}.Box.expand-children>*{flex:1}.Box.border{border:1px solid #1b1b1b}.Box__fill{flex:1}.Box__fill.expand-children>*{width:100%;height:100%}.view,.IconView{color:#fff;background-color:#2d2d2d}.view:disabled,.IconView:disabled{color:#929291;background-color:#343434}.view.selected:focus,.selected.IconView:focus,.view.selected,.selected.IconView{border-radius:3px}.IconView{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.IconView:focus:focus-visible{outline-color:rgba(21,83,158,.7);outline-width:2px;outline-offset:-2px}.IconView.dnd-active{box-shadow:none}.IconView>dndtarget.dnd-active{border-style:solid;border-width:1px;border-color:#030c17}.Flowbox>.Flowbox__child{padding:3px;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Flowbox>.Flowbox__child{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Flowbox>.Flowbox__child:focus:focus-visible{outline-color:rgba(21,83,158,.7);outline-width:2px;outline-offset:-2px}.Flowbox>.Flowbox__child.selected{outline-color:rgba(255,255,255,.3)}.Grid>.Grid__child{padding:3px;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Grid>.Grid__child{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Grid>.Grid__child:focus:focus-visible{outline-color:rgba(21,83,158,.7);outline-width:2px;outline-offset:-2px}.Grid>.Grid__child.selected{outline-color:rgba(255,255,255,.3)}.Grid>.Grid__child .Grid__box{border-spacing:8px;margin:12px}.SelectionArea,.content-view>.SelectionArea,.table>.SelectionArea,.Flowbox>.SelectionArea,.Grid>.SelectionArea{border:1px solid #0f3b71;background-color:rgba(15,59,113,.2)}.link{color:#3584e4;text-decoration:underline;cursor:pointer;transition:color 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);border-radius:5px}.link{position:relative;outline:none;overflow:visible}.link::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.link:focus:focus-visible{outline:none}.link:focus:focus-visible::after{border:2px solid rgba(21,83,158,.7);top:-2px;left:-2px;width:100%;height:100%}.link:not(:disabled):not(.disabled):visited{color:#1b6acb}*.selected .link:not(:disabled):not(.disabled):visited{color:#a4c3ea}.link:not(:disabled):not(.disabled):hover{color:#629fea}*.selected .link:not(:disabled):not(.disabled):hover{color:#eff5fd}.link:not(:disabled):not(.disabled):active{color:#3584e4}*.selected .link:not(:disabled):not(.disabled):active{color:#d7e6fa}.link:disabled{color:rgba(141,141,141,.8)}.link.selected,*.selected .link{color:#d7e6fa}.Heading{position:relative}.Heading:hover .Heading__anchor{opacity:.5}.Heading__anchor{position:absolute;top:0;left:0;transform:translateX(-100%);height:100%;line-height:100%;padding-right:4px;opacity:0;display:flex;justify-content:center;align-items:center;color:#eeeeec !important;text-decoration:none !important}.Label{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Label:focus:focus-visible{outline-color:rgba(21,83,158,.7);outline-width:2px;outline-offset:-2px}.Label.mini{height:18px;line-height:18px;min-height:18px;font-size:11px;--icon-size: 12px}.Label.small{height:22px;line-height:22px;min-height:22px;font-size:12px;--icon-size: 13px}.Label.medium{height:28px;line-height:28px;min-height:28px;font-size:14px;--icon-size: 16px}.Label.large{height:36px;line-height:36px;min-height:36px;font-size:18px;--icon-size: 20px}.Label.huge{height:42px;line-height:42px;min-height:42px;font-size:20px;--icon-size: 23px}.Label.mega{height:58px;line-height:58px;min-height:58px;font-size:28px;--icon-size: 32px}.Label::selection{background-color:#15539e;color:#fff}.Label.disabled{color:#929291}.Button .Label.disabled{color:inherit}.Label.info{color:#15539e}.Label.info.disabled{color:rgba(21,83,158,.5)}.Label.success{color:#26ab62}.Label.success.disabled{color:rgba(38,171,98,.5)}.Label.warning{color:#f57900}.Label.warning.disabled{color:rgba(245,121,0,.5)}.Label.danger{color:#c00}.Label.danger.disabled{color:rgba(204,0,0,.5)}.Label.title{color:#929291;font-weight:700}.Label.align-left{text-align:left}.Label.align-center{text-align:center}.Label.align-right{text-align:right}.Label.ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.Label.fill{width:100%;height:100%}.Label.fill-width{width:100%}.Label.fill-height{height:100%}.Text{margin:0}.Text.mini{font-size:13.2px;line-height:1.4;--icon-size: 12px}.Text.small{font-size:14.4px;line-height:1.4;--icon-size: 13px}.Text.medium{font-size:16.8px;line-height:1.4;--icon-size: 16px}.Text.large{font-size:21.6px;line-height:1.4;--icon-size: 20px}.Text.huge{font-size:24px;line-height:1.4;--icon-size: 23px}.Text.mega{font-size:33.6px;line-height:1.4;--icon-size: 32px}.Text.hero{font-size:24px;font-weight:300;line-height:1.4}.dim-label,.titlebar:not(.HeaderBar) .subtitle,.HeaderBar .subtitle,.InputNumber.vertical>.Input__area>input>.Input__area>input::placeholder,.InputNumber:not(.vertical)>.Input__area>input::placeholder,.Input>.Input__area>input::placeholder,.Label.separator{opacity:.55;text-shadow:none}.osd .scale-popup,.app-notification,.osd{color:#eeeeec;border:none;background-color:rgba(38,38,38,.7);background-clip:padding-box;text-shadow:0 1px #000;--icon-shadow: 0 1px black}.Alert{border:1px solid #1b1b1b;border-left-width:6px;border-radius:5px;padding:8px}.Alert.info{color:#eeeeec;--icon-color: #305583;background-color:#293e57;border-color:#1c2a3b}.Alert.info a{color:#dbdbd6;font-weight:bold}.Alert.info a:not(:disabled):not(.disabled):hover{color:#e9e9e7}.Alert.info .Alert__close{color:#eeeeec;outline-color:rgba(255,255,255,.3);border-color:#182535;border-bottom-color:#080d12;background-color:#293e57;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.Alert.info .Alert__close::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Alert.info .Alert__close:not(:disabled):not(.disabled).hover,.Alert.info .Alert__close:not(:disabled):not(.disabled):hover{color:#eeeeec;border-color:#182535;border-bottom-color:#080d12;background-color:#24364d;box-shadow:inset 0 1px #293e57,0 1px 2px rgba(0,0,0,.07)}.Alert.info .Alert__close:not(:disabled):not(.disabled).hover::before,.Alert.info .Alert__close:not(:disabled):not(.disabled):hover::before{opacity:0}.Alert.info .Alert__close:not(:disabled):not(.disabled).active,.Alert.info .Alert__close:not(:disabled):not(.disabled):active{color:#eeeeec;border-color:#182535;background-color:#1a2838;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Alert.info .Alert__close:not(:disabled):not(.disabled).active::before,.Alert.info .Alert__close:not(:disabled):not(.disabled):active::before{opacity:0}.Alert.success{color:#eeeeec;--icon-color: #468b65;background-color:#3d614d;border-color:#2d4839}.Alert.success a{color:#dbdbd6;font-weight:bold}.Alert.success a:not(:disabled):not(.disabled):hover{color:#e9e9e7}.Alert.success .Alert__close{color:#eeeeec;outline-color:rgba(255,255,255,.3);border-color:#294234;border-bottom-color:#16221b;background-color:#3d614d;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.Alert.success .Alert__close::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Alert.success .Alert__close:not(:disabled):not(.disabled).hover,.Alert.success .Alert__close:not(:disabled):not(.disabled):hover{color:#eeeeec;border-color:#294234;border-bottom-color:#16221b;background-color:#375846;box-shadow:inset 0 1px #3d614d,0 1px 2px rgba(0,0,0,.07)}.Alert.success .Alert__close:not(:disabled):not(.disabled).hover::before,.Alert.success .Alert__close:not(:disabled):not(.disabled):hover::before{opacity:0}.Alert.success .Alert__close:not(:disabled):not(.disabled).active,.Alert.success .Alert__close:not(:disabled):not(.disabled):active{color:#eeeeec;border-color:#294234;background-color:#2b4537;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Alert.success .Alert__close:not(:disabled):not(.disabled).active::before,.Alert.success .Alert__close:not(:disabled):not(.disabled):active::before{opacity:0}.Alert.warning{color:#eeeeec;--icon-color: #d07925;background-color:#9b6027;border-color:#7b4c1f}.Alert.warning a{color:#dbdbd6;font-weight:bold}.Alert.warning a:not(:disabled):not(.disabled):hover{color:#e9e9e7}.Alert.warning .Alert__close{color:#eeeeec;outline-color:rgba(255,255,255,.3);border-color:#72471d;border-bottom-color:#4a2e12;background-color:#9b6027;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.Alert.warning .Alert__close::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Alert.warning .Alert__close:not(:disabled):not(.disabled).hover,.Alert.warning .Alert__close:not(:disabled):not(.disabled):hover{color:#eeeeec;border-color:#72471d;border-bottom-color:#4a2e12;background-color:#8f5924;box-shadow:inset 0 1px #9b6027,0 1px 2px rgba(0,0,0,.07)}.Alert.warning .Alert__close:not(:disabled):not(.disabled).hover::before,.Alert.warning .Alert__close:not(:disabled):not(.disabled):hover::before{opacity:0}.Alert.warning .Alert__close:not(:disabled):not(.disabled).active,.Alert.warning .Alert__close:not(:disabled):not(.disabled):active{color:#eeeeec;border-color:#72471d;background-color:#764a1e;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Alert.warning .Alert__close:not(:disabled):not(.disabled).active::before,.Alert.warning .Alert__close:not(:disabled):not(.disabled):active::before{opacity:0}.Alert.danger{color:#eeeeec;--icon-color: #ad1f1f;background-color:#7a1f1f;border-color:#5a1616}.Alert.danger a{color:#dbdbd6;font-weight:bold}.Alert.danger a:not(:disabled):not(.disabled):hover{color:#e9e9e7}.Alert.danger .Alert__close{color:#eeeeec;outline-color:rgba(255,255,255,.3);border-color:#521414;border-bottom-color:#290a0a;background-color:#7a1f1f;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.Alert.danger .Alert__close::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Alert.danger .Alert__close:not(:disabled):not(.disabled).hover,.Alert.danger .Alert__close:not(:disabled):not(.disabled):hover{color:#eeeeec;border-color:#521414;border-bottom-color:#290a0a;background-color:#6e1c1c;box-shadow:inset 0 1px #7a1f1f,0 1px 2px rgba(0,0,0,.07)}.Alert.danger .Alert__close:not(:disabled):not(.disabled).hover::before,.Alert.danger .Alert__close:not(:disabled):not(.disabled):hover::before{opacity:0}.Alert.danger .Alert__close:not(:disabled):not(.disabled).active,.Alert.danger .Alert__close:not(:disabled):not(.disabled):active{color:#eeeeec;border-color:#521414;background-color:#561515;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Alert.danger .Alert__close:not(:disabled):not(.disabled).active::before,.Alert.danger .Alert__close:not(:disabled):not(.disabled):active::before{opacity:0}.Alert{color:#eeeeec;--icon-color: #ededed;background-color:#282828;border-color:#141414}.Alert a{color:#dbdbd6;font-weight:bold}.Alert a:not(:disabled):not(.disabled):hover{color:#e9e9e7}.Alert .Alert__close{color:#eeeeec;outline-color:rgba(255,255,255,.3);border-color:#0f0f0f;border-bottom-color:#000;background-color:#282828;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.Alert .Alert__close::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Alert .Alert__close:not(:disabled):not(.disabled).hover,.Alert .Alert__close:not(:disabled):not(.disabled):hover{color:#eeeeec;border-color:#0f0f0f;border-bottom-color:#000;background-color:#202020;box-shadow:inset 0 1px #282828,0 1px 2px rgba(0,0,0,.07)}.Alert .Alert__close:not(:disabled):not(.disabled).hover::before,.Alert .Alert__close:not(:disabled):not(.disabled):hover::before{opacity:0}.Alert .Alert__close:not(:disabled):not(.disabled).active,.Alert .Alert__close:not(:disabled):not(.disabled):active{color:#eeeeec;border-color:#0f0f0f;background-color:#111;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Alert .Alert__close:not(:disabled):not(.disabled).active::before,.Alert .Alert__close:not(:disabled):not(.disabled):active::before{opacity:0}.Alert__icon{margin-top:3px;--icon-size: 1.5em;opacity:.5}.Alert__title{font-size:1.2em;margin-bottom:.25rem}.Alert__message{font-size:1rem}.normal-icons{--icon-size: 16px}.large-icons{--icon-size: 32px}.Icon{display:flex;justify-content:center;align-items:center;display:inline-flex}.Icon svg{width:auto;height:var(--icon-size, 16px)}.Icon:not(.colored) svg *{fill:var(--icon-color, unset) !important}*:disabled .Icon:not(.colored):not(.increase-specificity),.disabled .Icon:not(.colored):not(.increase-specificity){--icon-color: rgba(0, 0, 0, 0.3)}*:disabled .Icon.colored:not(.increase-specificity),.disabled .Icon.colored:not(.increase-specificity){opacity:.3}.Icon svg{transform:scale(0.8)}@keyframes spin{to{transform:rotate(1turn)}}.Spinner{opacity:1;animation:spin 1s linear infinite;display:inline-block;width:var(--icon-size, 16px);height:var(--icon-size, 16px)}.Spinner.disabled{opacity:.5}.Spinner.hidden{opacity:0}@keyframes move_along_width{0%{left:var(--input-padding)}50%{left:calc(100% - var(--progress-indeterminate-width) - var(--input-padding, 8px))}100%{left:var(--input-padding)}}.InputNumber.vertical>.Input__area>input,.InputNumber:not(.vertical),.Input{--input-padding: 8px;--progress-indeterminate-width: 50px}.InputNumber.vertical>.Input__area>input,.InputNumber:not(.vertical),.Input{position:relative;display:inline-flex;flex-direction:row;align-items:center;border:1px solid;border-radius:5px;border-spacing:6px;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);color:#fff;border-color:#1b1b1b;background-color:#2d2d2d;height:28px;min-height:28px;padding-left:var(--input-padding);padding-right:var(--input-padding)}.InputNumber.vertical>.Input__area>input,.InputNumber:not(.vertical),.Input{position:relative;outline:none;overflow:visible}.InputNumber.vertical>.Input__area>input::after,.InputNumber:not(.vertical)::after,.Input::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.InputNumber.vertical>.Input__area>input:focus-within,.InputNumber:focus-within:not(.vertical),.Input:focus-within{outline:none}.InputNumber.vertical>.Input__area>input:focus-within::after,.InputNumber:focus-within:not(.vertical)::after,.Input:focus-within::after{border:2px solid rgba(21,83,158,.7);top:-2px;left:-2px;width:100%;height:100%}.InputNumber.vertical>.Input__area>input.mini,.mini.InputNumber:not(.vertical),.Input.mini{height:18px;min-height:18px;--input-padding: calc($height / 4);font-size:11px;--icon-size: 12px}.InputNumber.vertical>.Input__area>input.mini>.Input__area,.mini.InputNumber:not(.vertical)>.Input__area,.Input.mini>.Input__area{line-height:18px}.InputNumber.vertical>.Input__area>input.small,.small.InputNumber:not(.vertical),.Input.small{height:22px;min-height:22px;--input-padding: calc($height / 4);font-size:12px;--icon-size: 13px}.InputNumber.vertical>.Input__area>input.small>.Input__area,.small.InputNumber:not(.vertical)>.Input__area,.Input.small>.Input__area{line-height:22px}.InputNumber.vertical>.Input__area>input.medium,.medium.InputNumber:not(.vertical),.Input.medium{height:28px;min-height:28px;--input-padding: calc($height / 4);font-size:14px;--icon-size: 16px}.InputNumber.vertical>.Input__area>input.medium>.Input__area,.medium.InputNumber:not(.vertical)>.Input__area,.Input.medium>.Input__area{line-height:28px}.InputNumber.vertical>.Input__area>input.large,.large.InputNumber:not(.vertical),.Input.large{height:36px;min-height:36px;--input-padding: calc($height / 4);font-size:18px;--icon-size: 20px}.InputNumber.vertical>.Input__area>input.large>.Input__area,.large.InputNumber:not(.vertical)>.Input__area,.Input.large>.Input__area{line-height:36px}.InputNumber.vertical>.Input__area>input.huge,.huge.InputNumber:not(.vertical),.Input.huge{height:42px;min-height:42px;--input-padding: calc($height / 4);font-size:20px;--icon-size: 23px}.InputNumber.vertical>.Input__area>input.huge>.Input__area,.huge.InputNumber:not(.vertical)>.Input__area,.Input.huge>.Input__area{line-height:42px}.InputNumber.vertical>.Input__area>input.mega,.mega.InputNumber:not(.vertical),.Input.mega{height:58px;min-height:58px;--input-padding: calc($height / 4);font-size:28px;--icon-size: 32px}.InputNumber.vertical>.Input__area>input.mega>.Input__area,.mega.InputNumber:not(.vertical)>.Input__area,.Input.mega>.Input__area{line-height:58px}.InputNumber.vertical>.Input__area>input>.Input__area,.InputNumber:not(.vertical)>.Input__area,.Input>.Input__area{position:relative;flex:1;height:100%;overflow:hidden}.InputNumber.vertical>.Input__area>input>.Input__area>input,.InputNumber:not(.vertical)>.Input__area>input,.Input>.Input__area>input{width:100%;height:100%;border:none;color:inherit;background:none;font-size:inherit}.InputNumber.vertical>.Input__area>input>.Input__area>input:focus,.InputNumber:not(.vertical)>.Input__area>input:focus,.Input>.Input__area>input:focus{outline:none}.InputNumber.vertical>.Input__area>input>.Input__area>input::placeholder,.InputNumber:not(.vertical)>.Input__area>input::placeholder,.Input>.Input__area>input::placeholder{user-select:none}.InputNumber.vertical>.Input__area>input>.Input__area>.Input__children,.InputNumber:not(.vertical)>.Input__area>.Input__children,.Input>.Input__area>.Input__children{position:absolute;pointer-events:none;top:0px;left:0px;width:100%;height:100%;display:flex;justify-content:center;align-items:center;justify-content:flex-start;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.InputNumber.vertical>.Input__area>input>.Input__area>input:focus+.Input__children,.InputNumber:not(.vertical)>.Input__area>input:focus+.Input__children,.Input>.Input__area>input:focus+.Input__children{opacity:.5}.InputNumber.vertical>.Input__area>input>.Input__area>input:not(.empty)+.Input__children,.InputNumber:not(.vertical)>.Input__area>input:not(.empty)+.Input__children,.Input>.Input__area>input:not(.empty)+.Input__children{opacity:0}.InputNumber.vertical>.Input__area>input .Input__left,.InputNumber:not(.vertical) .Input__left,.InputNumber.vertical>.Input__area>input .Input__right,.InputNumber:not(.vertical) .Input__right,.Input .Input__left,.Input .Input__right{display:flex;justify-content:center;align-items:center}.InputNumber.vertical>.Input__area>input .Input__left,.InputNumber:not(.vertical) .Input__left,.Input .Input__left{margin-right:6px}.InputNumber.vertical>.Input__area>input .Input__right,.InputNumber:not(.vertical) .Input__right,.Input .Input__right{margin:0;margin-left:6px;padding:0}.InputNumber.vertical>.Input__area>input .Input__left.Button,.InputNumber:not(.vertical) .Input__left.Button,.InputNumber.vertical>.Input__area>input .Input__right.Button,.InputNumber:not(.vertical) .Input__right.Button,.Input .Input__left.Button,.Input .Input__right.Button{opacity:.8;min-width:unset;min-height:unset;height:min-content}.InputNumber.vertical>.Input__area>input.flat,.flat.InputNumber:not(.vertical),.Input.flat:focus-within,.window-inactive .Input.flat,.Input.flat:disabled,.window-inactive .Input.flat:disabled,.Input.flat{min-height:0;padding:0 2px;background-color:rgba(0,0,0,0);border-color:rgba(0,0,0,0);border-radius:0}.InputNumber.vertical>.Input__area>input:focus-within>.Input__area>input::placeholder,.InputNumber:focus-within:not(.vertical)>.Input__area>input::placeholder,.Input:focus-within>.Input__area>input::placeholder{opacity:0}.InputNumber.vertical>.Input__area>input:disabled,.InputNumber:disabled:not(.vertical),.InputNumber.vertical>.Input__area>input.disabled,.disabled.InputNumber:not(.vertical),.Input:disabled,.Input.disabled{color:#929291;border-color:#1b1b1b;background-color:#343434;box-shadow:none}.InputNumber.vertical>.Input__area>input.error,.error.InputNumber:not(.vertical),.Input.error{border-color:#c00}.InputNumber.vertical>.Input__area>input.error,.error.InputNumber:not(.vertical),.Input.error{position:relative;outline:none;overflow:visible}.InputNumber.vertical>.Input__area>input.error::after,.error.InputNumber:not(.vertical)::after,.Input.error::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.InputNumber.vertical>.Input__area>input.error:focus-within,.error.InputNumber:focus-within:not(.vertical),.Input.error:focus-within{outline:none}.InputNumber.vertical>.Input__area>input.error:focus-within::after,.error.InputNumber:focus-within:not(.vertical)::after,.Input.error:focus-within::after{border:2px solid rgba(204,0,0,.5);top:-2px;left:-2px;width:100%;height:100%}.InputNumber.vertical>.Input__area>input.error input,.error.InputNumber:not(.vertical) input,.Input.error input{color:#d3302f}.InputNumber.vertical>.Input__area>input.error input::selection,.error.InputNumber:not(.vertical) input::selection,.Input.error input::selection{background-color:#c00}.InputNumber.vertical>.Input__area>input.warning,.warning.InputNumber:not(.vertical),.Input.warning{border-color:#f57900}.InputNumber.vertical>.Input__area>input.warning,.warning.InputNumber:not(.vertical),.Input.warning{position:relative;outline:none;overflow:visible}.InputNumber.vertical>.Input__area>input.warning::after,.warning.InputNumber:not(.vertical)::after,.Input.warning::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.InputNumber.vertical>.Input__area>input.warning:focus-within,.warning.InputNumber:focus-within:not(.vertical),.Input.warning:focus-within{outline:none}.InputNumber.vertical>.Input__area>input.warning:focus-within::after,.warning.InputNumber:focus-within:not(.vertical)::after,.Input.warning:focus-within::after{border:2px solid rgba(245,121,0,.5);top:-2px;left:-2px;width:100%;height:100%}.InputNumber.vertical>.Input__area>input.warning input,.warning.InputNumber:not(.vertical) input,.Input.warning input{color:#f4902f}.InputNumber.vertical>.Input__area>input.warning input::selection,.warning.InputNumber:not(.vertical) input::selection,.Input.warning input::selection{background-color:#f57900}.InputNumber.vertical>.Input__area>input *:not(.InputNumber__button) .Icon,.InputNumber:not(.vertical) *:not(.InputNumber__button) .Icon,.Input *:not(.InputNumber__button) .Icon{--icon-color: #c7c7c6}.InputNumber.vertical>.Input__area>input *:not(.InputNumber__button) .Icon:hover,.InputNumber:not(.vertical) *:not(.InputNumber__button) .Icon:hover,.Input *:not(.InputNumber__button) .Icon:hover{--icon-color: #eeeeec}.InputNumber.vertical>.Input__area>input *:not(.InputNumber__button) .Icon:active,.InputNumber:not(.vertical) *:not(.InputNumber__button) .Icon:active,.Input *:not(.InputNumber__button) .Icon:active{--icon-color: #15539e}.dnd-active .InputNumber.vertical>.Input__area>input,.dnd-active .InputNumber:not(.vertical),.dnd-active .Input:focus-within,.dnd-active .Input{border-color:#26a269;box-shadow:inset 0 0 0 1px #26a269}.osd .InputNumber.vertical>.Input__area>input,.osd .InputNumber:not(.vertical),.osd .Input{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(0,0,0,.5);background-clip:padding-box;box-shadow:none;text-shadow:0 1px #000;--icon-shadow: 0 1px black}.osd .InputNumber.vertical>.Input__area>input:focus-within,.osd .InputNumber:focus-within:not(.vertical),.osd .Input:focus-within{color:#fff;border-color:#15539e;background-color:rgba(0,0,0,.5);background-clip:padding-box;text-shadow:0 1px #000;--icon-shadow: 0 1px black}.osd .InputNumber.vertical>.Input__area>input:disabled,.osd .InputNumber:disabled:not(.vertical),.osd .Input:disabled{color:#8a8a89;border-color:rgba(0,0,0,.7);background-color:rgba(58,58,58,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.InputNumber.vertical>.Input__area>input .Input__progress,.InputNumber:not(.vertical) .Input__progress,.Input .Input__progress{position:absolute;display:inline-block;pointer-events:none;width:calc(100% - 2*var(--input-padding, 8px));height:calc(100% - 1px);top:0px;left:var(--input-padding)}.InputNumber.vertical>.Input__area>input .Input__progress .Input__progress__bar,.InputNumber:not(.vertical) .Input__progress .Input__progress__bar,.Input .Input__progress .Input__progress__bar{display:inline-block;width:100%;height:100%;border-width:0 0 2px;border-color:#15539e;border-style:solid}.InputNumber.vertical>.Input__area>input .Input__progress.indeterminate,.InputNumber:not(.vertical) .Input__progress.indeterminate,.Input .Input__progress.indeterminate{height:calc(100% - 1px);width:var(--progress-indeterminate-width);animation:move_along_width 2.5s infinite}.InputNumber.vertical>.Input__area.linked:not(.vertical)>input:not(:first-child),.linked:not(.vertical)>.InputNumber:not(:first-child):not(.vertical),.linked:not(.vertical)>.Input:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.InputNumber.vertical>.Input__area.linked:not(.vertical)>input:not(:last-child),.linked:not(.vertical)>.InputNumber:not(:last-child):not(.vertical),.linked:not(.vertical)>.Input:not(:last-child){border-right-style:none;border-top-right-radius:0;border-bottom-right-radius:0}.InputNumber.vertical>.Input__area.linked.vertical>input:not(:first-child),.linked.vertical>.InputNumber:not(:first-child):not(.vertical),.linked.vertical>.Input:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.InputNumber.vertical>.Input__area.linked.vertical>input:not(:last-child),.linked.vertical>.InputNumber:not(:last-child):not(.vertical),.linked.vertical>.Input:not(:last-child){border-bottom-style:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.InputNumber.vertical>.Input__area.linked.vertical>input:not(:disabled)+entry:not(:disabled),.linked.vertical>.InputNumber:not(:disabled):not(.vertical)+entry:not(:disabled),.InputNumber.vertical>.Input__area.linked.vertical>input:not(:disabled)+input:not(:disabled),.InputNumber.vertical>.Input__area.linked.vertical>.InputNumber:not(:disabled):not(.vertical)+input:not(:disabled),.InputNumber.vertical>.Input__area.linked.vertical>input:not(:disabled)+.InputNumber:not(:disabled):not(.vertical),.linked.vertical>.InputNumber:not(:disabled):not(.vertical)+.InputNumber:not(:disabled):not(.vertical),.linked.vertical>.Input:not(:disabled)+entry:not(:disabled),.InputNumber.vertical>.Input__area.linked.vertical>.Input:not(:disabled)+input:not(:disabled),.linked.vertical>.Input:not(:disabled)+.InputNumber:not(:disabled):not(.vertical){border-top-color:#282828}.InputNumber.vertical>.Input__area.linked.vertical>input:disabled+input:disabled,.InputNumber.vertical>.Input__area.linked.vertical>.InputNumber:disabled:not(.vertical)+input:disabled,.InputNumber.vertical>.Input__area.linked.vertical>input:disabled+.InputNumber:disabled:not(.vertical),.linked.vertical>.InputNumber:disabled:not(.vertical)+.InputNumber:disabled:not(.vertical),.InputNumber.vertical>.Input__area.linked.vertical>input:disabled+entry:disabled,.linked.vertical>.InputNumber:disabled:not(.vertical)+entry:disabled,.InputNumber.vertical>.Input__area.linked.vertical>.Input:disabled+input:disabled,.linked.vertical>.Input:disabled+.InputNumber:disabled:not(.vertical),.linked.vertical>.Input:disabled+entry:disabled{border-top-color:#282828}.InputNumber.vertical>.Input__area.linked.vertical>input+input.dnd-active:not(:only-child),.InputNumber.vertical>.Input__area.linked.vertical>.InputNumber:not(.vertical)+input.dnd-active:not(:only-child),.InputNumber.vertical>.Input__area.linked.vertical>input+.dnd-active.InputNumber:not(:only-child):not(.vertical),.linked.vertical>.InputNumber:not(.vertical)+.dnd-active.InputNumber:not(:only-child):not(.vertical),.InputNumber.vertical>.Input__area.linked.vertical>input+entry.dnd-active:not(:only-child),.linked.vertical>.InputNumber:not(.vertical)+entry.dnd-active:not(:only-child),.InputNumber.vertical>.Input__area.linked.vertical>.Input+input.dnd-active:not(:only-child),.linked.vertical>.Input+.dnd-active.InputNumber:not(:only-child):not(.vertical),.linked.vertical>.Input+entry.dnd-active:not(:only-child){border-top-color:#26a269}.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+input,.InputNumber.vertical>.Input__area.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+input,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+.InputNumber:not(.vertical),.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+.InputNumber:not(.vertical),.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+entry,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+entry,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+.Input,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+.Input,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+menubutton>.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+menubutton>.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+.Dropdown>.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+.Dropdown>.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+colorbutton>.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+colorbutton>.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+fontbutton>.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+fontbutton>.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+filechooserbutton>.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+filechooserbutton>.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+combobox>box>.Button.combo,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+combobox>box>.Button.combo,.InputNumber.vertical>.Input__area.linked.vertical>.Input.dnd-active:not(:only-child)+input,.linked.vertical>.Input.dnd-active:not(:only-child)+.InputNumber:not(.vertical),.linked.vertical>.Input.dnd-active:not(:only-child)+entry,.linked.vertical>.Input.dnd-active:not(:only-child)+.Input,.linked.vertical>.Input.dnd-active:not(:only-child)+.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+menubutton>.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+.Dropdown>.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+colorbutton>.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+fontbutton>.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+filechooserbutton>.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+filechooserbutton>combobox>box>.Button.combo,.linked.vertical>.Input.dnd-active:not(:only-child)+appchooserbutton>combobox>box>.Button.combo,.linked.vertical>.Input.dnd-active:not(:only-child)+combobox>box>.Button.combo{border-top-color:#26a269}.InputGroup{display:flex;flex-direction:row}.table .Input:focus-within:dir(rtl),.table .Input:focus-within:dir(ltr){background-color:#2d2d2d;transition-property:color,background}.table .Input.flat,.table .Input{border-radius:0;background-image:none;background-color:#2d2d2d}.table .Input.flat:focus-within,.table .Input:focus-within{border-color:#15539e}.TextArea{display:inline-block;padding:0;height:min-content !important;width:min-content !important}.TextArea>textarea{border:none;background:rgba(0,0,0,0);padding:0 .5em;line-height:1.5em}.TextArea>textarea:focus{outline:none}editablelabel>stack>text{color:#fff;border-color:#1b1b1b;background-color:#2d2d2d}@keyframes needs_attention{from{background-image:radial-gradient(farthest-side, #1f76e1 0%, rgba(31, 118, 225, 0) 0%)}to{background-image:radial-gradient(farthest-side, #1f76e1 95%, rgba(31, 118, 225, 0))}}.Notebook .Notebook__arrow,.control-buttons button,.Button{position:relative;display:inline-flex;justify-content:center;align-items:center;border:1px solid;border-radius:5px;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);height:28px;min-height:28px;min-width:16px;padding:4px 9px;user-select:none;color:#eeeeec;outline-color:rgba(21,83,158,.7);border-color:#1b1b1b;border-bottom-color:#070707;background-color:#353535;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.Notebook .mini.Notebook__arrow,.control-buttons button.mini,.Button.mini{height:18px;min-height:18px;min-width:18px;font-size:11px;--icon-size: 12px}.Notebook .small.Notebook__arrow,.control-buttons button.small,.Button.small{height:22px;min-height:22px;min-width:22px;font-size:12px;--icon-size: 13px}.Notebook .medium.Notebook__arrow,.control-buttons button.medium,.Button.medium{height:28px;min-height:28px;min-width:28px;font-size:14px;--icon-size: 16px}.Notebook .large.Notebook__arrow,.control-buttons button.large,.Button.large{height:36px;min-height:36px;min-width:36px;font-size:18px;--icon-size: 20px}.Notebook .huge.Notebook__arrow,.control-buttons button.huge,.Button.huge{height:42px;min-height:42px;min-width:42px;font-size:20px;--icon-size: 23px}.Notebook .mega.Notebook__arrow,.control-buttons button.mega,.Button.mega{height:58px;min-height:58px;min-width:58px;font-size:28px;--icon-size: 32px}.Notebook .Notebook__arrow,.control-buttons button,.Notebook .Notebook__arrow>.Label,.control-buttons button>.Label,.Button,.Button>.Label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.Notebook .Notebook__arrow::before,.control-buttons button::before,.Button::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Notebook .Notebook__arrow,.control-buttons button,.Button{position:relative;outline:none;overflow:visible}.Notebook .Notebook__arrow::after,.control-buttons button::after,.Button::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.Notebook .Notebook__arrow:focus:focus-visible,.control-buttons button:focus:focus-visible,.Button:focus:focus-visible{outline:none}.Notebook .Notebook__arrow:focus:focus-visible::after,.control-buttons button:focus:focus-visible::after,.Button:focus:focus-visible::after{border:2px solid rgba(21,83,158,.7);top:-2px;left:-2px;width:100%;height:100%}.Notebook .Notebook__arrow:not(:disabled):not(.disabled).hover,.control-buttons button:not(:disabled):not(.disabled).hover,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):hover,.control-buttons button:not(:disabled):not(.disabled):hover,.Button:not(:disabled):not(.disabled).hover,.Button:not(:disabled):not(.disabled):hover{color:#eeeeec;border-color:#1b1b1b;border-bottom-color:#070707;background-color:#2d2d2d;box-shadow:inset 0 1px #353535,0 1px 2px rgba(0,0,0,.07);-gtk-icon-filter:brightness(1.2)}.Notebook .Notebook__arrow:not(:disabled):not(.disabled).hover::before,.control-buttons button:not(:disabled):not(.disabled).hover::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):hover::before,.control-buttons button:not(:disabled):not(.disabled):hover::before,.Button:not(:disabled):not(.disabled).hover::before,.Button:not(:disabled):not(.disabled):hover::before{opacity:0}.Notebook .Notebook__arrow:not(:disabled):not(.disabled).active,.control-buttons button:not(:disabled):not(.disabled).active,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):active,.control-buttons button:not(:disabled):not(.disabled):active,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):checked,.control-buttons button:not(:disabled):not(.disabled):checked,.Button:not(:disabled):not(.disabled).active,.Button:not(:disabled):not(.disabled):active,.Button:not(:disabled):not(.disabled):checked{color:#eeeeec;border-color:#1b1b1b;background-color:#1e1e1e;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;transition-duration:50ms}.Notebook .Notebook__arrow:not(:disabled):not(.disabled).active::before,.control-buttons button:not(:disabled):not(.disabled).active::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):active::before,.control-buttons button:not(:disabled):not(.disabled):active::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):checked::before,.control-buttons button:not(:disabled):not(.disabled):checked::before,.Button:not(:disabled):not(.disabled).active::before,.Button:not(:disabled):not(.disabled):active::before,.Button:not(:disabled):not(.disabled):checked::before{opacity:0}.window-inactive .Notebook .Notebook__arrow,.Notebook .window-inactive .Notebook__arrow,.window-inactive .control-buttons button,.control-buttons .window-inactive button,.window-inactive .Button.flat,.window-inactive .Button{color:#929291;border-color:#202020;background-color:#353535;text-shadow:none;--icon-shadow: none;box-shadow:inset 0 1px rgba(255,255,255,0);transition:200ms ease-out;-gtk-icon-filter:none}.window-inactive .Notebook .Notebook__arrow::before,.Notebook .window-inactive .Notebook__arrow::before,.window-inactive .control-buttons button::before,.control-buttons .window-inactive button::before,.window-inactive .Button.flat::before,.window-inactive .Button::before{opacity:0}.window-inactive .Notebook .Notebook__arrow:active,.Notebook .window-inactive .Notebook__arrow:active,.window-inactive .control-buttons button:active,.control-buttons .window-inactive button:active,.window-inactive .Notebook .Notebook__arrow:checked,.Notebook .window-inactive .Notebook__arrow:checked,.window-inactive .control-buttons button:checked,.control-buttons .window-inactive button:checked,.window-inactive .Button.flat:active,.window-inactive .Button.flat:checked,.window-inactive .Button:active,.window-inactive .Button:checked{color:#929291;border-color:#202020;background-color:#2a2a2a;box-shadow:inset 0 1px rgba(255,255,255,0)}.window-inactive .Notebook .Notebook__arrow:active::before,.Notebook .window-inactive .Notebook__arrow:active::before,.window-inactive .control-buttons button:active::before,.control-buttons .window-inactive button:active::before,.window-inactive .Notebook .Notebook__arrow:checked::before,.Notebook .window-inactive .Notebook__arrow:checked::before,.window-inactive .control-buttons button:checked::before,.control-buttons .window-inactive button:checked::before,.window-inactive .Button.flat:active::before,.window-inactive .Button.flat:checked::before,.window-inactive .Button:active::before,.window-inactive .Button:checked::before{opacity:0}.window-inactive .Notebook .Notebook__arrow:disabled,.Notebook .window-inactive .Notebook__arrow:disabled,.window-inactive .control-buttons button:disabled,.control-buttons .window-inactive button:disabled,.window-inactive .Button.flat:disabled,.window-inactive .Button:disabled{color:#5b5b5b;border-color:#202020;background-color:#343434;text-shadow:none;--icon-shadow: none;box-shadow:inset 0 1px rgba(255,255,255,0)}.window-inactive .Notebook .Notebook__arrow:disabled::before,.Notebook .window-inactive .Notebook__arrow:disabled::before,.window-inactive .control-buttons button:disabled::before,.control-buttons .window-inactive button:disabled::before,.window-inactive .Button.flat:disabled::before,.window-inactive .Button:disabled::before{opacity:0}.window-inactive .Notebook .Notebook__arrow:disabled:active,.Notebook .window-inactive .Notebook__arrow:disabled:active,.window-inactive .control-buttons button:disabled:active,.control-buttons .window-inactive button:disabled:active,.window-inactive .Notebook .Notebook__arrow:disabled:checked,.Notebook .window-inactive .Notebook__arrow:disabled:checked,.window-inactive .control-buttons button:disabled:checked,.control-buttons .window-inactive button:disabled:checked,.window-inactive .Button.flat:disabled:active,.window-inactive .Button.flat:disabled:checked,.window-inactive .Button:disabled:active,.window-inactive .Button:disabled:checked{color:#5b5b5b;border-color:#202020;background-color:#2a2a2a;box-shadow:inset 0 1px rgba(255,255,255,0)}.window-inactive .Notebook .Notebook__arrow:disabled:active::before,.Notebook .window-inactive .Notebook__arrow:disabled:active::before,.window-inactive .control-buttons button:disabled:active::before,.control-buttons .window-inactive button:disabled:active::before,.window-inactive .Notebook .Notebook__arrow:disabled:checked::before,.Notebook .window-inactive .Notebook__arrow:disabled:checked::before,.window-inactive .control-buttons button:disabled:checked::before,.control-buttons .window-inactive button:disabled:checked::before,.window-inactive .Button.flat:disabled:active::before,.window-inactive .Button.flat:disabled:checked::before,.window-inactive .Button:disabled:active::before,.window-inactive .Button:disabled:checked::before{opacity:0}.Notebook .Notebook__arrow:disabled,.control-buttons button:disabled,.Notebook .disabled.Notebook__arrow,.control-buttons button.disabled,.Button:disabled,.Button.disabled{color:#929291;border-color:#202020;background-color:#343434;text-shadow:none;--icon-shadow: none;--icon-color: #929291;box-shadow:inset 0 1px rgba(255,255,255,0)}.Notebook .Notebook__arrow:disabled::before,.control-buttons button:disabled::before,.Notebook .disabled.Notebook__arrow::before,.control-buttons button.disabled::before,.Button:disabled::before,.Button.disabled::before{opacity:0}.Notebook .Notebook__arrow:disabled.active,.control-buttons button:disabled.active,.Notebook .Notebook__arrow:disabled:active,.control-buttons button:disabled:active,.Notebook .Notebook__arrow:disabled:checked,.control-buttons button:disabled:checked,.Notebook .disabled.active.Notebook__arrow,.control-buttons button.disabled.active,.Notebook .disabled.Notebook__arrow:active,.control-buttons button.disabled:active,.Notebook .disabled.Notebook__arrow:checked,.control-buttons button.disabled:checked,.Button:disabled.active,.Button:disabled:active,.Button:disabled:checked,.Button.disabled.active,.Button.disabled:active,.Button.disabled:checked{color:#929291;border-color:#202020;background-color:#252525;box-shadow:inset 0 1px rgba(255,255,255,0)}.Notebook .Notebook__arrow:disabled.active::before,.control-buttons button:disabled.active::before,.Notebook .Notebook__arrow:disabled:active::before,.control-buttons button:disabled:active::before,.Notebook .Notebook__arrow:disabled:checked::before,.control-buttons button:disabled:checked::before,.Notebook .disabled.active.Notebook__arrow::before,.control-buttons button.disabled.active::before,.Notebook .disabled.Notebook__arrow:active::before,.control-buttons button.disabled:active::before,.Notebook .disabled.Notebook__arrow:checked::before,.control-buttons button.disabled:checked::before,.Button:disabled.active::before,.Button:disabled:active::before,.Button:disabled:checked::before,.Button.disabled.active::before,.Button.disabled:active::before,.Button.disabled:checked::before{opacity:0}button.sidebar-button,.Notebook .Notebook__arrow,.control-buttons button,.Button.flat{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;transition:none}button.sidebar-button::before,.Notebook .Notebook__arrow::before,.control-buttons button::before,.Button.flat::before{opacity:0}button.sidebar-button:not(:disabled):not(.disabled).hover,.Notebook .Notebook__arrow:not(:disabled):not(.disabled).hover,.control-buttons button:not(:disabled):not(.disabled).hover,button.sidebar-button:not(:disabled):not(.disabled):hover,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):hover,.control-buttons button:not(:disabled):not(.disabled):hover,.Button.flat:not(:disabled):not(.disabled).hover,.Button.flat:not(:disabled):not(.disabled):hover{border-color:rgba(0,0,0,0);box-shadow:none;text-shadow:none;background-color:#1b1b1b;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);transition-duration:500ms}button.sidebar-button:not(:disabled):not(.disabled).hover::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled).hover::before,.control-buttons button:not(:disabled):not(.disabled).hover::before,button.sidebar-button:not(:disabled):not(.disabled):hover::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):hover::before,.control-buttons button:not(:disabled):not(.disabled):hover::before,.Button.flat:not(:disabled):not(.disabled).hover::before,.Button.flat:not(:disabled):not(.disabled):hover::before{opacity:0}button.sidebar-button:not(:disabled):not(.disabled):active,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):active,.control-buttons button:not(:disabled):not(.disabled):active,button.sidebar-button:not(:disabled):not(.disabled):checked,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):checked,.control-buttons button:not(:disabled):not(.disabled):checked,.Button.flat:not(:disabled):not(.disabled):active,.Button.flat:not(:disabled):not(.disabled):checked{border-color:rgba(0,0,0,0);box-shadow:none;text-shadow:none;background-color:#111;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}button.sidebar-button:not(:disabled):not(.disabled):active::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):active::before,.control-buttons button:not(:disabled):not(.disabled):active::before,button.sidebar-button:not(:disabled):not(.disabled):checked::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):checked::before,.control-buttons button:not(:disabled):not(.disabled):checked::before,.Button.flat:not(:disabled):not(.disabled):active::before,.Button.flat:not(:disabled):not(.disabled):checked::before{opacity:0}button.sidebar-button:disabled,.Notebook .Notebook__arrow:disabled,.control-buttons button:disabled,button.disabled.sidebar-button,.Notebook .disabled.Notebook__arrow,.control-buttons button.disabled,.Button.flat:disabled,.Button.flat.disabled{color:#dbdbd6}button.sidebar-button:backdrop,.Notebook .Notebook__arrow:backdrop,.control-buttons button:backdrop,button.sidebar-button:disabled,.Notebook .Notebook__arrow:disabled,.control-buttons button:disabled,.Button.flat:backdrop,.Button.flat:disabled,.Button.flat:backdrop:disabled{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}button.sidebar-button:backdrop::before,.Notebook .Notebook__arrow:backdrop::before,.control-buttons button:backdrop::before,button.sidebar-button:disabled::before,.Notebook .Notebook__arrow:disabled::before,.control-buttons button:disabled::before,.Button.flat:backdrop::before,.Button.flat:disabled::before,.Button.flat:backdrop:disabled::before{opacity:0}.Notebook .link.Notebook__arrow,.control-buttons button.link,.Button.link{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#3584e4;border-width:0}.Notebook .link.Notebook__arrow::before,.control-buttons button.link::before,.Button.link::before{opacity:0}.Notebook .link.Notebook__arrow:not(:disabled):not(.disabled),.control-buttons button.link:not(:disabled):not(.disabled),.Button.link:not(:disabled):not(.disabled),.Button.link:not(:disabled):not(.disabled):hover,.Button.link:not(:disabled):not(.disabled):active,.Button.link:not(:disabled):not(.disabled):checked{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#3584e4;text-shadow:none}.Notebook .link.Notebook__arrow:not(:disabled):not(.disabled)::before,.control-buttons button.link:not(:disabled):not(.disabled)::before,.Button.link:not(:disabled):not(.disabled)::before,.Button.link:not(:disabled):not(.disabled):hover::before,.Button.link:not(:disabled):not(.disabled):active::before,.Button.link:not(:disabled):not(.disabled):checked::before{opacity:0}.Notebook .link.Notebook__arrow:disabled,.control-buttons button.link:disabled,.Notebook .link.disabled.Notebook__arrow,.control-buttons button.link.disabled,.Button.link:disabled,.Button.link.disabled{color:rgba(53,132,228,.6);cursor:default}.Notebook .image-button.Notebook__arrow,.control-buttons button.image-button,.Button.image-button{padding-left:5px;padding-right:5px}.Notebook .text-button.Notebook__arrow,.control-buttons button.text-button,.Button.text-button{padding-left:16px;padding-right:16px}.Notebook .text-button.Notebook__arrow>.Button__icon,.control-buttons button.text-button>.Button__icon,.Button.text-button>.Button__icon{margin-right:.5em}.Notebook .text-button.image-button.Notebook__arrow,.control-buttons button.text-button.image-button,.Button.text-button.image-button{padding-left:8px;padding-right:8px}.Notebook .text-button.image-button.Notebook__arrow .Label,.control-buttons button.text-button.image-button .Label,.Button.text-button.image-button .Label{padding-left:8px;padding-right:8px}.Notebook .dnd-active.Notebook__arrow,.control-buttons button.dnd-active,.Button.dnd-active{color:#26a269;border-color:#26a269;box-shadow:inset 0 0 0 1px #26a269}row.selected button.sidebar-button:not(:active):not(:checked):not(:hover):not(disabled),row.selected .Button.flat:not(:active):not(:checked):not(:hover):not(disabled){color:#fff;border-color:rgba(0,0,0,0)}row.selected button.sidebar-button:not(:active):not(:checked):not(:hover):not(disabled):backdrop,row.selected .Button.flat:not(:active):not(:checked):not(:hover):not(disabled):backdrop{color:#929291}.Button.osd{min-width:26px;min-height:32px;color:#eeeeec;border-radius:5px;color:#eeeeec;outline-color:rgba(21,83,158,.7);border-color:rgba(0,0,0,.7);background-color:rgba(38,38,38,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none;border:none;box-shadow:none}.Button.osd.image-button{min-width:30px}.Button.osd.image-button:only-child{margin:4px;border-radius:50%;box-shadow:0 1px 2px rgba(0,0,0,.2)}.Button.osd::before{opacity:0}.Button.osd:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(12,12,12,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none;border:none;box-shadow:none}.Button.osd:hover::before{opacity:0}.Button.osd:active,.Button.osd:checked{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(0,0,0,.7);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none;border:none;box-shadow:none}.Button.osd:active::before,.Button.osd:checked::before{opacity:0}.app-notification button,.osd .Button{color:#eeeeec;outline-color:rgba(21,83,158,.7);border-color:rgba(0,0,0,.7);background-color:rgba(38,38,38,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.app-notification button::before,.osd .Button::before{opacity:0}.app-notification button:hover,.osd .Button:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(12,12,12,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.app-notification button:hover::before,.osd .Button:hover::before{opacity:0}.app-notification button:active,.app-notification button:checked,.osd .Button:active:backdrop,.osd .Button:active,.osd .Button:checked:backdrop,.osd .Button:checked{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(0,0,0,.7);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.app-notification button:active::before,.app-notification button:checked::before,.osd .Button:active:backdrop::before,.osd .Button:active::before,.osd .Button:checked:backdrop::before,.osd .Button:checked::before{opacity:0}.app-notification button:disabled,.osd .Button:disabled:backdrop,.osd .Button:disabled{color:#8a8a89;border-color:rgba(0,0,0,.7);background-color:rgba(58,58,58,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.app-notification button:disabled::before,.osd .Button:disabled:backdrop::before,.osd .Button:disabled::before{opacity:0}.app-notification button.flat,.osd .Button.flat{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;box-shadow:none;text-shadow:0 1px #000;--icon-shadow: 0 1px black}.app-notification button.flat::before,.osd .Button.flat::before{opacity:0}.app-notification button.flat:hover,.osd .Button.flat:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(12,12,12,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.app-notification button.flat:hover::before,.osd .Button.flat:hover::before{opacity:0}.app-notification button.flat:disabled,.osd .Button.flat:disabled{color:#8a8a89;border-color:rgba(0,0,0,.7);background-color:rgba(58,58,58,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none;background-image:none;border-color:rgba(0,0,0,0);box-shadow:none}.app-notification button.flat:disabled::before,.osd .Button.flat:disabled::before{opacity:0}.app-notification button.flat:active,.app-notification button.flat:checked,.osd .Button.flat:active,.osd .Button.flat:checked{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(0,0,0,.7);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.app-notification button.flat:active::before,.app-notification button.flat:checked::before,.osd .Button.flat:active::before,.osd .Button.flat:checked::before{opacity:0}.Button.suggested-action{color:#fff;outline-color:rgba(255,255,255,.3);border-color:#0f3b71;border-bottom-color:#092444;background-color:#15539e;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.Button.suggested-action::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Button.suggested-action{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Button.suggested-action:focus:focus-visible{outline-color:rgba(255,255,255,.3);outline-width:2px;outline-offset:-2px}.Button.suggested-action.flat{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#15539e}.Button.suggested-action.flat::before{opacity:0}.Button.suggested-action:not(:disabled):not(.disabled).hover,.Button.suggested-action:not(:disabled):not(.disabled):hover{color:#fff;border-color:#0f3b71;border-bottom-color:#092444;background-color:#134c90;box-shadow:inset 0 1px #15539e,0 1px 2px rgba(0,0,0,.07)}.Button.suggested-action:not(:disabled):not(.disabled).hover::before,.Button.suggested-action:not(:disabled):not(.disabled):hover::before{opacity:0}.Button.suggested-action:not(:disabled):not(.disabled).active,.Button.suggested-action:not(:disabled):not(.disabled):active,.Button.suggested-action:not(:disabled):not(.disabled):checked{color:#fff;border-color:#0f3b71;background-color:#103e75;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Button.suggested-action:not(:disabled):not(.disabled).active::before,.Button.suggested-action:not(:disabled):not(.disabled):active::before,.Button.suggested-action:not(:disabled):not(.disabled):checked::before{opacity:0}.Button.suggested-action.flat:disabled{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:rgba(21,83,158,.8)}.Button.suggested-action.flat:disabled::before{opacity:0}.Button.suggested-action:disabled{color:#929291;border-color:#202020;background-color:#343434;text-shadow:none;--icon-shadow: none;--icon-color: #929291;box-shadow:inset 0 1px rgba(255,255,255,0)}.Button.suggested-action:disabled::before{opacity:0}.Button.suggested-action:disabled:active,.Button.suggested-action:disabled:checked{color:#a1b2c7;border-color:#0f3b71;background-color:#143f73;box-shadow:inset 0 1px rgba(255,255,255,0)}.Button.suggested-action:disabled:active::before,.Button.suggested-action:disabled:checked::before{opacity:0}.osd .Button.suggested-action{color:#eeeeec;outline-color:rgba(255,255,255,.3);border-color:rgba(0,0,0,.7);background-color:rgba(21,83,158,.5);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .Button.suggested-action::before{opacity:0}.osd .Button.suggested-action:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(21,83,158,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .Button.suggested-action:hover::before{opacity:0}.osd .Button.suggested-action:active:backdrop,.osd .Button.suggested-action:active,.osd .Button.suggested-action:checked:backdrop,.osd .Button.suggested-action:checked{color:#fff;border-color:rgba(0,0,0,.7);background-color:#15539e;background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .Button.suggested-action:active:backdrop::before,.osd .Button.suggested-action:active::before,.osd .Button.suggested-action:checked:backdrop::before,.osd .Button.suggested-action:checked::before{opacity:0}.osd .Button.suggested-action:disabled:backdrop,.osd .Button.suggested-action:disabled{color:#8a8a89;border-color:rgba(0,0,0,.7);background-color:rgba(58,58,58,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .Button.suggested-action:disabled:backdrop::before,.osd .Button.suggested-action:disabled::before{opacity:0}.Button.destructive-action{color:#fff;outline-color:rgba(255,255,255,.3);border-color:#851015;border-bottom-color:#570b0e;background-color:#b2161d;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.Button.destructive-action::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Button.destructive-action{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Button.destructive-action:focus:focus-visible{outline-color:rgba(255,255,255,.3);outline-width:2px;outline-offset:-2px}.Button.destructive-action.flat{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#b2161d}.Button.destructive-action.flat::before{opacity:0}.Button.destructive-action:not(:disabled):not(.disabled).hover,.Button.destructive-action:not(:disabled):not(.disabled):hover{color:#fff;border-color:#851015;border-bottom-color:#570b0e;background-color:#a5141a;box-shadow:inset 0 1px #b2161d,0 1px 2px rgba(0,0,0,.07)}.Button.destructive-action:not(:disabled):not(.disabled).hover::before,.Button.destructive-action:not(:disabled):not(.disabled):hover::before{opacity:0}.Button.destructive-action:not(:disabled):not(.disabled).active,.Button.destructive-action:not(:disabled):not(.disabled):active,.Button.destructive-action:not(:disabled):not(.disabled):checked{color:#fff;border-color:#851015;background-color:#8a1116;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Button.destructive-action:not(:disabled):not(.disabled).active::before,.Button.destructive-action:not(:disabled):not(.disabled):active::before,.Button.destructive-action:not(:disabled):not(.disabled):checked::before{opacity:0}.Button.destructive-action.flat:disabled{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:rgba(178,22,29,.8)}.Button.destructive-action.flat:disabled::before{opacity:0}.Button.destructive-action:disabled{color:#929291;border-color:#202020;background-color:#343434;text-shadow:none;--icon-shadow: none;--icon-color: #929291;box-shadow:inset 0 1px rgba(255,255,255,0)}.Button.destructive-action:disabled::before{opacity:0}.Button.destructive-action:disabled:active,.Button.destructive-action:disabled:checked{color:#cea1a3;border-color:#851015;background-color:#84151a;box-shadow:inset 0 1px rgba(255,255,255,0)}.Button.destructive-action:disabled:active::before,.Button.destructive-action:disabled:checked::before{opacity:0}.osd .Button.destructive-action{color:#eeeeec;outline-color:rgba(255,255,255,.3);border-color:rgba(0,0,0,.7);background-color:rgba(178,22,29,.5);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .Button.destructive-action::before{opacity:0}.osd .Button.destructive-action:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(178,22,29,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .Button.destructive-action:hover::before{opacity:0}.osd .Button.destructive-action:active:backdrop,.osd .Button.destructive-action:active,.osd .Button.destructive-action:checked:backdrop,.osd .Button.destructive-action:checked{color:#fff;border-color:rgba(0,0,0,.7);background-color:#b2161d;background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .Button.destructive-action:active:backdrop::before,.osd .Button.destructive-action:active::before,.osd .Button.destructive-action:checked:backdrop::before,.osd .Button.destructive-action:checked::before{opacity:0}.osd .Button.destructive-action:disabled:backdrop,.osd .Button.destructive-action:disabled{color:#8a8a89;border-color:rgba(0,0,0,.7);background-color:rgba(58,58,58,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .Button.destructive-action:disabled:backdrop::before,.osd .Button.destructive-action:disabled::before{opacity:0}.StackSwitcher>.Button>.Label{padding:0 6px;margin:0 -6px}.StackSwitcher>.Button>.Image{padding:3px 6px;margin:-3px -6px}.linked:not(.vertical)>.Button:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.linked:not(.vertical)>.Button:not(:last-child){border-right-style:none;border-top-right-radius:0;border-bottom-right-radius:0}.linked.vertical>.Button:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.linked.vertical>.Button:not(:last-child){border-bottom-style:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.Button.circular{min-width:32px;min-height:32px;padding:0;border-radius:9999px}.Button.circular .Label{padding:0}.stack-sidebar .List__item.needs-attention>.Label,.StackSwitcher>.Button.needs-attention>.Label,.StackSwitcher>.Button.needs-attention>.Image{animation:needs_attention 150ms ease-in;background-image:radial-gradient(farthest-side, #1f76e1 96%, rgba(31, 118, 225, 0));background-size:5px 5px,5px 5px;background-repeat:no-repeat;background-position:right 3px,right 2px}.stack-sidebar .List__item.needs-attention>.Label:backdrop,.StackSwitcher>.Button.needs-attention>.Label:backdrop,.StackSwitcher>.Button.needs-attention>.Image:backdrop{background-size:6px 6px,0 0}.stack-sidebar .List__item.needs-attention>.Label:dir(rtl),.StackSwitcher>.Button.needs-attention>.Label:dir(rtl),.StackSwitcher>.Button.needs-attention>.Image:dir(rtl){background-position:left 3px,left 2px}.linked:not(.vertical)>menubutton:dir(ltr):not(:first-child)>button,.linked:not(.vertical)>.Dropdown:dir(ltr):not(:first-child)>button,.linked:not(.vertical)>colorbutton:dir(ltr):not(:first-child)>button,.linked:not(.vertical)>fontbutton:dir(ltr):not(:first-child)>button,.linked:not(.vertical)>filechooserbutton:dir(ltr):not(:first-child)>button{border-top-left-radius:0;border-bottom-left-radius:0}.linked:not(.vertical)>menubutton:dir(ltr):not(:last-child)>button,.linked:not(.vertical)>.Dropdown:dir(ltr):not(:last-child)>button,.linked:not(.vertical)>colorbutton:dir(ltr):not(:last-child)>button,.linked:not(.vertical)>fontbutton:dir(ltr):not(:last-child)>button,.linked:not(.vertical)>filechooserbutton:dir(ltr):not(:last-child)>button{border-right-style:none;border-top-right-radius:0;border-bottom-right-radius:0}.linked:not(.vertical)>menubutton:dir(rtl):not(:first-child)>button,.linked:not(.vertical)>.Dropdown:dir(rtl):not(:first-child)>button,.linked:not(.vertical)>colorbutton:dir(rtl):not(:first-child)>button,.linked:not(.vertical)>fontbutton:dir(rtl):not(:first-child)>button,.linked:not(.vertical)>filechooserbutton:dir(rtl):not(:first-child)>button{border-right-style:none;border-top-right-radius:0;border-bottom-right-radius:0}.linked:not(.vertical)>menubutton:dir(rtl):not(:last-child)>button,.linked:not(.vertical)>.Dropdown:dir(rtl):not(:last-child)>button,.linked:not(.vertical)>colorbutton:dir(rtl):not(:last-child)>button,.linked:not(.vertical)>fontbutton:dir(rtl):not(:last-child)>button,.linked:not(.vertical)>filechooserbutton:dir(rtl):not(:last-child)>button{border-top-left-radius:0;border-bottom-left-radius:0}.linked.vertical>menubutton:not(:first-child)>button,.linked.vertical>.Dropdown:not(:first-child)>button,.linked.vertical>colorbutton:not(:first-child)>button,.linked.vertical>fontbutton:not(:first-child)>button,.linked.vertical>filechooserbutton:not(:first-child)>button{border-top-left-radius:0;border-top-right-radius:0}.linked.vertical>menubutton:not(:last-child)>button,.linked.vertical>.Dropdown:not(:last-child)>button,.linked.vertical>colorbutton:not(:last-child)>button,.linked.vertical>fontbutton:not(:last-child)>button,.linked.vertical>filechooserbutton:not(:last-child)>button{border-bottom-style:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.ModelItem,.ModelButton,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable{min-height:26px;padding-left:5px;padding-right:5px}.ModelButton,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;border:none;border-radius:0;text-align:left}.ModelButton::before,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable::before{opacity:0}.ModelButton.focus,.navigation-sidebar:not(.increase-specificity)>.focus.List__item.activatable,.ModelButton:focus,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable:focus,.ModelButton.hover,.navigation-sidebar:not(.increase-specificity)>.hover.List__item.activatable,.ModelButton:hover,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable:hover{outline:none;background-color:#202020}.ModelButton.active,.navigation-sidebar:not(.increase-specificity)>.active.List__item.activatable,.ModelButton:active,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable:active{border-color:rgba(0,0,0,0);box-shadow:none;text-shadow:none;background-color:#111}.ModelButton.active::before,.navigation-sidebar:not(.increase-specificity)>.active.List__item.activatable::before,.ModelButton:active::before,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable:active::before{opacity:0}.ModelButton.disabled,.navigation-sidebar:not(.increase-specificity)>.disabled.List__item.activatable,.ModelButton:disabled,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable:disabled{color:#929291}.Toolbar button{margin:1px;color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Toolbar button::before{opacity:0}.Toolbar button:hover{color:#eeeeec;border-color:#1b1b1b;border-bottom-color:#070707;background-color:#2d2d2d;box-shadow:inset 0 1px #353535,0 1px 2px rgba(0,0,0,.07)}.Toolbar button:hover::before{opacity:0}.Toolbar button:active{color:#eeeeec;border-color:#1b1b1b;background-color:#1e1e1e;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Toolbar button:active::before{opacity:0}.Toolbar button:disabled{color:#929291;border-color:#202020;background-color:#343434;text-shadow:none;--icon-shadow: none;--icon-color: #929291;box-shadow:inset 0 1px rgba(255,255,255,0)}.Toolbar button:disabled::before{opacity:0}.Toolbar button:backdrop{color:#929291;border-color:#202020;background-color:#353535;text-shadow:none;--icon-shadow: none;box-shadow:inset 0 1px rgba(255,255,255,0)}.Toolbar button:backdrop::before{opacity:0}.Toolbar button:backdrop:disabled{color:#5b5b5b;border-color:#202020;background-color:#343434;text-shadow:none;--icon-shadow: none;box-shadow:inset 0 1px rgba(255,255,255,0)}.Toolbar button:backdrop:disabled::before{opacity:0}button.color{padding:4px}button.color>colorswatch:only-child,button.color>colorswatch:only-child>overlay{border-radius:0}.Menu .Box.circular-buttons .Button.circular,.list>.Row button.image-button:not(.flat){color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;border:1px solid rgba(27,27,27,.5)}.Menu .Box.circular-buttons .Button.circular::before,.list>.Row button.image-button:not(.flat)::before{opacity:0}.Menu .Box.circular-buttons .Button.circular:hover,.list>.Row button.image-button:not(.flat):hover{color:#eeeeec;border-color:#1b1b1b;border-bottom-color:#070707;background-color:#2d2d2d;box-shadow:inset 0 1px #353535,0 1px 2px rgba(0,0,0,.07)}.Menu .Box.circular-buttons .Button.circular:hover::before,.list>.Row button.image-button:not(.flat):hover::before{opacity:0}.Menu .Box.circular-buttons .Button.circular:active,.Menu .Box.circular-buttons .Button.circular:checked,.list>.Row button.image-button:not(.flat):active,.list>.Row button.image-button:not(.flat):checked{color:#eeeeec;border-color:#1b1b1b;background-color:#1e1e1e;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Menu .Box.circular-buttons .Button.circular:active::before,.Menu .Box.circular-buttons .Button.circular:checked::before,.list>.Row button.image-button:not(.flat):active::before,.list>.Row button.image-button:not(.flat):checked::before{opacity:0}input[type=number]{-moz-appearance:textfield}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.InputNumber{font-feature-settings:"tnum"}.InputNumber:not(.vertical){display:flex;flex-direction:row;justify-content:center;align-items:center;padding:0;border-spacing:0;width:100px}.InputNumber:not(.vertical).mini{width:54px}.InputNumber:not(.vertical).mini>.Input__area>input,.InputNumber:not(.vertical).mini>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).mini>button.InputNumber__button.down:not(.flat){width:16px}.InputNumber:not(.vertical).small{width:66px}.InputNumber:not(.vertical).small>.Input__area>input,.InputNumber:not(.vertical).small>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).small>button.InputNumber__button.down:not(.flat){width:20px}.InputNumber:not(.vertical).medium{width:84px}.InputNumber:not(.vertical).medium>.Input__area>input,.InputNumber:not(.vertical).medium>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).medium>button.InputNumber__button.down:not(.flat){width:26px}.InputNumber:not(.vertical).large{width:108px}.InputNumber:not(.vertical).large>.Input__area>input,.InputNumber:not(.vertical).large>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).large>button.InputNumber__button.down:not(.flat){width:34px}.InputNumber:not(.vertical).huge{width:126px}.InputNumber:not(.vertical).huge>.Input__area>input,.InputNumber:not(.vertical).huge>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).huge>button.InputNumber__button.down:not(.flat){width:40px}.InputNumber:not(.vertical).mega{width:174px}.InputNumber:not(.vertical).mega>.Input__area>input,.InputNumber:not(.vertical).mega>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).mega>button.InputNumber__button.down:not(.flat){width:56px}.osd .InputNumber:not(.vertical)>.Input__area>input,.InputNumber:not(.vertical)>.Input__area>input{min-width:28px;margin:0;background:none;background-color:rgba(0,0,0,0);border:none;border-radius:0;box-shadow:none;padding:6px}.window-inactive .InputNumber:not(.vertical)>.Input__area>input.disabled,.window-inactive .InputNumber:not(.vertical)>.Input__area>input:disabled{background-color:rgba(0,0,0,0)}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat){display:flex;justify-content:center;align-items:center;height:100%;margin:0;padding-bottom:0;padding-top:0;color:#dbdbd9;background-color:rgba(0,0,0,0);border-width:.5px;border-style:none none none solid;border-color:rgba(27,27,27,.3);border-radius:0;box-shadow:none;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(rtl),.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(rtl){border-style:none solid none none}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):not(:disabled):focus,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):not(:disabled):focus{outline:none}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):not(:disabled):hover,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):not(:disabled):hover{color:#eeeeec;background-color:rgba(0,0,0,.03);box-shadow:0 -1px #282828}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):not(:disabled):active,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):not(:disabled):active{background-color:rgba(0,0,0,.1);box-shadow:inset 0 2px 2px 0px rgba(0,0,0,.08)}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):disabled,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):disabled{color:rgba(146,146,145,.3);background-color:rgba(0,0,0,0)}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(ltr):last-child,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(ltr):last-child{border-radius:0 5px 5px 0}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(rtl):first-child,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(rtl):first-child{border-radius:5px 0 0 5px}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat),.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat){color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#eeeeec;border-style:none none none solid;border-color:rgba(0,0,0,.4);border-radius:0;box-shadow:none;--icon-shadow: 0 1px black;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat)::before,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat)::before{opacity:0}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(rtl),.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(rtl){border-style:none solid none none}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):hover,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):hover{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#eeeeec;border-color:rgba(0,0,0,.5);background-color:rgba(12,12,12,.7);--icon-shadow: 0 1px black;box-shadow:none}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):hover::before,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):hover::before{opacity:0}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):disabled,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):disabled{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#8a8a89;border-color:rgba(0,0,0,.5);--icon-shadow: none;box-shadow:none}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):disabled::before,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):disabled::before{opacity:0}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(ltr):last-child,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(ltr):last-child{border-radius:0 5px 5px 0}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(rtl):first-child,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(rtl):first-child{border-radius:5px 0 0 5px}.InputNumber.vertical{display:inline-flex;flex-direction:column;min-width:40px;width:40px}.InputNumber.vertical.mini{width:26px}.InputNumber.vertical.mini>.Input__area>input,.InputNumber.vertical.mini>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.mini>button.InputNumber__button.down:not(.flat){min-height:18px}.InputNumber.vertical.small{width:31px}.InputNumber.vertical.small>.Input__area>input,.InputNumber.vertical.small>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.small>button.InputNumber__button.down:not(.flat){min-height:22px}.InputNumber.vertical.medium{width:40px}.InputNumber.vertical.medium>.Input__area>input,.InputNumber.vertical.medium>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.medium>button.InputNumber__button.down:not(.flat){min-height:28px}.InputNumber.vertical.large{width:51px}.InputNumber.vertical.large>.Input__area>input,.InputNumber.vertical.large>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.large>button.InputNumber__button.down:not(.flat){min-height:36px}.InputNumber.vertical.huge{width:60px}.InputNumber.vertical.huge>.Input__area>input,.InputNumber.vertical.huge>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.huge>button.InputNumber__button.down:not(.flat){min-height:42px}.InputNumber.vertical.mega{width:83px}.InputNumber.vertical.mega>.Input__area>input,.InputNumber.vertical.mega>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.mega>button.InputNumber__button.down:not(.flat){min-height:58px}.InputNumber.vertical.dnd-active{border-color:rgba(0,0,0,0);box-shadow:none}.InputNumber.vertical>.Input__area{order:2}.InputNumber.vertical>.Input__area{position:relative;outline:none;overflow:visible}.InputNumber.vertical>.Input__area::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.InputNumber.vertical>.Input__area:focus-within{outline:none}.InputNumber.vertical>.Input__area:focus-within::after{border:2px solid rgba(21,83,158,.7);top:-2px;left:-2px;width:100%;height:100%}.InputNumber.vertical>.Input__area>input{width:100%;padding:0;border-radius:0;text-align:center}.InputNumber.vertical>.Input__area>input>block-cursor{color:#2d2d2d;background-color:#fff}.InputNumber.vertical>button{width:100%;padding:0}.InputNumber.vertical>button.up{order:1;border-bottom-style:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.InputNumber.vertical>button.down{order:3;border-top-style:none;border-top-left-radius:0;border-top-right-radius:0}.osd .InputNumber.vertical>button:first-child{color:#eeeeec;outline-color:rgba(21,83,158,.7);border-color:rgba(0,0,0,.7);background-color:rgba(38,38,38,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .InputNumber.vertical>button:first-child::before{opacity:0}.osd .InputNumber.vertical>button:first-child:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(12,12,12,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .InputNumber.vertical>button:first-child:hover::before{opacity:0}.osd .InputNumber.vertical>button:first-child:active{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(0,0,0,.7);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .InputNumber.vertical>button:first-child:active::before{opacity:0}.osd .InputNumber.vertical>button:first-child:disabled{color:#8a8a89;border-color:rgba(0,0,0,.7);background-color:rgba(58,58,58,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .InputNumber.vertical>button:first-child:disabled::before{opacity:0}.TreeView .InputNumber:not(.vertical){min-height:0;border-style:none;border-radius:0}.TreeView .InputNumber:not(.vertical)>text{min-height:0;padding:1px 2px}.InputNumber>input{font-feature-settings:"tnum"}.Dropdown{display:flex;flex-direction:row;min-width:120px}.Dropdown.Button>.Label{flex:1;text-align:left}.Dropdown.Button>.Icon{flex:0}.Dropdown.open{background-color:#2d2d2d}.Dropdown.open.popover-bottom{border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-color:rgba(0,0,0,0)}.Dropdown.open.popover-top{border-top-left-radius:0;border-top-right-radius:0;border-top-color:rgba(0,0,0,0)}.Dropdown.open.Button.active{color:#eeeeec;border-color:#1b1b1b;border-bottom-color:#070707;background-color:#2d2d2d;box-shadow:inset 0 1px #353535,0 1px 2px rgba(0,0,0,.07);border-color:rgba(27,27,27,.9)}.Dropdown.open.Button.active::before{opacity:0}.Dropdown__menu.Popover.bottom .Popover__container{padding-top:0;border-top:none;border-top-left-radius:0;border-top-right-radius:0}.Dropdown__menu.Popover.top .Popover__container{padding-top:0;border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.Dropdown__menu.Popover .Popover__container .Dropdown__item{padding-left:9px;padding-right:9px;padding:0 12px}.Dropdown__menu.Popover .Popover__container .ModelButton.selected,.Dropdown__menu.Popover .Popover__container .navigation-sidebar:not(.increase-specificity)>.selected.List__item.activatable{font-weight:700;outline-color:rgba(255,255,255,.3);color:#fff;background-color:#202020}.Dropdown__menu.Popover .dropdown-searchbar{padding:6px;border-bottom:1px solid #1b1b1b}.SearchBar,.Toolbar{padding:4px;border-spacing:4px;background-color:#353535}.Toolbar.horizontal{display:flex;flex-direction:row}.Toolbar.vertical{display:flex;flex-direction:column;width:38px}.osd .Toolbar{background-color:rgba(0,0,0,0)}.Toolbar.osd{padding:13px;border:none;border-radius:5px;background-color:rgba(38,38,38,.7)}.Toolbar.osd.left,.Toolbar.osd.right,.Toolbar.osd.top,.Toolbar.osd.bottom{border-radius:0}.Toolbar.horizontal>.separator{display:inline-block;min-height:28px;margin:0 3px}.Toolbar.vertical>.separator{margin:3px 1px}.InfoBar{display:block;overflow:hidden;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);height:45px}.InfoBar.close{height:0}.InfoBar>.Box{padding:8px;border-spacing:12px}.InfoBar.info>.Box{border-bottom:1px solid #101923;background-color:#293e57}.InfoBar.info.activatable:hover>.Box{background-color:#2e4562}.InfoBar.info>.Box>.Button{color:#eeeeec;outline-color:rgba(255,255,255,.3);border-color:#182535;border-bottom-color:#080d12;background-color:#293e57;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.InfoBar.info>.Box>.Button::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.InfoBar.info>.Box>.Button.hover,.InfoBar.info>.Box>.Button:hover{color:#eeeeec;border-color:#182535;border-bottom-color:#080d12;background-color:#24364d;box-shadow:inset 0 1px #293e57,0 1px 2px rgba(0,0,0,.07)}.InfoBar.info>.Box>.Button.hover::before,.InfoBar.info>.Box>.Button:hover::before{opacity:0}.InfoBar.info>.Box>.Button.active,.InfoBar.info>.Box>.Button:active{color:#eeeeec;border-color:#182535;background-color:#1a2838;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.InfoBar.info>.Box>.Button.active::before,.InfoBar.info>.Box>.Button:active::before{opacity:0}.InfoBar.success>.Box{border-bottom:1px solid #1f3228;background-color:#3d614d}.InfoBar.success.activatable:hover>.Box{background-color:#436b55}.InfoBar.success>.Box>.Button{color:#eeeeec;outline-color:rgba(255,255,255,.3);border-color:#294234;border-bottom-color:#16221b;background-color:#3d614d;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.InfoBar.success>.Box>.Button::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.InfoBar.success>.Box>.Button.hover,.InfoBar.success>.Box>.Button:hover{color:#eeeeec;border-color:#294234;border-bottom-color:#16221b;background-color:#375846;box-shadow:inset 0 1px #3d614d,0 1px 2px rgba(0,0,0,.07)}.InfoBar.success>.Box>.Button.hover::before,.InfoBar.success>.Box>.Button:hover::before{opacity:0}.InfoBar.success>.Box>.Button.active,.InfoBar.success>.Box>.Button:active{color:#eeeeec;border-color:#294234;background-color:#2b4537;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.InfoBar.success>.Box>.Button.active::before,.InfoBar.success>.Box>.Button:active::before{opacity:0}.InfoBar.warning>.Box{border-bottom:1px solid #5e3a18;background-color:#9b6027}.InfoBar.warning.activatable:hover>.Box{background-color:#a7682a}.InfoBar.warning>.Box>.Button{color:#eeeeec;outline-color:rgba(255,255,255,.3);border-color:#72471d;border-bottom-color:#4a2e12;background-color:#9b6027;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.InfoBar.warning>.Box>.Button::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.InfoBar.warning>.Box>.Button.hover,.InfoBar.warning>.Box>.Button:hover{color:#eeeeec;border-color:#72471d;border-bottom-color:#4a2e12;background-color:#8f5924;box-shadow:inset 0 1px #9b6027,0 1px 2px rgba(0,0,0,.07)}.InfoBar.warning>.Box>.Button.hover::before,.InfoBar.warning>.Box>.Button:hover::before{opacity:0}.InfoBar.warning>.Box>.Button.active,.InfoBar.warning>.Box>.Button:active{color:#eeeeec;border-color:#72471d;background-color:#764a1e;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.InfoBar.warning>.Box>.Button.active::before,.InfoBar.warning>.Box>.Button:active::before{opacity:0}.InfoBar.danger>.Box{border-bottom:1px solid #3d0f0f;background-color:#7a1f1f}.InfoBar.danger.activatable:hover>.Box{background-color:#872222}.InfoBar.danger>.Box>.Button{color:#eeeeec;outline-color:rgba(255,255,255,.3);border-color:#521414;border-bottom-color:#290a0a;background-color:#7a1f1f;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}.InfoBar.danger>.Box>.Button::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.InfoBar.danger>.Box>.Button.hover,.InfoBar.danger>.Box>.Button:hover{color:#eeeeec;border-color:#521414;border-bottom-color:#290a0a;background-color:#6e1c1c;box-shadow:inset 0 1px #7a1f1f,0 1px 2px rgba(0,0,0,.07)}.InfoBar.danger>.Box>.Button.hover::before,.InfoBar.danger>.Box>.Button:hover::before{opacity:0}.InfoBar.danger>.Box>.Button.active,.InfoBar.danger>.Box>.Button:active{color:#eeeeec;border-color:#521414;background-color:#561515;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.InfoBar.danger>.Box>.Button.active::before,.InfoBar.danger>.Box>.Button:active::before{opacity:0}.SearchBar{border-style:solid;border-color:#1b1b1b;background-color:#2d2d2d}.window-inactive .SearchBar{border-color:#202020;background-color:#2e2e2e;box-shadow:none;transition:200ms ease-out}.SearchBar{padding:6px;border-spacing:6px;border-width:0 0 1px}.control-buttons{border-spacing:6px}.control-buttons:not(.empty).start:dir(ltr),.control-buttons:not(.empty).end:dir(rtl){margin-right:7px}.control-buttons:not(.empty).start:dir(rtl),.control-buttons:not(.empty).end:dir(ltr){margin-left:7px}.control-buttons button{border-radius:9999px;padding:6px;margin:0 2px;min-width:0;min-height:0}.control-buttons button:not(:disabled):not(.disabled):hover{color:#eeeeec;border-color:#000;border-bottom-color:#000;background-color:#0c0c0c;box-shadow:inset 0 1px #141414,0 1px 2px rgba(0,0,0,.07)}.control-buttons button:not(:disabled):not(.disabled):hover::before{opacity:0}.control-buttons button:not(:disabled):not(.disabled):active,.control-buttons button:not(:disabled):not(.disabled):checked{border-color:rgba(0,0,0,0);box-shadow:none;text-shadow:none;background-color:#000}.control-buttons button:not(:disabled):not(.disabled):active::before,.control-buttons button:not(:disabled):not(.disabled):checked::before{opacity:0}.titlebar:not(.HeaderBar),.HeaderBar{padding:0 6px;min-height:46px;border-width:1px;border-style:solid;border-color:#070707;border-top-left-radius:8px;border-top-right-radius:8px;background:#2d2d2d linear-gradient(to top, #373737, #3c3c3c);box-shadow:inset 0 1px rgba(238,238,236,.07),inset 0 -2px 2px rgba(0,0,0,.02)}.window-inactive .titlebar:not(.HeaderBar),.window-inactive .HeaderBar{border-color:#202020;background-color:#353535;background-image:none;box-shadow:inset 0 1px rgba(238,238,236,.07);transition:200ms ease-out}.titlebar:not(.HeaderBar),.HeaderBar.titlebar{background:#282828 linear-gradient(to top, #323232, #373737);box-shadow:inset 0 1px rgba(238,238,236,.07),inset 0 -2px 2px rgba(0,0,0,.02);background:none;background-color:#202020;box-shadow:none}.titlebar:not(.HeaderBar)>.Box,.HeaderBar>.Box{min-height:46px}.titlebar:not(.HeaderBar) .title,.HeaderBar .title{padding-left:12px;padding-right:12px;font-weight:bold}.titlebar:not(.HeaderBar) .title:not(:only-child),.HeaderBar .title:not(:only-child){margin-bottom:.15em}.titlebar:not(.HeaderBar) .subtitle,.HeaderBar .subtitle{font-size:smaller;padding-left:12px;padding-right:12px}.titlebar:not(.HeaderBar) .Button:not(:disabled):not(.disabled).active,.HeaderBar .Button:not(:disabled):not(.disabled).active{border-color:#141414;border-top-color:#070707}.titlebar:not(.HeaderBar),.window-inactive .HeaderBar.titlebar,.HeaderBar.titlebar,.window-inactive .HeaderBar.no-round-corner,.HeaderBar.no-round-corner,.window-inactive .maximized .HeaderBar,.maximized .HeaderBar,.window-inactive .fullscreen .HeaderBar,.fullscreen .HeaderBar{border-radius:0}.Window.csd>.titlebar:not(.HeaderBar){padding:0;background-color:rgba(0,0,0,0);background-image:none;border-style:none;border-color:rgba(0,0,0,0);box-shadow:none}.titlebar:not(.HeaderBar) .separator{background-color:#1b1b1b}pathbar>button.text-button,pathbar>button.image-button,pathbar>button{padding-left:4px;padding-right:4px}pathbar>button.text-button.image-button .Label{padding-left:0;padding-right:0}pathbar>button.text-button.image-button .Label:last-child,pathbar>button .Label:last-child{padding-right:8px}pathbar>button.text-button.image-button .Label:first-child,pathbar>button .Label:first-child{padding-left:8px}pathbar>button image{padding-left:4px;padding-right:4px}pathbar>button.slider-button{padding-left:0;padding-right:0}.table{display:flex;flex-direction:column;width:100%;height:100%;max-width:100%;overflow:hidden;border:1px solid #545453;background-color:#2d2d2d}.table{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.table:focus:focus-visible{outline-color:rgba(21,83,158,.7);outline-width:2px;outline-offset:-2px}.table.disabled{color:#929291}.table.disabled.selected{color:#7398c5}.table.disabled.selected:backdrop{color:#4f7aaf}.window-inactive .table{border-left-color:#414141;border-top:#414141}.table .table__header{flex:0 0 auto;width:100%;height:min-content;overflow:hidden;user-select:none}.table .table__header__content{min-width:100%;width:min-content;height:min-content;overflow-x:scroll;overflow-y:hidden}.table .table__body{flex:1;overflow-y:hidden;overflow-x:hidden}.table .table__body>div{width:100%;margin:0}@media screen and (-webkit-min-device-pixel-ratio: 0){.table .table__body>div:not(.resize-triggers)>div{overflow:overlay}.table .table__body>div:not(.resize-triggers)>div::-webkit-scrollbar{width:8px;height:8px;z-index:1000}.table .table__body>div:not(.resize-triggers)>div::-webkit-scrollbar-thumb{background-clip:padding-box;border-radius:16px;border:2px solid rgba(0,0,0,0);background-color:rgba(0,0,0,.2);-webkit-transition:background-color .5s ease;transition:background-color .5s ease}.table .table__body>div:not(.resize-triggers)>div::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.3)}.table .table__body>div:not(.resize-triggers)>div::-webkit-scrollbar-thumb:active{background-color:rgba(0,0,0,.4)}}.table .th{color:#8e8e8d;--icon-color: #8e8e8d;background-color:#2d2d2d;font-weight:bold;text-shadow:none;box-shadow:none;cursor:default}.table .th:first-child{border-left:none}.table .th.activatable:hover{color:#bebebd;box-shadow:none;transition:none}.table .th.activatable:active{color:#eeeeec;transition:none}.table .th>.Label{flex:1}.table .th .table__sortIcon{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.table .th .table__sortIcon:not(.descending){transform:rotate(180deg)}.table .th .table__sortIcon.hidden{opacity:0}.table .th:hover .table__sortIcon.hidden{opacity:.5}.table .th .table__filter{padding:.25rem 0;text-align:center}.table .th .table__filter>*{width:100%}.table .th .InputFilter{padding-left:2px;padding-right:2px}.table .th .DropdownFilter .Dropdown{margin-right:.5rem}.table .td{padding:4px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;height:28px}.table .td:not(:last-child){border-right:1px solid #545453}.table .table__resizer{position:absolute;top:0;right:0;width:10px;height:100%;z-index:1;touch-action:none;border-right:4px solid rgba(0,0,0,0)}.table .table__resizer:hover{border-right:4px solid rgba(27,27,27,.3)}.table .table__resizer.isResizing{border-right:4px solid #15539e}.table.separator{min-height:2px;color:#545453}.table.dnd-active{box-shadow:none}.table>dndtarget.dnd-active{border-style:solid none;border-width:1px;border-color:#030c17}.table>dndtarget.dnd-active.after{border-top-style:none}.table>dndtarget.dnd-active.before{border-bottom-style:none}.table.expander{min-width:16px;min-height:16px;-gtk-icon-source:-gtk-icontheme("pan-end-symbolic");color:silver}.table.expander:dir(rtl){-gtk-icon-source:-gtk-icontheme("pan-end-symbolic-rtl")}.table.expander:hover{color:#fff}.table.expander.selected{color:#b9cbe2}.table.expander.selected:hover{color:#fff}.table.expander:checked{-gtk-icon-source:-gtk-icontheme("pan-down-symbolic")}.table.progressbar{background-color:#15539e;background-image:image(#15539e);box-shadow:none}.table.progressbar.selected:focus,.table.progressbar.selected{box-shadow:inset 0 1px rgba(255,255,255,.05);background-image:image(#2d2d2d)}.table.progressbar.selected:focus:backdrop,.table.progressbar.selected:backdrop{background-color:#303030}.table.trough{background-color:rgba(238,238,236,.1)}.table.trough.selected:focus,.table.trough.selected{background-color:#0f3b71}.table button.dnd:active,.table button.dnd.selected,.table button.dnd:hover,.table button.dnd,.table .table__header.button.dnd:active,.table .table__header.button.dnd.selected,.table .table__header.button.dnd:hover,.table .table__header.button.dnd{padding:0 6px;color:#2d2d2d;background-image:none;background-color:#15539e;border-style:none;border-radius:0;box-shadow:inset 0 0 0 1px #2d2d2d;text-shadow:none;transition:none}.table .th,.table .th.activatable:hover,.table .th.activatable:active{padding:0 4px;background-image:none;border-width:1px;border-style:none none solid solid;border-color:#545453;border-radius:0;text-shadow:none}.table .th:disabled,.table .th.activatable:disabled:hover,.table .th.activatable:disabled:active{border-color:#353535;background-image:none}.table .th:last-child,.table .th.activatable:last-child:hover,.table .th.activatable:last-child:active{border-right-style:none}columnview row:not(.selected) cell editablelabel:not(.editing):focus-within{outline:2px solid rgba(21,83,158,.7)}columnview row:not(.selected) cell editablelabel.editing:focus-within{outline:2px solid #15539e}columnview row:not(.selected) cell editablelabel.editing text selection{color:#fff;background-color:#15539e}.Popover{--arrow-size: 10px;position:absolute;z-index:2;background-color:rgba(0,0,0,0)}.Popover:not(.open){pointer-events:none}.Popover .Popover__wrapper{transition:all 80ms cubic-bezier(0.25, 0.46, 0.45, 0.94);opacity:0;transform:scale(0.95)}.Popover.open .Popover__wrapper{opacity:1;transform:scale(1)}.Popover .Popover__arrow{position:absolute;z-index:2;width:0;height:0;background-color:rgba(0,0,0,0)}.Popover .Popover__arrow::after,.Popover .Popover__arrow::before{content:" ";position:absolute;top:0;left:0;border:var(--arrow-size) solid rgba(0,0,0,0)}.Popover .Popover__arrow.top{top:calc(-1*var(--arrow-size) + 1px);margin-left:calc(-1*var(--arrow-size))}.Popover .Popover__arrow.top::before{top:-1px;border-top-width:0;border-bottom-color:rgba(27,27,27,.9)}.Popover .Popover__arrow.top::after{border-top-width:0;border-bottom-color:#2d2d2d}.Popover .Popover__arrow.bottom{bottom:2px;margin-left:calc(-1*var(--arrow-size))}.Popover .Popover__arrow.bottom::before{top:1px;border-bottom-width:0;border-top-color:rgba(27,27,27,.9)}.Popover .Popover__arrow.bottom::after{border-bottom-width:0;border-top-color:#2d2d2d}.Popover .Popover__arrow.left{left:calc(-1*var(--arrow-size) + 1px);margin-top:calc(-1*var(--arrow-size))}.Popover .Popover__arrow.left::before{left:-1px;border-left-width:0;border-right-color:rgba(27,27,27,.9)}.Popover .Popover__arrow.left::after{border-left-width:0;border-right-color:#2d2d2d}.Popover .Popover__arrow.right{right:2px;margin-top:calc(-1*var(--arrow-size))}.Popover .Popover__arrow.right::before{left:1px;border-right-width:0;border-left-color:rgba(27,27,27,.9)}.Popover .Popover__arrow.right::after{border-right-width:0;border-left-color:#2d2d2d}.Popover .Popover__container{padding:8px 0;background-color:#2d2d2d;background-clip:padding-box;border:1px solid rgba(27,27,27,.9);border-radius:9px;box-shadow:0 1px 3px 2px rgba(0,0,0,.08)}.Popover .Popover__container>.list,.Popover .Popover__container>.view,.Popover .Popover__container>.IconView,.Popover .Popover__container>.Toolbar{border-style:none;background-color:rgba(0,0,0,0)}.Popover.right .Popover__container,.Popover.left .Popover__container{padding:8px}.Popover{padding:0}.Popover.MenuBar__popover>.Popover__wrapper>.Popover__container{border-top-left-radius:0;border-top-right-radius:0;border-top:none}.Menu .separator{margin:6px 0}.Menu .Box.inline-buttons{padding:0 12px}.Menu .Box.inline-buttons .Button:not(:disabled):not(.disabled):not(.increase-specificity){border-radius:2px;transition:none}.Menu .Box.circular-buttons{padding:12px 12px 6px}.Menu .Box.circular-buttons .Button.circular{padding:7px;margin:0}.Menu .Box.circular-buttons .Button.circular:focus{background-color:#202020}.Menu .Box.circular-buttons .Button.circular:active{color:#eeeeec;border-color:#1b1b1b;background-color:#1e1e1e;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Menu .Box.circular-buttons .Button.circular:active::before{opacity:0}.Menu .Menu__item,.Menu .Menu__button{display:flex;flex-direction:row;align-items:center;border:none;user-select:none;min-height:30px;min-width:40px;width:100%;padding:0 12px;border-radius:0;text-align:left}.Menu .Menu__button.selected{color:#fff;background-color:#202020}.Menu .Menu__button.selected:active{background-color:#111}.Menu .Menu__button:focus{outline:none}.Menu .Menu__button__text{flex:1}.Menu .Menu__button__accelerator{color:rgba(255,255,255,.4);margin-left:12px}.Menu check,.Menu radio{transform:scale(0.8);border-width:1.2px;border-color:rgba(0,0,0,0);box-shadow:none;background-image:image(transparent);color:#fff}.Menu check:hover,.Menu radio:hover{transform:scale(0.8);border-width:1.2px;color:#fff;box-shadow:none;background-image:image(transparent)}.Menu check:active,.Menu radio:active{transform:scale(0.8);border-width:1.2px;color:#fff;box-shadow:none;background-image:image(transparent)}.Menu radio{border-color:#1b1b1b}.Menu radio:active{border-color:rgba(27,27,27,.5)}.Menu arrow.left,.Menu radio.left,.Menu check.left{margin-left:-2px;margin-right:6px}.Menu arrow.right,.Menu radio.right,.Menu check.right{margin-left:6px;margin-right:-2px}.Menu .title{padding:4px 12px;width:100%;text-align:left}.Menu.icons .Menu__item,.Menu.icons .Menu__button,.Menu.icons .title{position:relative;padding-left:32px}.Menu.icons .Menu__icon{position:absolute;height:100%;top:0;left:8px;opacity:.6}.Menu .Menu__iconAfter.submenu{opacity:.3}.Menu .Menu__back .Menu__icon{opacity:.3}.Menu .Menu__back .Menu__button__text{text-align:center;margin-left:-16px}.MenuBar{padding:0px;box-shadow:inset 0 -1px rgba(0,0,0,.1);background-color:#353535}.MenuBar>.MenuBar__button{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#fff;min-height:16px;padding:1px 8px;border-width:0;border-top:3px solid rgba(0,0,0,0);border-bottom:3px solid rgba(0,0,0,0);user-select:none}.MenuBar>.MenuBar__button::before{opacity:0}.MenuBar>.MenuBar__button:hover,.MenuBar>.MenuBar__button.hover,.MenuBar>.MenuBar__button:active,.MenuBar>.MenuBar__button.active{color:#15539e;border-bottom:3px solid #15539e}.MenuBar>.MenuBar__button.focus,.MenuBar>.MenuBar__button:focus{outline:none;background-color:#202020}.MenuBar>.MenuBar__button.selected{box-shadow:inset 0 -3px #15539e;color:#3584e4}.MenuBar>.MenuBar__button:disabled{color:#929291;box-shadow:none}.MenuBar>.MenuBar__button popover.menu>.Popover__container{padding:5px}.MenuBar>.MenuBar__button popover.menu popover.menu{padding:0 0 4px 0}.MenuBar>.MenuBar__button popover.menu popover.menu>.Popover__container{margin:0;border-radius:9px}.MenuBar__popover>.Popover__container{padding-top:0}.Notebook{display:flex;border:1px solid #1b1b1b}.Notebook.top{flex-direction:column}.Notebook.bottom{flex-direction:column-reverse}.Notebook.left{flex-direction:row}.Notebook.right{flex-direction:row-reverse}.Notebook .Notebook__header{flex:0;display:flex;border-color:#1b1b1b;border-width:1px;background-color:#282828}.Notebook .Notebook__header,.Notebook .Notebook__header>.Notebook__tabs{display:flex;align-items:center}.Notebook .Notebook__header.top{border-bottom-style:solid}.Notebook .Notebook__header.bottom{border-top-style:solid}.Notebook .Notebook__header.left{border-right-style:solid}.Notebook .Notebook__header.right{border-left-style:solid}.Notebook .Notebook__header.top,.Notebook .Notebook__header.bottom{flex-direction:row}.Notebook .Notebook__header.top>.Notebook__tabs,.Notebook .Notebook__header.bottom>.Notebook__tabs{flex-direction:row;padding-left:4px;padding-right:4px}.Notebook .Notebook__header.left,.Notebook .Notebook__header.right{flex-direction:column}.Notebook .Notebook__header.left>.Notebook__tabs,.Notebook .Notebook__header.right>.Notebook__tabs{flex-direction:column;padding-top:4px;padding-bottom:4px}.Notebook .Notebook__tabs>.Notebook__tab{transition:none;padding:3px 12px;min-height:30px;min-width:30px;display:flex;justify-content:center;align-items:center;white-space:nowrap;color:#eeeeec;font-weight:normal;cursor:default;user-select:none;border:0}.Notebook .Notebook__tabs>.Notebook__tab:focus{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Notebook .Notebook__tabs>.Notebook__tab:focus:focus:focus-visible{outline-color:rgba(21,83,158,.7);outline-width:2px;outline-offset:-2px}.Notebook .Notebook__tabs>.Notebook__tab:hover{color:#eeeeec;background-color:#353535}.Notebook .Notebook__tabs>.Notebook__tab.selected{color:#eeeeec;background-color:#353535}.Notebook .Notebook__tabs>.Notebook__tab.selected:hover{background-color:#3a3a3a}.Notebook.top .Notebook__tabs>.Notebook__tab:hover{box-shadow:inset 0 -3px #161616}.Notebook.top .Notebook__tabs>.Notebook__tab.selected{box-shadow:inset 0 -3px #15539e}.Notebook.bottom .Notebook__tabs>.Notebook__tab:hover{box-shadow:inset 0 3px #161616}.Notebook.bottom .Notebook__tabs>.Notebook__tab.selected{box-shadow:inset 0 3px #15539e}.Notebook.left .Notebook__tabs>.Notebook__tab:hover{box-shadow:inset -3px 0 #161616}.Notebook.left .Notebook__tabs>.Notebook__tab.selected{box-shadow:inset -3px 0 #15539e}.Notebook.right .Notebook__tabs>.Notebook__tab:hover{box-shadow:inset 3px 0 #161616}.Notebook.right .Notebook__tabs>.Notebook__tab.selected{box-shadow:inset 3px 0 #15539e}.Notebook.top .Notebook__tab:not(:last-of-type),.Notebook.bottom .Notebook__tab:not(:last-of-type){margin-right:6px}.Notebook.top .Notebook__tab.reorderable,.Notebook.bottom .Notebook__tab.reorderable{border-style:none solid}.Notebook.left .Notebook__tab,.Notebook.right .Notebook__tab{width:100%;justify-content:start}.Notebook.left .Notebook__tab:not(:last-of-type),.Notebook.right .Notebook__tab:not(:last-of-type){margin-bottom:6px}.Notebook.left .Notebook__tab.reorderable,.Notebook.right .Notebook__tab.reorderable{border-style:solid none}.Notebook.left .Notebook__tab>.Label,.Notebook.right .Notebook__tab>.Label{flex:1}.Notebook .Notebook__tab button{padding:0;margin:0;margin-left:6px;margin-right:-6px;margin-bottom:-2px;width:16px;height:16px;min-width:16px;min-height:16px;--icon-size: 16px;opacity:.3;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94) !important;color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Notebook .Notebook__tab button::before{opacity:0}.Notebook .Notebook__tab button:hover{color:#eeeeec;border-color:#282828;border-bottom-color:#0f0f0f;background-color:#3a3a3a;box-shadow:inset 0 1px #424242,0 1px 2px rgba(0,0,0,.07);opacity:1;border-color:#0f0f0f}.Notebook .Notebook__tab button:hover::before{opacity:0}.Notebook .Notebook__arrow{min-height:30px;min-width:30px;border-radius:0}.Notebook .Notebook__arrow:not(:disabled):not(.disabled):hover:not(:active){background-color:rgba(255,255,255,.5);border-color:rgba(0,0,0,0);box-shadow:none}.Notebook .Notebook__arrow:not(:disabled):not(.disabled):active{background-color:#141414}.Notebook .Notebook__arrow:disabled{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Notebook .Notebook__arrow:disabled::before{opacity:0}.Notebook.left .Notebook__arrow,.Notebook.right .Notebook__arrow{width:100%}.Notebook.bottom .Notebook__arrow,.Notebook.top .Notebook__arrow{padding-left:4px;padding-right:4px}.Notebook.top .Notebook__arrow{border-top-style:none}.Notebook.bottom .Notebook__arrow{border-bottom-style:none}.Notebook.right .Notebook__arrow,.Notebook.left .Notebook__arrow{padding-top:4px;padding-bottom:4px}.Notebook.left .Notebook__arrow{border-left-style:none}.Notebook.right .Notebook__arrow{border-right-style:none}.Notebook .Notebook__action button{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Notebook .Notebook__action button::before{opacity:0}.Notebook .Notebook__content{flex:1;background-color:#2d2d2d}.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page{overflow:auto}@media screen and (-webkit-min-device-pixel-ratio: 0){.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page{overflow:overlay}.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page::-webkit-scrollbar{width:8px;height:8px;z-index:1000}.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page::-webkit-scrollbar-thumb{background-clip:padding-box;border-radius:16px;border:2px solid rgba(0,0,0,0);background-color:rgba(0,0,0,.2);-webkit-transition:background-color .5s ease;transition:background-color .5s ease}.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.3)}.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page::-webkit-scrollbar-thumb:active{background-color:rgba(0,0,0,.4)}}.PageSwitcher{position:relative;width:100%;height:100%;overflow:hidden}.PageSwitcher .PageSwitcher__page{position:absolute;top:0;left:0;width:100%;height:100%;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.PageSwitcher .PageSwitcher__page.padded{padding:8px}.PageSwitcher .PageSwitcher__page.active{opacity:1;transform:translate3d(0, 0, 0)}.PageSwitcher.horizontal .PageSwitcher__page:not(.active):first-child{transform:translate3d(-100%, 0, 0)}.PageSwitcher.horizontal .PageSwitcher__page:not(.active):last-child{transform:translate3d(100%, 0, 0)}.PageSwitcher.vertical .PageSwitcher__page:not(.active):first-child{transform:translate3d(0, -100%, 0)}.PageSwitcher.vertical .PageSwitcher__page:not(.active):last-child{transform:translate3d(0, 100%, 0)}.PageSwitcher.opacity .PageSwitcher__page:not(.active):first-child{opacity:0}.PageSwitcher.opacity .PageSwitcher__page:not(.active):last-child{opacity:0}.PageSwitcher.expand{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.PageSwitcher.expand .PageSwitcher__page{width:max-content;height:max-content}.PageSwitcher.expand.use-both .PageSwitcher__page:not(.main),.PageSwitcher.expand.use-width .PageSwitcher__page:not(.main){width:100%}.PageSwitcher.expand.use-both .PageSwitcher__page:not(.main),.PageSwitcher.expand.use-height .PageSwitcher__page:not(.main){height:100%}.Expander .Expander__button{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);border-radius:5px;display:flex;justify-content:center;align-items:center;padding:0;margin:0;border:none}.Expander .Expander__button::before{opacity:0}.Expander .Expander__button{position:relative;outline:none;overflow:visible}.Expander .Expander__button::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.Expander .Expander__button:focus:focus-visible{outline:none}.Expander .Expander__button:focus:focus-visible::after{border:2px solid rgba(21,83,158,.7);top:-2px;left:-2px;width:100%;height:100%}.Expander .Expander__button .Icon.arrow{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Expander.open .Expander__button .Icon.arrow-after{transform:rotate(-90deg)}.Expander.open .Expander__button .Icon.arrow-before{transform:rotate(90deg)}.Expander .Expander__container{position:relative;overflow:hidden;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Expander .Expander__content{position:absolute;top:0;left:0}.Expander.vertical .Expander__content{width:100%;height:auto}.Expander.vertical:not(.open) .Expander__container{height:0}.Expander.horizontal .Expander__content{height:100%;width:auto}.Expander.horizontal:not(.open) .Expander__container{width:0}.Expander.fit-content.vertical .Expander__content{width:max-content}.Expander.fit-content.horizontal .Expander__content{height:max-content}.Paned{position:relative;overflow:hidden;border:1px solid #1b1b1b}.Paned.border-handle{border:none}.Paned.border-none{border:none}.Paned.border-none .Paned__handle::before{background-color:rgba(0,0,0,0)}.Paned .Paned__wrapper{width:100%;height:100%}.Paned .Paned__pane{flex:0 0 auto;overflow:hidden}.Paned .Paned__handle{flex:0 0 1px;position:absolute !important;touch-action:none}.Paned .Paned__handle{position:relative;outline:none;overflow:visible}.Paned .Paned__handle::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.Paned .Paned__handle:focus:focus-visible{outline:none}.Paned .Paned__handle:focus:focus-visible::after{border:2px solid rgba(21,83,158,.7);top:-2px;left:-2px;width:100%;height:100%}.Paned .Paned__wrapper.horizontal{display:flex;flex-direction:row}.Paned .Paned__wrapper.horizontal>.Paned__pane{width:50%}.Paned .Paned__wrapper.horizontal>.Paned__pane:first-child{border-right:1px solid #1b1b1b}.Paned .Paned__wrapper.horizontal>.Paned__handle{top:0;left:50%;height:100%;cursor:ew-resize;padding:0 5px;transform:translateX(-50%)}.Paned .Paned__wrapper.vertical{display:flex;flex-direction:column}.Paned .Paned__wrapper.vertical>.Paned__pane{height:50%}.Paned .Paned__wrapper.vertical>.Paned__pane:first-child{border-bottom:1px solid #1b1b1b}.Paned .Paned__wrapper.vertical>.Paned__handle{top:50%;left:0;width:100%;cursor:ns-resize;padding:5px 0;transform:translateY(-50%)}.Autocomplete__popover .Popover__wrapper{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);opacity:0;transform:none}.Autocomplete__popover .Popover__container{padding:4px 0 !important;overflow:hidden}.Autocomplete__popover .List__item{padding-left:8px;padding-right:8px}.Autocomplete__popover .List__item>*{white-space:nowrap}.Switch{--switch-size: 20px;display:flex;flex-direction:row;align-items:center;font-weight:bold;height:28px}.Switch.mini{height:18px;min-height:18px;font-size:0px;--switch-size: 13px}.Switch.small{height:22px;min-height:22px;font-size:8px;--switch-size: 16px}.Switch.medium{height:28px;min-height:28px;font-size:10px;--switch-size: 20px}.Switch.large{height:36px;min-height:36px;font-size:13px;--switch-size: 26px}.Switch.huge{height:42px;min-height:42px;font-size:16px;--switch-size: 30px}.Switch.mega{height:58px;min-height:58px;font-size:20px;--switch-size: 41px}.Switch input{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.Switch label{position:relative;display:inline-block;width:calc(2*var(--switch-size));height:calc(1*var(--switch-size));border:1px solid #1b1b1b;border-radius:20px;color:rgba(238,238,236,.2);background-color:#282828;text-shadow:0 1px rgba(0,0,0,.1);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Switch input+label{position:relative;outline:none;overflow:visible}.Switch input+label::before{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-2px;left:-2px;width:calc(100% - 0px);height:calc(100% - 0px)}.Switch input:focus:focus-visible+label{outline:none}.Switch input:focus:focus-visible+label::before{border:2px solid rgba(21,83,158,.7);top:-2px;left:-2px;width:100%;height:100%}.Switch input:checked+label{color:#fff;border-color:#030c17;background-color:#15539e;text-shadow:0 1px rgba(21,83,158,.5),0 0 2px rgba(255,255,255,.6)}.Switch input:disabled+label{color:#929291;border-color:#1b1b1b;background-color:#343434;text-shadow:none}.Switch label::after{content:"";position:absolute;display:inline-block;top:0px;left:0px;margin:-1px -1px;width:calc(var(--switch-size) - 2px);height:calc(var(--switch-size) - 2px);border:1px solid;border-color:#1b1b1b;border-radius:50%;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);color:#eeeeec;outline-color:rgba(21,83,158,.7);border-color:#1b1b1b;border-bottom-color:#070707;background-color:#353535;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px rgba(0,0,0,.1),0 1px 2px rgba(0,0,0,.07)}.Switch label::after::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Switch label:hover::after{color:#eeeeec;border-color:#2b2b2b;border-bottom-color:#111;background-color:#3c3c3c;box-shadow:inset 0 1px #444,0 1px rgba(0,0,0,.1),0 1px 2px rgba(0,0,0,.07);border-color:#1b1b1b}.Switch label:hover::after::before{opacity:0}.Switch input:checked+label::after{border:1px solid #030c17;transform:translateX(100%)}.Switch input:disabled+label::after{color:#929291;border-color:#202020;background-color:#343434;text-shadow:none;--icon-shadow: none;--icon-color: #929291;box-shadow:inset 0 1px rgba(255,255,255,0)}.Switch input:disabled+label::after::before{opacity:0}.Switch label>span{font-size:inherit;user-select:none;position:absolute;top:50%;transform:translateY(-50%)}.Switch label>span:first-child{left:3px}.Switch label>span:last-child{right:3px}row.selected .Switch{outline-color:rgba(255,255,255,.3)}.Checkbox,.Radio{--element-size: 20px;--element-padding-size: calc(var(--element-size) * 0.19);--element-inner-size: calc(var(--element-size) - 2 * var(--element-padding-size));font-size:14px;display:flex;flex-direction:row;align-items:center;height:28px}.Checkbox.mini,.Radio.mini{height:18px;min-height:18px;font-size:11px;--icon-size: 12px;--element-size: 14.4px}.Checkbox.mini>label>.label__text,.Radio.mini>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox.small,.Radio.small{height:22px;min-height:22px;font-size:12px;--icon-size: 13px;--element-size: 17.6px}.Checkbox.small>label>.label__text,.Radio.small>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox.medium,.Radio.medium{height:28px;min-height:28px;font-size:14px;--icon-size: 16px;--element-size: 22.4px}.Checkbox.medium>label>.label__text,.Radio.medium>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox.large,.Radio.large{height:36px;min-height:36px;font-size:18px;--icon-size: 20px;--element-size: 28.8px}.Checkbox.large>label>.label__text,.Radio.large>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox.huge,.Radio.huge{height:42px;min-height:42px;font-size:20px;--icon-size: 23px;--element-size: 33.6px}.Checkbox.huge>label>.label__text,.Radio.huge>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox.mega,.Radio.mega{height:58px;min-height:58px;font-size:28px;--icon-size: 32px;--element-size: 46.4px}.Checkbox.mega>label>.label__text,.Radio.mega>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox input,.Radio input{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.Checkbox label,.Radio label{position:relative;display:inline-block;height:calc(1*var(--element-size));padding-left:var(--element-size);padding-right:2px;color:#eeeeec;border-radius:5px;text-shadow:0 1px rgba(0,0,0,.1);user-select:none;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Checkbox input+label,.Radio input+label{position:relative;outline:none;overflow:visible}.Checkbox input+label::before,.Radio input+label::before{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-2px;left:-2px;width:calc(100% - 0px);height:calc(100% - 0px)}.Checkbox input:focus:focus-visible+label,.Radio input:focus:focus-visible+label{outline:none}.Checkbox input:focus:focus-visible+label::before,.Radio input:focus:focus-visible+label::before{border:2px solid rgba(21,83,158,.7);top:-2px;left:-2px;width:100%;height:100%}.Checkbox label>.element,.Radio label>.element{content:"";position:absolute;display:inline-block;color:#fff;border-color:#1b1b1b;background-color:#2d2d2d;border:1px solid #0c0c0c;box-shadow:0 1px rgba(0,0,0,.075);transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:calc(var(--element-padding-size));left:calc(var(--element-padding-size));width:var(--element-inner-size);height:var(--element-inner-size)}.Checkbox label>.element::before,.Checkbox label>.element::after,.Radio label>.element::before,.Radio label>.element::after{content:"";position:absolute;display:inline-block;top:0;left:0;width:100%;height:100%}.Checkbox label:hover>.element,.Radio label:hover>.element{background-color:#262626}.Checkbox input:not(:disabled)+label:active>.element,.Radio input:not(:disabled)+label:active>.element{background-color:#222;box-shadow:inset 0 1px #111}.Checkbox input:checked+label>.element,.Checkbox input:checked:disabled+label>.element,.Radio input:checked+label>.element,.Radio input:checked:disabled+label>.element{color:#fff;border-color:#0c2f5a;background-color:#1961b9;background-image:linear-gradient(to top, #1655a2, #1961b9)}.Checkbox input:checked:not(:disabled)+label:hover>.element,.Radio input:checked:not(:disabled)+label:hover>.element{background-image:linear-gradient(to top, #1961b9, #1c6fd4)}.Checkbox input:checked:not(:disabled)+label:active>.element,.Radio input:checked:not(:disabled)+label:active>.element{background-image:linear-gradient(to top, #13498c, #155099);box-shadow:inset 0 1px #10407a}.Checkbox input:disabled+label,.Radio input:disabled+label{color:#929291;text-shadow:none}.Checkbox input:disabled+label>.element,.Radio input:disabled+label>.element{color:#929291;border-color:#1b1b1b;background-color:#343434;box-shadow:none;border-color:#202020;background-color:#343434;background-image:none}row.selected .Checkbox,row.selected .Radio{outline-color:rgba(255,255,255,.3)}.Checkbox.mini{--element-stroke-width: 2px}.Checkbox.small{--element-stroke-width: 2px}.Checkbox.medium{--element-stroke-width: 3px}.Checkbox.large{--element-stroke-width: 4px}.Checkbox.huge{--element-stroke-width: 5px}.Checkbox.mega{--element-stroke-width: 6px}.Checkbox label .element{border-radius:3px}.Checkbox label .element::before{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);transition-property:transform;transform:translate(3px, 0px) rotate(45deg) scale(0)}.Checkbox input:checked+label .element::before{border:var(--element-stroke-width) solid #fff;border-top-width:0;border-left-width:0;width:calc(var(--element-inner-size)/6);height:calc(var(--element-inner-size)/2.5);transform:translate(3px, 0px) rotate(45deg)}.Checkbox input:checked:disabled+label .element::before{border-color:rgba(255,255,255,.5)}.Checkbox.mini input:checked+label .element::before{transform:translate(2.5714285714px, 0px) rotate(45deg)}.Checkbox.small input:checked+label .element::before{transform:translate(3.1428571429px, 0px) rotate(45deg)}.Checkbox.medium input:checked+label .element::before{transform:translate(4px, 0px) rotate(45deg)}.Checkbox.large input:checked+label .element::before{transform:translate(5.1428571429px, 0px) rotate(45deg)}.Checkbox.huge input:checked+label .element::before{transform:translate(6px, 0px) rotate(45deg)}.Checkbox.mega input:checked+label .element::before{transform:translate(8.2857142857px, 0px) rotate(45deg)}.Radio label .element{border-radius:50%}.Radio label .element::before{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);transition-property:transform;transform:translate(-50%, -50%) scale(0)}.Radio input:checked+label .element::before{background-color:#fff;border-radius:50%;width:calc(var(--element-inner-size)/1.9);height:calc(var(--element-inner-size)/1.9);top:50%;left:50%;transform:translate(-50%, -50%);box-shadow:inset 0 1px 0 0px #e6e6e6}.Radio input:checked:disabled+label .element::before{background-color:rgba(255,255,255,.5);box-shadow:none}.Range{cursor:pointer;position:relative;display:inline-flex;justify-content:center;align-items:center;border-radius:16px;padding:var(--range-padding);width:100%;height:var(--range-size)}.Range{position:relative;outline:none;overflow:visible}.Range::before{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.Range.focus{outline:none}.Range.focus::before{border:2px solid rgba(21,83,158,.7);top:-2px;left:-2px;width:100%;height:100%}body{--range-track-width: 4px;--range-size: 28px;--range-padding: calc(var(--range-size) / 2 - var(--range-track-width));--range-thumb-size: 16px}.Range.mini{--range-track-width: 4px;--range-size: 18px;--range-thumb-size: 12px;border-radius:10px}.Range.small{--range-track-width: 4px;--range-size: 22px;--range-thumb-size: 12px;border-radius:13px}.Range.medium{--range-track-width: 4px;--range-size: 28px;--range-thumb-size: 16px;border-radius:16px}.Range.large{--range-track-width: 6px;--range-size: 36px;--range-thumb-size: 18px;border-radius:21px}.Range.huge{--range-track-width: 8px;--range-size: 42px;--range-thumb-size: 20px;border-radius:24px}.Range.mega{--range-track-width: 10px;--range-size: 58px;--range-thumb-size: 28px;border-radius:33px}.Range.vertical{width:var(--range-size);height:100%}.Range.marked{margin-bottom:20px}.Range.marked.vertical{margin-bottom:auto;margin-right:20px}.Range.disabled{pointer-events:none;cursor:default}.LevelBar .LevelBar__content,.Progress .Progress__content,.Range__content{position:relative;display:inline-block;width:100%;height:var(--range-track-width)}.LevelBar.vertical .LevelBar__content,.Progress.vertical .Progress__content,.Range.vertical .Range__content{width:var(--range-track-width);height:100%}.LevelBar .LevelBar__rail,.Progress .Progress__rail,.Range__rail{display:block;position:absolute;top:0;left:0;width:100%;height:var(--range-track-width);border-radius:var(--range-track-width);border:1px solid #020202;background-color:#282828}.LevelBar.vertical .LevelBar__rail,.Progress.vertical .Progress__rail,.Range.vertical .Range__rail{height:100%;width:var(--range-track-width)}.LevelBar.disabled .LevelBar__rail,.Progress.disabled .Progress__rail,.Range.disabled .Range__rail{color:#929291;border-color:#202020;background-color:#343434;text-shadow:none;--icon-shadow: none;--icon-color: #929291;box-shadow:inset 0 1px rgba(255,255,255,0)}.LevelBar.disabled .LevelBar__rail::before,.Progress.disabled .Progress__rail::before,.Range.disabled .Range__rail::before{opacity:0}.Progress .Progress__track,.Range__track{display:block;position:absolute;content:"";height:var(--range-track-width);border-radius:var(--range-track-width);border:1px solid #0c2f5a;background-color:#15539e;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Progress.vertical .Progress__track,.Range.vertical .Range__track{width:var(--range-track-width)}.Range.no-track .Range__track{display:none}.Range.disabled .Range__track{display:none}.Range .Range__thumb{position:absolute;display:flex;align-items:center;justify-content:center;width:var(--range-thumb-size);height:var(--range-thumb-size);margin-left:calc(var(--range-thumb-size)/-2);margin-top:calc(var(--range-thumb-size)/-2.5);color:#eeeeec;outline-color:rgba(21,83,158,.7);border-color:#1b1b1b;border-bottom-color:#070707;background-color:#353535;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07);border:1px solid #000;border-radius:50%;outline:0;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Range .Range__thumb::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Range .Range__thumb:hover{color:#eeeeec;border-color:#1b1b1b;border-bottom-color:#070707;background-color:#2d2d2d;box-shadow:inset 0 1px #353535,0 1px 2px rgba(0,0,0,.07);border:1px solid #000}.Range .Range__thumb:hover::before{opacity:0}.Range .Range__thumb:active{border-color:#06182d}.Range.disabled .Range__thumb{color:#929291;border-color:#202020;background-color:#343434;text-shadow:none;--icon-shadow: none;--icon-color: #929291;box-shadow:inset 0 1px rgba(255,255,255,0);border:1px solid #070707}.Range.disabled .Range__thumb::before{opacity:0}.Range.disabled .Range__thumb:hover{box-shadow:none}.Range.vertical .Range__thumb{margin-top:0;margin-bottom:-6px;margin-left:-6px}.Range .Range__mark{position:absolute;border-radius:1px;background-color:#141414}.Range .Range__mark.active{background-color:#15539e}.Range:not(.vertical) .Range__mark{top:8px;width:1px;height:4px}.Range.vertical .Range__mark{left:8px;width:4px;height:1px}.Range.disabled .Range__mark.active{background-color:#141414;box-shadow:none}.Range.fine-tune.horizontal{padding-top:9px;padding-bottom:9px;min-height:16px}.Range.fine-tune.vertical{padding-left:9px;padding-right:9px;min-width:16px}.Range.fine-tune>trough>slider{margin:-6px}.Range.fine-tune>trough>fill,.Range.fine-tune>trough>highlight,.Range.fine-tune>trough{border-radius:5px}.Progress{position:relative;display:inline-flex;padding:12px;height:28px;width:100%}.Progress.vertical{width:28px;height:100%}.Progress.indeterminate:not(.vertical) .Progress__track{width:25%;animation:progress_horizontal 2.5s infinite}.Progress.indeterminate.vertical .Progress__track{height:25%;animation:progress_vertical 2.5s infinite}.Progress.labeled{padding-top:24px}.Progress .Progress__label{position:absolute;top:3px;left:50%;transform:translateX(-50%);color:rgba(146,146,145,.7);white-space:nowrap;user-select:none}@keyframes progress_horizontal{0%{left:0%}50%{left:75%}100%{left:0%}}@keyframes progress_vertical{0%{top:0%}50%{top:75%}100%{top:0%}}.LevelBar{position:relative;display:inline-flex;padding:12px;height:28px;width:100%}.LevelBar.vertical{width:28px;height:100%}.LevelBar .LevelBar__content{display:flex;flex-direction:row}.LevelBar.vertical .LevelBar__content{flex-direction:column}.LevelBar .LevelBar__rail{position:initial;border-radius:0}.LevelBar .LevelBar__rail:first-child{border-top-left-radius:1px;border-bottom-left-radius:1px}.LevelBar .LevelBar__rail:last-child{border-top-right-radius:1px;border-bottom-right-radius:1px}.LevelBar .LevelBar__rail:not(:last-child){margin-right:2px}.LevelBar .LevelBar__rail.danger{background-color:#e61a1a;border-color:#8a0f0f}.LevelBar .LevelBar__rail.warning{background-color:#e3a05f;border-color:#bb6d21}.LevelBar .LevelBar__rail.info{background-color:#15539e;border-color:#092444}.LevelBar .LevelBar__rail.success{background-color:#43a870;border-color:#265f3f}.Frame{border:1px solid #1b1b1b}.Frame.inline{display:inline-block;width:min-content}.Frame.padded{padding:1rem}.Frame.scrollable{overflow:auto}.Frame.no-border{border:none}listview,list,.List{display:inline-block;color:#fff;background-color:#2d2d2d;margin:0;padding:0;overflow:auto}@media screen and (-webkit-min-device-pixel-ratio: 0){listview,list,.List{overflow:overlay}listview::-webkit-scrollbar,list::-webkit-scrollbar,.List::-webkit-scrollbar{width:8px;height:8px;z-index:1000}listview::-webkit-scrollbar-thumb,list::-webkit-scrollbar-thumb,.List::-webkit-scrollbar-thumb{background-clip:padding-box;border-radius:16px;border:2px solid rgba(0,0,0,0);background-color:rgba(0,0,0,.2);-webkit-transition:background-color .5s ease;transition:background-color .5s ease}listview::-webkit-scrollbar-thumb:hover,list::-webkit-scrollbar-thumb:hover,.List::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.3)}listview::-webkit-scrollbar-thumb:active,list::-webkit-scrollbar-thumb:active,.List::-webkit-scrollbar-thumb:active{background-color:rgba(0,0,0,.4)}}.window-inactive listview,.window-inactive list,.window-inactive .List{color:#d6d6d6;background-color:#303030;border-color:#202020}listview.horizontal .List__item.separator,listview.separators.horizontal>.List__item:not(.separator):not(:last-child),list.horizontal .List__item.separator,list.separators.horizontal>.List__item:not(.separator):not(:last-child),.List.horizontal .List__item.separator,.List.separators.horizontal>.List__item:not(.separator):not(:last-child){border-left:1px solid #545453}listview:not(.horizontal) .List__item.separator,listview.separators:not(.horizontal)>.List__item:not(.separator):not(:last-child),list:not(.horizontal) .List__item.separator,list.separators:not(.horizontal)>.List__item:not(.separator):not(:last-child),.List:not(.horizontal) .List__item.separator,.List.separators:not(.horizontal)>.List__item:not(.separator):not(:last-child){border-bottom:1px solid #545453}listview.border,list.border,.List.border{border:1px solid #1b1b1b}listview.border-top,list.border-top,.List.border-top{border-top:1px solid #1b1b1b}listview.border-bottom,list.border-bottom,.List.border-bottom{border-bottom:1px solid #1b1b1b}listview.border-left,list.border-left,.List.border-left{border-left:1px solid #1b1b1b}listview.border-right,list.border-right,.List.border-right{border-right:1px solid #1b1b1b}listview.border-none,list.border-none,.List.border-none{border:none}listview.rounded,list.rounded,.List.rounded{border-radius:12px}.List__item{display:flex;flex-direction:row;padding:2px}.List__item,.List__item:hover{text-decoration:none;color:#eeeeec}.List__item.activatable{user-select:none;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.List__item.activatable{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.List__item.activatable:focus:focus-visible{outline-color:rgba(21,83,158,.7);outline-width:2px;outline-offset:-2px}.List__item.activatable:hover{background-color:rgba(238,238,236,.05)}.List__item.activatable:active{box-shadow:inset 0 2px 2px -2px rgba(0,0,0,.2)}.List__item.activatable.selected{text-shadow:0 1px rgba(21,83,158,.5),0 0 2px rgba(255,255,255,.6)}.List__item.activatable.selected:active{box-shadow:inset 0 2px 3px -1px rgba(0,0,0,.5)}.List__item.activatable.selected:hover{background-color:#2b63a6}.List__item.selected{outline-color:rgba(255,255,255,.3)}button.List__item{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;border:none;width:100%;text-align:left}button.List__item::before{opacity:0}.List.rich>.List__item{padding:8px 12px;min-height:32px;align-items:center}.List.rich>.List__item>.Label{flex:1;line-height:28px}.List.rich>.List__item>.Box{border-spacing:12px;align-items:center}.List.rich>.List__item>.Box>.Label:first-child{flex:1;white-space:nowrap}.List.rich>.List__item .Button{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;border:1px solid #303030}.List.rich>.List__item .Button::before{opacity:0}.List.rich>.List__item .Button.hover,.List.rich>.List__item .Button:hover{color:#eeeeec;border-color:#1b1b1b;border-bottom-color:#070707;background-color:#2d2d2d;box-shadow:inset 0 1px #353535,0 1px 2px rgba(0,0,0,.07)}.List.rich>.List__item .Button.hover::before,.List.rich>.List__item .Button:hover::before{opacity:0}.List.rich>.List__item .Button.active,.List.rich>.List__item .Button:active{color:#eeeeec;border-color:#1b1b1b;background-color:#1e1e1e;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.List.rich>.List__item .Button.active::before,.List.rich>.List__item .Button:active::before{opacity:0}.List.sublist{width:100%;background-color:#2d2d2d;border-bottom:1px solid #1b1b1b;box-shadow:inset 0 1px rgba(0,0,0,.07)}.List__item.expandable.expanded:not(:hover){background-color:rgba(0,0,0,.02)}.List__item.expandable .Icon.arrow{opacity:.3;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);transform:rotate(0)}.List__item.expandable.expanded .Icon.arrow{color:#15539e;--icon-color: #15539e;opacity:1;transform:rotate(90deg)}.stack-sidebar{background-color:#313131}.stack-sidebar.separators:not(.horizontal)>.List__item:not(.separator):not(.increase-specificity){border-bottom:none}.stack-sidebar.separators:not(.horizontal)>.List__item:not(.separator):not(.increase-specificity):not(:first-child){border-top:1px solid #1b1b1b}.stack-sidebar .List__item{padding:10px 4px}.stack-sidebar .List__item>.Label{padding-left:6px;padding-right:6px}.stack-sidebar .List__item.needs-attention>.Label{background-size:6px 6px,0 0}.stack-sidebar .List__item.activatable:active,.stack-sidebar .List__item.activatable.selected:active{box-shadow:none}.navigation-sidebar:not(.increase-specificity){padding:5px 0;background-color:#313131;border-color:#303030 !important}.navigation-sidebar:not(.increase-specificity)>.separator{padding:0;margin:0;height:10px;border:none;border-bottom:1px solid #303030 !important}.navigation-sidebar:not(.increase-specificity)>.List__item{padding:5px}.navigation-sidebar:not(.increase-specificity).medium>.List__item{min-height:26px}.navigation-sidebar:not(.increase-specificity).large>.List__item{min-height:36px}.navigation-sidebar:not(.increase-specificity)>.List__item.activatable{align-items:center;color:#eeeeec;border-color:#303030 !important}.navigation-sidebar:not(.increase-specificity)>.List__item.activatable.selected:not(.increase-specificity){color:inherit;background-color:#1e1e1e;text-shadow:none}.navigation-sidebar:not(.increase-specificity)>.List__item.title{opacity:.9;font-weight:700;padding:8px 5px}.app-notification{padding:10px;border-spacing:10px;border-radius:0 0 5px 5px;background-color:rgba(38,38,38,.7);background-image:linear-gradient(to bottom, rgba(0, 0, 0, 0.2), transparent 2px);background-clip:padding-box}.app-notification border{border:none}.Calendar{display:inline-flex !important;color:#fff;border:1px solid #1b1b1b;width:226px}.Calendar>.Calendar__header{padding:2px}.Calendar>.Calendar__header>.Button{border:none;box-shadow:none;background:none;border-radius:5px}.Calendar>.Calendar__header>.Button:backdrop{background:none}.Calendar>.Calendar__header>.Calendar__previous,.Calendar>.Calendar__header>.Calendar__next{border-radius:5px}.Calendar.mode-month .Calendar__previous,.Calendar.mode-month .Calendar__next,.Calendar.mode-year .Calendar__previous,.Calendar.mode-year .Calendar__next{opacity:0}.Calendar>.Calendar__header>.Calendar__monthLabel,.Calendar>.Calendar__header>.Calendar__yearLabel{display:flex;align-items:center}.Calendar>.Calendar__header>.Calendar__monthLabel{flex:3;justify-content:center}.Calendar>.Calendar__header>.Calendar__yearLabel{flex:2;justify-content:flex-start}.Calendar .Calendar__grid{border:none;height:222px}.Calendar .Calendar__grid>*{width:100%;height:100%}.Calendar .Calendar__weekDays{font-size:9px;font-weight:700;opacity:.4}.Calendar .Calendar__weekDays>.Calendar__day{padding-top:.75rem;padding-bottom:.75rem}.Calendar .Calendar__day:not(.increase-specificity){width:100%;text-align:center}.Calendar .Calendar__day:not(.increase-specificity).day-0,.Calendar .Calendar__day:not(.increase-specificity).day-6{color:#dbdbd6}.Calendar .Calendar__day:not(.increase-specificity).other-month{color:rgba(219,219,214,.5)}.Calendar .Calendar__day:not(.increase-specificity)>.Button{display:inline-block;border:none;font-weight:inherit;font-size:12px;width:28px;height:28px;min-width:28px;min-height:28px}.Calendar .Calendar__day:not(.increase-specificity).today>.Button{font-weight:600;box-shadow:none}.Calendar .Calendar__day:not(.increase-specificity).selected>.Button{box-shadow:inset 0px 1px #1b1b1b;background-color:#020202}.Calendar .Calendar__day:not(.increase-specificity).today.selected>.Button{background-color:#0f3b71}.Calendar .Calendar__grid .Calendar__month{width:33%}.Calendar .Calendar__grid .Calendar__month .Button{width:100%;height:100%;padding:0;padding-top:10px;padding-bottom:10px;font-size:12px}.YearPicker .YearPicker__year .Button{width:100%;padding:0;padding-top:0px;padding-bottom:0px;height:unset;font-size:12px}.YearPicker .YearPicker__input{padding:0 .25rem}.YearPicker .YearPicker__input input[type=number]{text-align:center}.DatePicker__input .Icon{opacity:.5}.DatePicker__popover .Popover__container{padding:0}.DatePicker__popover .Calendar{border:none}.Window.dialog.message .titlebar{min-height:20px;background-image:none;background-color:#353535;border-style:none;border-top-left-radius:7px;border-top-right-radius:7px}.Window.dialog.message box.dialog-vbox.vertical{border-spacing:10px}.Window.dialog.message .Label.title{font-weight:800;font-size:15pt}.Window.dialog.message.csd.background{border-bottom-left-radius:9px;border-bottom-right-radius:9px}.Window.dialog.message.csd .dialog-action-area button{padding:10px 14px;border-radius:0;border-left-style:solid;border-right-style:none;border-bottom-style:none}.Window.dialog.message.csd .dialog-action-area button:first-child{border-left-style:none;border-bottom-left-radius:7px}.Window.dialog.message.csd .dialog-action-area button:last-child{border-bottom-right-radius:7px}.Window.assistant .sidebar{padding:5px;border-top:1px solid #1b1b1b}.Window.assistant.csd .sidebar{border-top-style:none}.Window.assistant .sidebar>.Label{padding:6px 12px}.Window.assistant .sidebar>.Label.highlight{background-color:#202020;border-radius:5px}filechooser .dialog-action-box{border-top:1px solid #1b1b1b}filechooser #pathbarbox{border-bottom:1px solid #353535}filechooserbutton>button>box{border-spacing:6px}filechooserbutton.dnd-active{box-shadow:none;border-color:rgba(0,0,0,0)}.DropZone{color:#1b1b1b;border-color:#1b1b1b}row image.sidebar-icon{opacity:.7}placessidebar .navigation-sidebar>row{padding:0}placessidebar .navigation-sidebar>row>revealer{padding:0 14px}placessidebar .navigation-sidebar>row image.sidebar-icon:dir(ltr){padding-right:8px}placessidebar .navigation-sidebar>row image.sidebar-icon:dir(rtl){padding-left:8px}placessidebar .navigation-sidebar>row .Label.sidebar-label:dir(ltr){padding-right:2px}placessidebar .navigation-sidebar>row .Label.sidebar-label:dir(rtl){padding-left:2px}button.sidebar-button{min-height:26px;min-width:26px;margin-top:3px;margin-bottom:3px;padding:0;border-radius:100%}placessidebar .navigation-sidebar>row.selected:active{box-shadow:none}placessidebar .navigation-sidebar>row.sidebar-placeholder-row{padding:0 8px;min-height:2px;background-image:image(#26a269);background-clip:content-box}placessidebar .navigation-sidebar>row.sidebar-new-bookmark-row{color:#15539e}placessidebar .navigation-sidebar>row.dnd-active:not(:disabled){color:#26a269;box-shadow:inset 0 1px #26a269,inset 0 -1px #26a269}placessidebar .navigation-sidebar>row.dnd-active:not(:disabled).selected{color:#fff;background-color:#26a269}placesview .server-list-button>image{transition:200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);-gtk-icon-transform:rotate(0turn)}placesview .server-list-button:checked>image{transition:200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);-gtk-icon-transform:rotate(-0.5turn)}placesview>actionbar>revealer>box>box{border-spacing:6px}video{background:#000}video image.osd{min-width:64px;min-height:64px;border-radius:32px}tooltip{padding:6px 10px;border-radius:8px;box-shadow:none}tooltip.background{background-color:rgba(0,0,0,.8);background-clip:padding-box;border:1px solid rgba(255,255,255,.1);color:#fff}tooltip>box{border-spacing:6px}colorswatch{transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}colorswatch{outline:0 solid rgba(0,0,0,0);outline-offset:6px}colorswatch:focus:focus-visible{outline-color:rgba(21,83,158,.7);outline-width:4px;outline-offset:-2px}colorswatch.dnd-active,colorswatch{border-style:none}colorswatch.top{border-top-left-radius:5.5px;border-top-right-radius:5.5px}colorswatch.top>overlay{border-top-left-radius:5px;border-top-right-radius:5px}colorswatch.bottom{border-bottom-left-radius:5.5px;border-bottom-right-radius:5.5px}colorswatch.bottom>overlay{border-bottom-left-radius:5px;border-bottom-right-radius:5px}colorswatch.left,colorswatch:first-child:not(.top){border-top-left-radius:5.5px;border-bottom-left-radius:5.5px}colorswatch.left>overlay,colorswatch:first-child:not(.top)>overlay{border-top-left-radius:5px;border-bottom-left-radius:5px}colorswatch.right,colorswatch:last-child:not(.bottom){border-top-right-radius:5.5px;border-bottom-right-radius:5.5px}colorswatch.right>overlay,colorswatch:last-child:not(.bottom)>overlay{border-top-right-radius:5px;border-bottom-right-radius:5px}colorswatch.dark>overlay{color:#fff}colorswatch.dark.activatable:hover>overlay{border-color:#1b1b1b}colorswatch.light>overlay{color:#000}colorswatch.light.activatable:hover>overlay{border-color:#1b1b1b}colorswatch.dnd-active{box-shadow:none}colorswatch.dnd-active.light>overlay{border-color:#26a269;box-shadow:inset 0 0 0 2px #1b1b1b,inset 0 0 0 1px #26a269}colorswatch.dnd-active.dark>overlay{border-color:#26a269;box-shadow:inset 0 0 0 2px #1b1b1b,inset 0 0 0 1px #26a269}colorswatch>overlay{border:1px solid #1b1b1b}colorswatch.activatable:hover>overlay{box-shadow:inset 0 1px rgba(255,255,255,.4),inset 0 -1px rgba(0,0,0,.2)}colorswatch#add-color-button{border-radius:5px 0 0 5px}colorswatch#add-color-button:only-child{border-radius:5px}colorswatch#add-color-button>overlay{color:#eeeeec;outline-color:rgba(21,83,158,.7);border-color:#1b1b1b;border-bottom-color:#070707;background-color:#353535;box-shadow:inset 0 1px rgba(255,255,255,.02),0 1px 2px rgba(0,0,0,.07)}colorswatch#add-color-button>overlay::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}colorswatch#add-color-button.activatable:hover>overlay{color:#eeeeec;border-color:#1b1b1b;border-bottom-color:#070707;background-color:#2d2d2d;box-shadow:inset 0 1px #353535,0 1px 2px rgba(0,0,0,.07)}colorswatch#add-color-button.activatable:hover>overlay::before{opacity:0}colorswatch:disabled{opacity:.5}colorswatch:disabled>overlay{border-color:rgba(0,0,0,.6);box-shadow:none}row.selected colorswatch{box-shadow:0 0 0 2px #fff}colorswatch#editor-color-sample{border-radius:4px}colorswatch#editor-color-sample>overlay{border-radius:4.5px}plane{transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}plane{outline:0 solid rgba(0,0,0,0);outline-offset:6px}plane:focus:focus-visible{outline-color:rgba(21,83,158,.7);outline-width:2px;outline-offset:2px}colorchooser .Popover.osd{border-radius:5px}.content-view{background-color:#232323}.content-view:hover{-gtk-icon-filter:brightness(1.2)}.content-view .tile{margin:2px;background-color:#000;border-radius:0;padding:0}.content-view .tile:active,.content-view .tile.selected{background-color:#15539e}.content-view .tile:disabled{background-color:#343434}.osd .scale-popup button.flat{border-style:none;border-radius:5px}.scale-popup button:hover{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;background-color:rgba(238,238,236,.1);border-radius:5px}.scale-popup button:hover::before{opacity:0}.Window{border-width:0px}.Window.csd{box-shadow:0 3px 9px 1px rgba(0,0,0,.5),0 0 0 1px rgba(27,27,27,.9);margin:0px;border-radius:8px 8px 0 0}.Window.csd:backdrop{box-shadow:0 3px 9px 1px rgba(0,0,0,0),0 2px 6px 2px rgba(0,0,0,.2),0 0 0 1px rgba(27,27,27,.9);transition:200ms ease-out}.Window.csd.popup{border-radius:5px;box-shadow:0 1px 2px rgba(0,0,0,.2),0 0 0 1px rgba(27,27,27,.8)}.Window.csd.dialog.message{border-radius:8px;box-shadow:0 1px 2px rgba(0,0,0,.2),0 0 0 1px rgba(27,27,27,.8)}.Window.csd.solid-csd{margin:0;padding:0;border:solid 1px #1b1b1b;border-radius:0;box-shadow:inset 0 0 0 3px #2d2d2d,inset 0 1px rgba(238,238,236,.07)}.Window.csd.solid-csd:backdrop{box-shadow:inset 0 0 0 3px #353535,inset 0 1px rgba(238,238,236,.07)}.Window.maximized,.Window.fullscreen,.Window.tiled,.Window.tiled-top,.Window.tiled-left,.Window.tiled-right,.Window.tiled-bottom{border-radius:0}.Window.popup{box-shadow:none}.Window.ssd{box-shadow:0 0 0 1px rgba(27,27,27,.9)}tooltip.csd{border-radius:5px;box-shadow:none}.view.selected:focus,.view.selected,.selected.IconView:focus,.selected.IconView,.Flowbox>.Flowbox__child.selected,.Grid>.Grid__child.selected,.Input>.Input__area>input::selection,.ModelButton.selected,.InputNumber:not(.vertical)>.Input__area>input::selection,.InputNumber.vertical>.Input__area>input>.Input__area>input::selection,.InputNumber.vertical>.Input__area>input::selection,.List__item.selected,.navigation-sidebar:not(.increase-specificity)>.selected.List__item.activatable,.Calendar .Calendar__day:not(.increase-specificity).today>.Button{background-color:#15539e}.view.selected:focus,.view.selected,.selected.IconView:focus,.selected.IconView,.Flowbox>.Flowbox__child.selected,.Grid>.Grid__child.selected,.Input>.Input__area>input::selection,.ModelButton.selected,.InputNumber:not(.vertical)>.Input__area>input::selection,.InputNumber.vertical>.Input__area>input>.Input__area>input::selection,.InputNumber.vertical>.Input__area>input::selection,.List__item.selected,.navigation-sidebar:not(.increase-specificity)>.selected.List__item.activatable,.Calendar .Calendar__day:not(.increase-specificity).today>.Button{color:#fff}.Label.disabled::selection,.view.selected:disabled,.selected.IconView:disabled,.Flowbox>.Flowbox__child.selected:disabled,.Grid>.Grid__child.selected:disabled,.Input>.Input__area>input:disabled::selection,.ModelButton.selected:disabled,.InputNumber:not(.vertical)>.Input__area>input:disabled::selection,.InputNumber.vertical>.Input__area>input>.Input__area>input:disabled::selection,.InputNumber.vertical>.Input__area>input:disabled::selection,.List__item.selected:disabled,.navigation-sidebar:not(.increase-specificity)>.selected.List__item.activatable:disabled,.Calendar .Calendar__day:not(.increase-specificity).today>.Button:disabled{color:#8aa9cf}.monospace{font-family:monospace}shortcuts-section{margin:20px}.shortcuts-search-results{margin:20px;border-spacing:24px}shortcut{border-spacing:6px}shortcut>.keycap{min-width:20px;min-height:25px;margin-top:2px;padding-bottom:3px;padding-left:6px;padding-right:6px;color:#eeeeec;background-color:#2d2d2d;border:1px solid;border-color:#1b1b1b;border-radius:5px;box-shadow:inset 0 -3px #222;font-size:smaller}:not(decoration):not(.Window).dnd-active:focus,:not(decoration):not(.Window).dnd-active{border-color:#26a269;box-shadow:inset 0 0 0 1px #26a269;caret-color:#26a269}.StackSwitcher>button.text-button{min-width:100px}.StackSwitcher.circular{border-spacing:12px}.StackSwitcher.circular>button.circular,.StackSwitcher.circular>button.text-button.circular{min-width:32px;min-height:32px;padding:0}.lowres-icon{--icon-shadow: 0 -1px rgba(0, 0, 0, 0.05), 1px 0 rgba(0, 0, 0, 0.1), 0 1px rgba(0, 0, 0, 0.3), -1px 0 rgba(0, 0, 0, 0.1)}.icon-dropshadow{--icon-shadow: 0 1px 12px rgba(0, 0, 0, 0.05), 0 -1px rgba(0, 0, 0, 0.05), 1px 0 rgba(0, 0, 0, 0.1), 0 1px rgba(0, 0, 0, 0.3), -1px 0 rgba(0, 0, 0, 0.1)}popover.emoji-picker>.Popover__container{padding:0}.emoji-searchbar{padding:6px;border-spacing:6px;border-bottom:1px solid #1b1b1b}.emoji-toolbar{padding:6px;border-spacing:6px;border-top:1px solid #1b1b1b}button.emoji-section{border-color:rgba(0,0,0,0);border-width:3px;border-style:none none solid;border-radius:0;padding:3px 0 0;min-width:32px;min-height:28px;background:none;box-shadow:none;text-shadow:none}button.emoji-section:hover{border-color:rgba(238,238,236,.1)}button.emoji-section:checked{border-color:#15539e}popover.emoji-picker emoji{font-size:x-large;padding:6px;border-radius:6px}popover.emoji-picker emoji:focus,popover.emoji-picker emoji:hover{background:#15539e}emoji-completion-row>box{border-spacing:10px;padding:2px 10px}emoji-completion-row:focus,emoji-completion-row:hover{background-color:#15539e;color:#fff}emoji-completion-row emoji:focus,emoji-completion-row emoji:hover{background-color:#202020}popover.entry-completion>.Popover__container{padding:0}statusbar{padding:6px 10px 6px 10px}@define-color theme_fg_color #eeeeec;@define-color theme_text_color white;@define-color theme_bg_color #353535;@define-color theme_base_color #2d2d2d;@define-color theme_selected_bg_color #15539e;@define-color theme_selected_fg_color #ffffff;@define-color insensitive_bg_color #343434;@define-color insensitive_fg_color #929291;@define-color insensitive_base_color #2d2d2d;@define-color theme_unfocused_fg_color #929291;@define-color theme_unfocused_text_color white;@define-color theme_unfocused_bg_color #353535;@define-color theme_unfocused_base_color #303030;@define-color theme_unfocused_selected_bg_color #15539e;@define-color theme_unfocused_selected_fg_color #ffffff;@define-color unfocused_insensitive_color #5b5b5b;@define-color borders #1b1b1b;@define-color unfocused_borders #202020;@define-color warning_color #f57900;@define-color error_color #cc0000;@define-color success_color #26ab62;@define-color wm_title shade(#eeeeec, 1.8);@define-color wm_unfocused_title #929291;@define-color wm_highlight rgba(0, 0, 0, 0);@define-color wm_borders_edge rgba(238, 238, 236, 0.07);@define-color wm_bg_a shade(#353535, 1.2);@define-color wm_bg_b #353535;@define-color wm_shadow alpha(black, 0.35);@define-color wm_border alpha(black, 0.18);@define-color wm_button_hover_color_a shade(#353535, 1.3);@define-color wm_button_hover_color_b #353535;@define-color wm_button_active_color_a shade(#353535, 0.85);@define-color wm_button_active_color_b shade(#353535, 0.89);@define-color wm_button_active_color_c shade(#353535, 0.9);@define-color content_view_bg #2d2d2d;@define-color text_view_bg #1e1e1e`;

var adwaita_default = `
*{box-sizing:border-box}body{font-family:"Cantarell","Ubuntu",-apple-system,BlinkMacSystemFont,"Segoe UI","Roboto","Oxygen","Fira Sans","Droid Sans","Helvetica Neue",sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}code{font-family:source-code-pro,"Source Code Pro",Menlo,Monaco,Consolas,"Courier New",monospace}.title-large{font-weight:300;font-size:24pt}h1{font-weight:800;font-size:20pt}h2{font-weight:800;font-size:15pt}h3{font-weight:700;font-size:15pt}h4{font-weight:700;font-size:13pt}html,body{font-weight:400;font-size:11pt}.heading{font-weight:700;font-size:11pt}.caption-heading{font-weight:700;font-size:9pt}.caption{font-weight:400;font-size:9pt}button{font-size:inherit;font-family:inherit}code{font-size:.9em;padding:1px 4px;color:#000;background-color:#fff;border:1px solid #ccc;border-radius:3px}pre{font-size:.9em;padding:1px 4px;color:#000;background-color:#fff;border:1px solid #ccc;border-radius:3px}.text-info{color:#3584e4;--icon-color: #3584e4}.text-success{color:#33d17a;--icon-color: #33d17a}.text-warning{color:#f57900;--icon-color: #f57900}.text-danger{color:#e01b24;--icon-color: #e01b24}.text-muted{color:#929595;--icon-color: #929595}.text-italic{font-style:italic}.text-bold{font-weight:700}.weight-100{font-weight:100}.weight-200{font-weight:200}.weight-300{font-weight:300}.weight-400{font-weight:400}.weight-500{font-weight:500}.weight-600{font-weight:600}.weight-700{font-weight:700}.weight-800{font-weight:800}.weight-900{font-weight:900}*::selection{background-color:#3584e4;color:#fff}*::-webkit-scrollbar{width:8px;height:8px}*::-webkit-scrollbar-track{background-color:rgba(0,0,0,0);padding:0 5px}*::-webkit-scrollbar-thumb{background-clip:padding-box;background-color:#bbb;border:2px solid rgba(0,0,0,0);border-radius:5px;margin:0 2px}*::-webkit-scrollbar-thumb:hover{background-color:#999}*::-webkit-scrollbar-thumb:active{background-color:#888}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.user-select-none{user-select:none}.fill{width:100%;height:100%}.fill-width{width:100%}.fill-height{height:100%}.background{color:#2e3436;background-color:#f6f5f4}.window-inactive .background{text-shadow:none;--icon-shadow: none}.background-low{background-color:#fff}.background-default{background-color:#f6f5f4}.background-medium{background-color:#f1f0ee}.background-high{background-color:#e2dedb}.separator{border-bottom:1px solid #d8d4d0;border-right:1px solid #d8d4d0;min-width:1px;min-height:1px}.Box.horizontal{display:flex;flex-direction:row}.Box.horizontal>*:not(:last-child){margin-right:1rem}.Box.horizontal.compact>*:not(:last-child){margin-right:0}.Box.vertical{display:flex;flex-direction:column}.Box.vertical>*:not(:last-child){margin-bottom:1rem}.Box.vertical.compact>*:not(:last-child){margin-bottom:0}.Box.inline{display:inline-flex}.Box.align{align-items:center}.Box.align-center{align-items:center}.Box.align-start{align-items:flex-start}.Box.align-end{align-items:flex-end}.Box.justify{justify-content:center}.Box.justify-center{justify-content:center}.Box.justify-start{justify-content:flex-start}.Box.justify-end{justify-content:flex-end}.Box.space-around{justify-content:space-around}.Box.space-between{justify-content:space-between}.Box.fill{display:inline-flex;width:100%;height:100%}.Box.fill-width{display:inline-flex;width:100%}.Box.fill-height{display:inline-flex;height:100%}.Box.padded{padding:1em}.Box.expand-children>*{flex:1}.Box.border{border:1px solid #cdc7c2}.Box__fill{flex:1}.Box__fill.expand-children>*{width:100%;height:100%}.view,.IconView{color:#000;background-color:#fff}.view:disabled,.IconView:disabled{color:#929595;background-color:#f7f6f5}.view.selected:focus,.selected.IconView:focus,.view.selected,.selected.IconView{border-radius:3px}.IconView{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.IconView:focus:focus-visible{outline-color:rgba(53,132,228,.5);outline-width:2px;outline-offset:-2px}.IconView.dnd-active{box-shadow:none}.IconView>dndtarget.dnd-active{border-style:solid;border-width:1px;border-color:#185fb4}.Flowbox>.Flowbox__child{padding:3px;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Flowbox>.Flowbox__child{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Flowbox>.Flowbox__child:focus:focus-visible{outline-color:rgba(53,132,228,.5);outline-width:2px;outline-offset:-2px}.Flowbox>.Flowbox__child.selected{outline-color:rgba(255,255,255,.8)}.Grid>.Grid__child{padding:3px;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Grid>.Grid__child{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Grid>.Grid__child:focus:focus-visible{outline-color:rgba(53,132,228,.5);outline-width:2px;outline-offset:-2px}.Grid>.Grid__child.selected{outline-color:rgba(255,255,255,.8)}.Grid>.Grid__child .Grid__box{border-spacing:8px;margin:12px}.SelectionArea,.content-view>.SelectionArea,.table>.SelectionArea,.Flowbox>.SelectionArea,.Grid>.SelectionArea{border:1px solid #1b6acb;background-color:rgba(27,106,203,.2)}.link{color:#1b6acb;text-decoration:underline;cursor:pointer;transition:color 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);border-radius:5px}.link{position:relative;outline:none;overflow:visible}.link::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.link:focus:focus-visible{outline:none}.link:focus:focus-visible::after{border:2px solid rgba(53,132,228,.5);top:-2px;left:-2px;width:100%;height:100%}.link:not(:disabled):not(.disabled):visited{color:#15539e}*.selected .link:not(:disabled):not(.disabled):visited{color:#a1bad8}.link:not(:disabled):not(.disabled):hover{color:#3584e4}*.selected .link:not(:disabled):not(.disabled):hover{color:#ebf3fc}.link:not(:disabled):not(.disabled):active{color:#1b6acb}*.selected .link:not(:disabled):not(.disabled):active{color:#d1e1f5}.link:disabled{color:rgba(115,115,115,.8)}.link.selected,*.selected .link{color:#d1e1f5}.Heading{position:relative}.Heading:hover .Heading__anchor{opacity:.5}.Heading__anchor{position:absolute;top:0;left:0;transform:translateX(-100%);height:100%;line-height:100%;padding-right:4px;opacity:0;display:flex;justify-content:center;align-items:center;color:#2e3436 !important;text-decoration:none !important}.Label{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Label:focus:focus-visible{outline-color:rgba(53,132,228,.5);outline-width:2px;outline-offset:-2px}.Label.mini{height:18px;line-height:18px;min-height:18px;font-size:11px;--icon-size: 12px}.Label.small{height:22px;line-height:22px;min-height:22px;font-size:12px;--icon-size: 13px}.Label.medium{height:28px;line-height:28px;min-height:28px;font-size:14px;--icon-size: 16px}.Label.large{height:36px;line-height:36px;min-height:36px;font-size:18px;--icon-size: 20px}.Label.huge{height:42px;line-height:42px;min-height:42px;font-size:20px;--icon-size: 23px}.Label.mega{height:58px;line-height:58px;min-height:58px;font-size:28px;--icon-size: 32px}.Label::selection{background-color:#3584e4;color:#fff}.Label.disabled{color:#929595}.Button .Label.disabled{color:inherit}.Label.info{color:#3584e4}.Label.info.disabled{color:rgba(53,132,228,.5)}.Label.success{color:#2abb6b}.Label.success.disabled{color:rgba(42,187,107,.5)}.Label.warning{color:#f57900}.Label.warning.disabled{color:rgba(245,121,0,.5)}.Label.danger{color:#c00}.Label.danger.disabled{color:rgba(204,0,0,.5)}.Label.title{color:#929595;font-weight:700}.Label.align-left{text-align:left}.Label.align-center{text-align:center}.Label.align-right{text-align:right}.Label.ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.Label.fill{width:100%;height:100%}.Label.fill-width{width:100%}.Label.fill-height{height:100%}.Text{margin:0}.Text.mini{font-size:13.2px;line-height:1.4;--icon-size: 12px}.Text.small{font-size:14.4px;line-height:1.4;--icon-size: 13px}.Text.medium{font-size:16.8px;line-height:1.4;--icon-size: 16px}.Text.large{font-size:21.6px;line-height:1.4;--icon-size: 20px}.Text.huge{font-size:24px;line-height:1.4;--icon-size: 23px}.Text.mega{font-size:33.6px;line-height:1.4;--icon-size: 32px}.Text.hero{font-size:24px;font-weight:300;line-height:1.4}.dim-label,.titlebar:not(.HeaderBar) .subtitle,.HeaderBar .subtitle,.InputNumber.vertical>.Input__area>input>.Input__area>input::placeholder,.InputNumber:not(.vertical)>.Input__area>input::placeholder,.Input>.Input__area>input::placeholder,.Label.separator{opacity:.55;text-shadow:none}.osd .scale-popup,.app-notification,.osd{color:#eeeeec;border:none;background-color:rgba(53,53,53,.7);background-clip:padding-box;text-shadow:0 1px #000;--icon-shadow: 0 1px black}.Alert{border:1px solid #cdc7c2;border-left-width:6px;border-radius:5px;padding:8px}.Alert.info{color:#2e3436;--icon-color: #5787c2;background-color:#c4d7ee;border-color:#a4c1e6}.Alert.info a{color:#1b1f20;font-weight:bold}.Alert.info a:not(:disabled):not(.disabled):hover{color:#292f30}.Alert.info .Alert__close{color:#2e3436;outline-color:rgba(255,255,255,.8);border-color:#9cbce3;border-bottom-color:#74a1d8;background-color:#c4d7ee;box-shadow:inset 0 1px rgba(255,255,255,.5),0 1px 2px rgba(0,0,0,.07)}.Alert.info .Alert__close::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Alert.info .Alert__close:not(:disabled):not(.disabled).hover,.Alert.info .Alert__close:not(:disabled):not(.disabled):hover{color:#2e3436;border-color:#9cbce3;border-bottom-color:#74a1d8;background-color:#cadbf0;box-shadow:inset 0 1px #c0d4ed,0 1px 2px rgba(0,0,0,.07)}.Alert.info .Alert__close:not(:disabled):not(.disabled).hover::before,.Alert.info .Alert__close:not(:disabled):not(.disabled):hover::before{opacity:0}.Alert.info .Alert__close:not(:disabled):not(.disabled).active,.Alert.info .Alert__close:not(:disabled):not(.disabled):active{color:#2e3436;border-color:#9cbce3;background-color:#8cb1df;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Alert.info .Alert__close:not(:disabled):not(.disabled).active::before,.Alert.info .Alert__close:not(:disabled):not(.disabled):active::before{opacity:0}.Alert.success{color:#2e3436;--icon-color: #59ac7e;background-color:#b4d0c0;border-color:#9ac0ab}.Alert.success a{color:#1b1f20;font-weight:bold}.Alert.success a:not(:disabled):not(.disabled):hover{color:#292f30}.Alert.success .Alert__close{color:#2e3436;outline-color:rgba(255,255,255,.8);border-color:#94bca6;border-bottom-color:#75a98c;background-color:#b4d0c0;box-shadow:inset 0 1px rgba(255,255,255,.2),0 1px 2px rgba(0,0,0,.07)}.Alert.success .Alert__close::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Alert.success .Alert__close:not(:disabled):not(.disabled).hover,.Alert.success .Alert__close:not(:disabled):not(.disabled):hover{color:#2e3436;border-color:#94bca6;border-bottom-color:#75a98c;background-color:#b8d3c4;box-shadow:inset 0 1px #b0cebe,0 1px 2px rgba(0,0,0,.07)}.Alert.success .Alert__close:not(:disabled):not(.disabled).hover::before,.Alert.success .Alert__close:not(:disabled):not(.disabled):hover::before{opacity:0}.Alert.success .Alert__close:not(:disabled):not(.disabled).active,.Alert.success .Alert__close:not(:disabled):not(.disabled):active{color:#2e3436;border-color:#94bca6;background-color:#88b59c;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Alert.success .Alert__close:not(:disabled):not(.disabled).active::before,.Alert.success .Alert__close:not(:disabled):not(.disabled):active::before{opacity:0}.Alert.warning{color:#2e3436;--icon-color: #d07925;background-color:#eed3ba;border-color:#e6bf99}.Alert.warning a{color:#1b1f20;font-weight:bold}.Alert.warning a:not(:disabled):not(.disabled):hover{color:#292f30}.Alert.warning .Alert__close{color:#2e3436;outline-color:rgba(255,255,255,.8);border-color:#e4ba91;border-bottom-color:#d9a068;background-color:#eed3ba;box-shadow:inset 0 1px rgba(255,255,255,.5),0 1px 2px rgba(0,0,0,.07)}.Alert.warning .Alert__close::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Alert.warning .Alert__close:not(:disabled):not(.disabled).hover,.Alert.warning .Alert__close:not(:disabled):not(.disabled):hover{color:#2e3436;border-color:#e4ba91;border-bottom-color:#d9a068;background-color:#efd7c0;box-shadow:inset 0 1px #edd1b6,0 1px 2px rgba(0,0,0,.07)}.Alert.warning .Alert__close:not(:disabled):not(.disabled).hover::before,.Alert.warning .Alert__close:not(:disabled):not(.disabled):hover::before{opacity:0}.Alert.warning .Alert__close:not(:disabled):not(.disabled).active,.Alert.warning .Alert__close:not(:disabled):not(.disabled):active{color:#2e3436;border-color:#e4ba91;background-color:#dfaf81;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Alert.warning .Alert__close:not(:disabled):not(.disabled).active::before,.Alert.warning .Alert__close:not(:disabled):not(.disabled):active::before{opacity:0}.Alert.danger{color:#2e3436;--icon-color: #ad1f1f;background-color:#ebadad;border-color:#e28d8d}.Alert.danger a{color:#1b1f20;font-weight:bold}.Alert.danger a:not(:disabled):not(.disabled):hover{color:#292f30}.Alert.danger .Alert__close{color:#2e3436;outline-color:rgba(255,255,255,.8);border-color:#e08585;border-bottom-color:#d65c5c;background-color:#ebadad;box-shadow:inset 0 1px rgba(255,255,255,.2),0 1px 2px rgba(0,0,0,.07)}.Alert.danger .Alert__close::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Alert.danger .Alert__close:not(:disabled):not(.disabled).hover,.Alert.danger .Alert__close:not(:disabled):not(.disabled):hover{color:#2e3436;border-color:#e08585;border-bottom-color:#d65c5c;background-color:#ecb4b4;box-shadow:inset 0 1px #eaa9a9,0 1px 2px rgba(0,0,0,.07)}.Alert.danger .Alert__close:not(:disabled):not(.disabled).hover::before,.Alert.danger .Alert__close:not(:disabled):not(.disabled):hover::before{opacity:0}.Alert.danger .Alert__close:not(:disabled):not(.disabled).active,.Alert.danger .Alert__close:not(:disabled):not(.disabled):active{color:#2e3436;border-color:#e08585;background-color:#dc7474;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Alert.danger .Alert__close:not(:disabled):not(.disabled).active::before,.Alert.danger .Alert__close:not(:disabled):not(.disabled):active::before{opacity:0}.Alert{color:#2e3436;--icon-color: #323232;background-color:#e2dedb;border-color:#d0c9c4}.Alert a{color:#1b1f20;font-weight:bold}.Alert a:not(:disabled):not(.disabled):hover{color:#292f30}.Alert .Alert__close{color:#2e3436;outline-color:rgba(255,255,255,.8);border-color:#cbc4bf;border-bottom-color:#b4aaa3;background-color:#e2dedb;box-shadow:inset 0 1px rgba(255,255,255,.5),0 1px 2px rgba(0,0,0,.07)}.Alert .Alert__close::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Alert .Alert__close:not(:disabled):not(.disabled).hover,.Alert .Alert__close:not(:disabled):not(.disabled):hover{color:#2e3436;border-color:#cbc4bf;border-bottom-color:#b4aaa3;background-color:#e5e2df;box-shadow:inset 0 1px #e0dbd8,0 1px 2px rgba(0,0,0,.07)}.Alert .Alert__close:not(:disabled):not(.disabled).hover::before,.Alert .Alert__close:not(:disabled):not(.disabled):hover::before{opacity:0}.Alert .Alert__close:not(:disabled):not(.disabled).active,.Alert .Alert__close:not(:disabled):not(.disabled):active{color:#2e3436;border-color:#cbc4bf;background-color:#c2bab3;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Alert .Alert__close:not(:disabled):not(.disabled).active::before,.Alert .Alert__close:not(:disabled):not(.disabled):active::before{opacity:0}.Alert__icon{margin-top:3px;--icon-size: 1.5em;opacity:.5}.Alert__title{font-size:1.2em;margin-bottom:.25rem}.Alert__message{font-size:1rem}.normal-icons{--icon-size: 16px}.large-icons{--icon-size: 32px}.Icon{display:flex;justify-content:center;align-items:center;display:inline-flex}.Icon svg{width:auto;height:var(--icon-size, 16px)}.Icon:not(.colored) svg *{fill:var(--icon-color, unset) !important}*:disabled .Icon:not(.colored):not(.increase-specificity),.disabled .Icon:not(.colored):not(.increase-specificity){--icon-color: rgba(0, 0, 0, 0.3)}*:disabled .Icon.colored:not(.increase-specificity),.disabled .Icon.colored:not(.increase-specificity){opacity:.3}.Icon svg{transform:scale(0.8)}@keyframes spin{to{transform:rotate(1turn)}}.Spinner{opacity:1;animation:spin 1s linear infinite;display:inline-block;width:var(--icon-size, 16px);height:var(--icon-size, 16px)}.Spinner.disabled{opacity:.5}.Spinner.hidden{opacity:0}@keyframes move_along_width{0%{left:var(--input-padding)}50%{left:calc(100% - var(--progress-indeterminate-width) - var(--input-padding, 8px))}100%{left:var(--input-padding)}}.InputNumber.vertical>.Input__area>input,.InputNumber:not(.vertical),.Input{--input-padding: 8px;--progress-indeterminate-width: 50px}.InputNumber.vertical>.Input__area>input,.InputNumber:not(.vertical),.Input{position:relative;display:inline-flex;flex-direction:row;align-items:center;border:1px solid;border-radius:5px;border-spacing:6px;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);color:#000;border-color:#cdc7c2;background-color:#fff;height:28px;min-height:28px;padding-left:var(--input-padding);padding-right:var(--input-padding)}.InputNumber.vertical>.Input__area>input,.InputNumber:not(.vertical),.Input{position:relative;outline:none;overflow:visible}.InputNumber.vertical>.Input__area>input::after,.InputNumber:not(.vertical)::after,.Input::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.InputNumber.vertical>.Input__area>input:focus-within,.InputNumber:focus-within:not(.vertical),.Input:focus-within{outline:none}.InputNumber.vertical>.Input__area>input:focus-within::after,.InputNumber:focus-within:not(.vertical)::after,.Input:focus-within::after{border:2px solid rgba(53,132,228,.5);top:-2px;left:-2px;width:100%;height:100%}.InputNumber.vertical>.Input__area>input.mini,.mini.InputNumber:not(.vertical),.Input.mini{height:18px;min-height:18px;--input-padding: calc($height / 4);font-size:11px;--icon-size: 12px}.InputNumber.vertical>.Input__area>input.mini>.Input__area,.mini.InputNumber:not(.vertical)>.Input__area,.Input.mini>.Input__area{line-height:18px}.InputNumber.vertical>.Input__area>input.small,.small.InputNumber:not(.vertical),.Input.small{height:22px;min-height:22px;--input-padding: calc($height / 4);font-size:12px;--icon-size: 13px}.InputNumber.vertical>.Input__area>input.small>.Input__area,.small.InputNumber:not(.vertical)>.Input__area,.Input.small>.Input__area{line-height:22px}.InputNumber.vertical>.Input__area>input.medium,.medium.InputNumber:not(.vertical),.Input.medium{height:28px;min-height:28px;--input-padding: calc($height / 4);font-size:14px;--icon-size: 16px}.InputNumber.vertical>.Input__area>input.medium>.Input__area,.medium.InputNumber:not(.vertical)>.Input__area,.Input.medium>.Input__area{line-height:28px}.InputNumber.vertical>.Input__area>input.large,.large.InputNumber:not(.vertical),.Input.large{height:36px;min-height:36px;--input-padding: calc($height / 4);font-size:18px;--icon-size: 20px}.InputNumber.vertical>.Input__area>input.large>.Input__area,.large.InputNumber:not(.vertical)>.Input__area,.Input.large>.Input__area{line-height:36px}.InputNumber.vertical>.Input__area>input.huge,.huge.InputNumber:not(.vertical),.Input.huge{height:42px;min-height:42px;--input-padding: calc($height / 4);font-size:20px;--icon-size: 23px}.InputNumber.vertical>.Input__area>input.huge>.Input__area,.huge.InputNumber:not(.vertical)>.Input__area,.Input.huge>.Input__area{line-height:42px}.InputNumber.vertical>.Input__area>input.mega,.mega.InputNumber:not(.vertical),.Input.mega{height:58px;min-height:58px;--input-padding: calc($height / 4);font-size:28px;--icon-size: 32px}.InputNumber.vertical>.Input__area>input.mega>.Input__area,.mega.InputNumber:not(.vertical)>.Input__area,.Input.mega>.Input__area{line-height:58px}.InputNumber.vertical>.Input__area>input>.Input__area,.InputNumber:not(.vertical)>.Input__area,.Input>.Input__area{position:relative;flex:1;height:100%;overflow:hidden}.InputNumber.vertical>.Input__area>input>.Input__area>input,.InputNumber:not(.vertical)>.Input__area>input,.Input>.Input__area>input{width:100%;height:100%;border:none;color:inherit;background:none;font-size:inherit}.InputNumber.vertical>.Input__area>input>.Input__area>input:focus,.InputNumber:not(.vertical)>.Input__area>input:focus,.Input>.Input__area>input:focus{outline:none}.InputNumber.vertical>.Input__area>input>.Input__area>input::placeholder,.InputNumber:not(.vertical)>.Input__area>input::placeholder,.Input>.Input__area>input::placeholder{user-select:none}.InputNumber.vertical>.Input__area>input>.Input__area>.Input__children,.InputNumber:not(.vertical)>.Input__area>.Input__children,.Input>.Input__area>.Input__children{position:absolute;pointer-events:none;top:0px;left:0px;width:100%;height:100%;display:flex;justify-content:center;align-items:center;justify-content:flex-start;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.InputNumber.vertical>.Input__area>input>.Input__area>input:focus+.Input__children,.InputNumber:not(.vertical)>.Input__area>input:focus+.Input__children,.Input>.Input__area>input:focus+.Input__children{opacity:.5}.InputNumber.vertical>.Input__area>input>.Input__area>input:not(.empty)+.Input__children,.InputNumber:not(.vertical)>.Input__area>input:not(.empty)+.Input__children,.Input>.Input__area>input:not(.empty)+.Input__children{opacity:0}.InputNumber.vertical>.Input__area>input .Input__left,.InputNumber:not(.vertical) .Input__left,.InputNumber.vertical>.Input__area>input .Input__right,.InputNumber:not(.vertical) .Input__right,.Input .Input__left,.Input .Input__right{display:flex;justify-content:center;align-items:center}.InputNumber.vertical>.Input__area>input .Input__left,.InputNumber:not(.vertical) .Input__left,.Input .Input__left{margin-right:6px}.InputNumber.vertical>.Input__area>input .Input__right,.InputNumber:not(.vertical) .Input__right,.Input .Input__right{margin:0;margin-left:6px;padding:0}.InputNumber.vertical>.Input__area>input .Input__left.Button,.InputNumber:not(.vertical) .Input__left.Button,.InputNumber.vertical>.Input__area>input .Input__right.Button,.InputNumber:not(.vertical) .Input__right.Button,.Input .Input__left.Button,.Input .Input__right.Button{opacity:.8;min-width:unset;min-height:unset;height:min-content}.InputNumber.vertical>.Input__area>input.flat,.flat.InputNumber:not(.vertical),.Input.flat:focus-within,.window-inactive .Input.flat,.Input.flat:disabled,.window-inactive .Input.flat:disabled,.Input.flat{min-height:0;padding:0 2px;background-color:rgba(0,0,0,0);border-color:rgba(0,0,0,0);border-radius:0}.InputNumber.vertical>.Input__area>input:focus-within>.Input__area>input::placeholder,.InputNumber:focus-within:not(.vertical)>.Input__area>input::placeholder,.Input:focus-within>.Input__area>input::placeholder{opacity:0}.InputNumber.vertical>.Input__area>input:disabled,.InputNumber:disabled:not(.vertical),.InputNumber.vertical>.Input__area>input.disabled,.disabled.InputNumber:not(.vertical),.Input:disabled,.Input.disabled{color:#929595;border-color:#cdc7c2;background-color:#f7f6f5;box-shadow:none}.InputNumber.vertical>.Input__area>input.error,.error.InputNumber:not(.vertical),.Input.error{border-color:#c00}.InputNumber.vertical>.Input__area>input.error,.error.InputNumber:not(.vertical),.Input.error{position:relative;outline:none;overflow:visible}.InputNumber.vertical>.Input__area>input.error::after,.error.InputNumber:not(.vertical)::after,.Input.error::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.InputNumber.vertical>.Input__area>input.error:focus-within,.error.InputNumber:focus-within:not(.vertical),.Input.error:focus-within{outline:none}.InputNumber.vertical>.Input__area>input.error:focus-within::after,.error.InputNumber:focus-within:not(.vertical)::after,.Input.error:focus-within::after{border:2px solid rgba(204,0,0,.5);top:-2px;left:-2px;width:100%;height:100%}.InputNumber.vertical>.Input__area>input.error input,.error.InputNumber:not(.vertical) input,.Input.error input{color:#ac0a0b}.InputNumber.vertical>.Input__area>input.error input::selection,.error.InputNumber:not(.vertical) input::selection,.Input.error input::selection{background-color:#c00}.InputNumber.vertical>.Input__area>input.warning,.warning.InputNumber:not(.vertical),.Input.warning{border-color:#f57900}.InputNumber.vertical>.Input__area>input.warning,.warning.InputNumber:not(.vertical),.Input.warning{position:relative;outline:none;overflow:visible}.InputNumber.vertical>.Input__area>input.warning::after,.warning.InputNumber:not(.vertical)::after,.Input.warning::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.InputNumber.vertical>.Input__area>input.warning:focus-within,.warning.InputNumber:focus-within:not(.vertical),.Input.warning:focus-within{outline:none}.InputNumber.vertical>.Input__area>input.warning:focus-within::after,.warning.InputNumber:focus-within:not(.vertical)::after,.Input.warning:focus-within::after{border:2px solid rgba(245,121,0,.5);top:-2px;left:-2px;width:100%;height:100%}.InputNumber.vertical>.Input__area>input.warning input,.warning.InputNumber:not(.vertical) input,.Input.warning input{color:#cd6b0b}.InputNumber.vertical>.Input__area>input.warning input::selection,.warning.InputNumber:not(.vertical) input::selection,.Input.warning input::selection{background-color:#f57900}.InputNumber.vertical>.Input__area>input *:not(.InputNumber__button) .Icon,.InputNumber:not(.vertical) *:not(.InputNumber__button) .Icon,.Input *:not(.InputNumber__button) .Icon{--icon-color: #585d5e}.InputNumber.vertical>.Input__area>input *:not(.InputNumber__button) .Icon:hover,.InputNumber:not(.vertical) *:not(.InputNumber__button) .Icon:hover,.Input *:not(.InputNumber__button) .Icon:hover{--icon-color: #2e3436}.InputNumber.vertical>.Input__area>input *:not(.InputNumber__button) .Icon:active,.InputNumber:not(.vertical) *:not(.InputNumber__button) .Icon:active,.Input *:not(.InputNumber__button) .Icon:active{--icon-color: #3584e4}.dnd-active .InputNumber.vertical>.Input__area>input,.dnd-active .InputNumber:not(.vertical),.dnd-active .Input:focus-within,.dnd-active .Input{border-color:#2ec27e;box-shadow:inset 0 0 0 1px #2ec27e}.osd .InputNumber.vertical>.Input__area>input,.osd .InputNumber:not(.vertical),.osd .Input{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(0,0,0,.5);background-clip:padding-box;box-shadow:none;text-shadow:0 1px #000;--icon-shadow: 0 1px black}.osd .InputNumber.vertical>.Input__area>input:focus-within,.osd .InputNumber:focus-within:not(.vertical),.osd .Input:focus-within{color:#fff;border-color:#3584e4;background-color:rgba(0,0,0,.5);background-clip:padding-box;text-shadow:0 1px #000;--icon-shadow: 0 1px black}.osd .InputNumber.vertical>.Input__area>input:disabled,.osd .InputNumber:disabled:not(.vertical),.osd .Input:disabled{color:#929291;border-color:rgba(0,0,0,.7);background-color:rgba(72,72,71,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.InputNumber.vertical>.Input__area>input .Input__progress,.InputNumber:not(.vertical) .Input__progress,.Input .Input__progress{position:absolute;display:inline-block;pointer-events:none;width:calc(100% - 2*var(--input-padding, 8px));height:calc(100% - 1px);top:0px;left:var(--input-padding)}.InputNumber.vertical>.Input__area>input .Input__progress .Input__progress__bar,.InputNumber:not(.vertical) .Input__progress .Input__progress__bar,.Input .Input__progress .Input__progress__bar{display:inline-block;width:100%;height:100%;border-width:0 0 2px;border-color:#3584e4;border-style:solid}.InputNumber.vertical>.Input__area>input .Input__progress.indeterminate,.InputNumber:not(.vertical) .Input__progress.indeterminate,.Input .Input__progress.indeterminate{height:calc(100% - 1px);width:var(--progress-indeterminate-width);animation:move_along_width 2.5s infinite}.InputNumber.vertical>.Input__area.linked:not(.vertical)>input:not(:first-child),.linked:not(.vertical)>.InputNumber:not(:first-child):not(.vertical),.linked:not(.vertical)>.Input:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.InputNumber.vertical>.Input__area.linked:not(.vertical)>input:not(:last-child),.linked:not(.vertical)>.InputNumber:not(:last-child):not(.vertical),.linked:not(.vertical)>.Input:not(:last-child){border-right-style:none;border-top-right-radius:0;border-bottom-right-radius:0}.InputNumber.vertical>.Input__area.linked.vertical>input:not(:first-child),.linked.vertical>.InputNumber:not(:first-child):not(.vertical),.linked.vertical>.Input:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.InputNumber.vertical>.Input__area.linked.vertical>input:not(:last-child),.linked.vertical>.InputNumber:not(:last-child):not(.vertical),.linked.vertical>.Input:not(:last-child){border-bottom-style:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.InputNumber.vertical>.Input__area.linked.vertical>input:not(:disabled)+entry:not(:disabled),.linked.vertical>.InputNumber:not(:disabled):not(.vertical)+entry:not(:disabled),.InputNumber.vertical>.Input__area.linked.vertical>input:not(:disabled)+input:not(:disabled),.InputNumber.vertical>.Input__area.linked.vertical>.InputNumber:not(:disabled):not(.vertical)+input:not(:disabled),.InputNumber.vertical>.Input__area.linked.vertical>input:not(:disabled)+.InputNumber:not(:disabled):not(.vertical),.linked.vertical>.InputNumber:not(:disabled):not(.vertical)+.InputNumber:not(:disabled):not(.vertical),.linked.vertical>.Input:not(:disabled)+entry:not(:disabled),.InputNumber.vertical>.Input__area.linked.vertical>.Input:not(:disabled)+input:not(:disabled),.linked.vertical>.Input:not(:disabled)+.InputNumber:not(:disabled):not(.vertical){border-top-color:#f0eeed}.InputNumber.vertical>.Input__area.linked.vertical>input:disabled+input:disabled,.InputNumber.vertical>.Input__area.linked.vertical>.InputNumber:disabled:not(.vertical)+input:disabled,.InputNumber.vertical>.Input__area.linked.vertical>input:disabled+.InputNumber:disabled:not(.vertical),.linked.vertical>.InputNumber:disabled:not(.vertical)+.InputNumber:disabled:not(.vertical),.InputNumber.vertical>.Input__area.linked.vertical>input:disabled+entry:disabled,.linked.vertical>.InputNumber:disabled:not(.vertical)+entry:disabled,.InputNumber.vertical>.Input__area.linked.vertical>.Input:disabled+input:disabled,.linked.vertical>.Input:disabled+.InputNumber:disabled:not(.vertical),.linked.vertical>.Input:disabled+entry:disabled{border-top-color:#f0eeed}.InputNumber.vertical>.Input__area.linked.vertical>input+input.dnd-active:not(:only-child),.InputNumber.vertical>.Input__area.linked.vertical>.InputNumber:not(.vertical)+input.dnd-active:not(:only-child),.InputNumber.vertical>.Input__area.linked.vertical>input+.dnd-active.InputNumber:not(:only-child):not(.vertical),.linked.vertical>.InputNumber:not(.vertical)+.dnd-active.InputNumber:not(:only-child):not(.vertical),.InputNumber.vertical>.Input__area.linked.vertical>input+entry.dnd-active:not(:only-child),.linked.vertical>.InputNumber:not(.vertical)+entry.dnd-active:not(:only-child),.InputNumber.vertical>.Input__area.linked.vertical>.Input+input.dnd-active:not(:only-child),.linked.vertical>.Input+.dnd-active.InputNumber:not(:only-child):not(.vertical),.linked.vertical>.Input+entry.dnd-active:not(:only-child){border-top-color:#2ec27e}.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+input,.InputNumber.vertical>.Input__area.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+input,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+.InputNumber:not(.vertical),.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+.InputNumber:not(.vertical),.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+entry,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+entry,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+.Input,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+.Input,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+menubutton>.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+menubutton>.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+.Dropdown>.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+.Dropdown>.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+colorbutton>.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+colorbutton>.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+fontbutton>.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+fontbutton>.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+filechooserbutton>.Button,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+filechooserbutton>.Button,.InputNumber.vertical>.Input__area.linked.vertical>input.dnd-active:not(:only-child)+combobox>box>.Button.combo,.linked.vertical>.dnd-active.InputNumber:not(:only-child):not(.vertical)+combobox>box>.Button.combo,.InputNumber.vertical>.Input__area.linked.vertical>.Input.dnd-active:not(:only-child)+input,.linked.vertical>.Input.dnd-active:not(:only-child)+.InputNumber:not(.vertical),.linked.vertical>.Input.dnd-active:not(:only-child)+entry,.linked.vertical>.Input.dnd-active:not(:only-child)+.Input,.linked.vertical>.Input.dnd-active:not(:only-child)+.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+menubutton>.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+.Dropdown>.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+colorbutton>.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+fontbutton>.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+filechooserbutton>.Button,.linked.vertical>.Input.dnd-active:not(:only-child)+filechooserbutton>combobox>box>.Button.combo,.linked.vertical>.Input.dnd-active:not(:only-child)+appchooserbutton>combobox>box>.Button.combo,.linked.vertical>.Input.dnd-active:not(:only-child)+combobox>box>.Button.combo{border-top-color:#2ec27e}.InputGroup{display:flex;flex-direction:row}.table .Input:focus-within:dir(rtl),.table .Input:focus-within:dir(ltr){background-color:#fff;transition-property:color,background}.table .Input.flat,.table .Input{border-radius:0;background-image:none;background-color:#fff}.table .Input.flat:focus-within,.table .Input:focus-within{border-color:#3584e4}.TextArea{display:inline-block;padding:0;height:min-content !important;width:min-content !important}.TextArea>textarea{border:none;background:rgba(0,0,0,0);padding:0 .5em;line-height:1.5em}.TextArea>textarea:focus{outline:none}editablelabel>stack>text{color:#000;border-color:#cdc7c2;background-color:#fff}@keyframes needs_attention{from{background-image:radial-gradient(farthest-side, #3584e4 0%, rgba(53, 132, 228, 0) 0%)}to{background-image:radial-gradient(farthest-side, #3584e4 95%, rgba(53, 132, 228, 0))}}.Notebook .Notebook__arrow,.control-buttons button,.Button{position:relative;display:inline-flex;justify-content:center;align-items:center;border:1px solid;border-radius:5px;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);height:28px;min-height:28px;min-width:16px;padding:4px 9px;user-select:none;color:#2e3436;outline-color:rgba(53,132,228,.5);border-color:#cdc7c2;border-bottom-color:#bfb8b1;background-color:#f6f5f4;box-shadow:inset 0 1px #fff,0 1px 2px rgba(0,0,0,.07)}.Notebook .mini.Notebook__arrow,.control-buttons button.mini,.Button.mini{height:18px;min-height:18px;min-width:18px;font-size:11px;--icon-size: 12px}.Notebook .small.Notebook__arrow,.control-buttons button.small,.Button.small{height:22px;min-height:22px;min-width:22px;font-size:12px;--icon-size: 13px}.Notebook .medium.Notebook__arrow,.control-buttons button.medium,.Button.medium{height:28px;min-height:28px;min-width:28px;font-size:14px;--icon-size: 16px}.Notebook .large.Notebook__arrow,.control-buttons button.large,.Button.large{height:36px;min-height:36px;min-width:36px;font-size:18px;--icon-size: 20px}.Notebook .huge.Notebook__arrow,.control-buttons button.huge,.Button.huge{height:42px;min-height:42px;min-width:42px;font-size:20px;--icon-size: 23px}.Notebook .mega.Notebook__arrow,.control-buttons button.mega,.Button.mega{height:58px;min-height:58px;min-width:58px;font-size:28px;--icon-size: 32px}.Notebook .Notebook__arrow,.control-buttons button,.Notebook .Notebook__arrow>.Label,.control-buttons button>.Label,.Button,.Button>.Label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.Notebook .Notebook__arrow::before,.control-buttons button::before,.Button::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Notebook .Notebook__arrow,.control-buttons button,.Button{position:relative;outline:none;overflow:visible}.Notebook .Notebook__arrow::after,.control-buttons button::after,.Button::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.Notebook .Notebook__arrow:focus:focus-visible,.control-buttons button:focus:focus-visible,.Button:focus:focus-visible{outline:none}.Notebook .Notebook__arrow:focus:focus-visible::after,.control-buttons button:focus:focus-visible::after,.Button:focus:focus-visible::after{border:2px solid rgba(53,132,228,.5);top:-2px;left:-2px;width:100%;height:100%}.Notebook .Notebook__arrow:not(:disabled):not(.disabled).hover,.control-buttons button:not(:disabled):not(.disabled).hover,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):hover,.control-buttons button:not(:disabled):not(.disabled):hover,.Button:not(:disabled):not(.disabled).hover,.Button:not(:disabled):not(.disabled):hover{color:#2e3436;border-color:#cdc7c2;border-bottom-color:#bfb8b1;background-color:#f9f9f8;box-shadow:inset 0 1px #f4f2f1,0 1px 2px rgba(0,0,0,.07);-gtk-icon-filter:brightness(1.2)}.Notebook .Notebook__arrow:not(:disabled):not(.disabled).hover::before,.control-buttons button:not(:disabled):not(.disabled).hover::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):hover::before,.control-buttons button:not(:disabled):not(.disabled):hover::before,.Button:not(:disabled):not(.disabled).hover::before,.Button:not(:disabled):not(.disabled):hover::before{opacity:0}.Notebook .Notebook__arrow:not(:disabled):not(.disabled).active,.control-buttons button:not(:disabled):not(.disabled).active,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):active,.control-buttons button:not(:disabled):not(.disabled):active,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):checked,.control-buttons button:not(:disabled):not(.disabled):checked,.Button:not(:disabled):not(.disabled).active,.Button:not(:disabled):not(.disabled):active,.Button:not(:disabled):not(.disabled):checked{color:#2e3436;border-color:#cdc7c2;background-color:#d6d1cd;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;transition-duration:50ms}.Notebook .Notebook__arrow:not(:disabled):not(.disabled).active::before,.control-buttons button:not(:disabled):not(.disabled).active::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):active::before,.control-buttons button:not(:disabled):not(.disabled):active::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):checked::before,.control-buttons button:not(:disabled):not(.disabled):checked::before,.Button:not(:disabled):not(.disabled).active::before,.Button:not(:disabled):not(.disabled):active::before,.Button:not(:disabled):not(.disabled):checked::before{opacity:0}.window-inactive .Notebook .Notebook__arrow,.Notebook .window-inactive .Notebook__arrow,.window-inactive .control-buttons button,.control-buttons .window-inactive button,.window-inactive .Button.flat,.window-inactive .Button{color:#929595;border-color:#d5d0cc;background-color:#f6f5f4;text-shadow:none;--icon-shadow: none;box-shadow:inset 0 1px rgba(255,255,255,0);transition:200ms ease-out;-gtk-icon-filter:none}.window-inactive .Notebook .Notebook__arrow::before,.Notebook .window-inactive .Notebook__arrow::before,.window-inactive .control-buttons button::before,.control-buttons .window-inactive button::before,.window-inactive .Button.flat::before,.window-inactive .Button::before{opacity:0}.window-inactive .Notebook .Notebook__arrow:active,.Notebook .window-inactive .Notebook__arrow:active,.window-inactive .control-buttons button:active,.control-buttons .window-inactive button:active,.window-inactive .Notebook .Notebook__arrow:checked,.Notebook .window-inactive .Notebook__arrow:checked,.window-inactive .control-buttons button:checked,.control-buttons .window-inactive button:checked,.window-inactive .Button.flat:active,.window-inactive .Button.flat:checked,.window-inactive .Button:active,.window-inactive .Button:checked{color:#929595;border-color:#d5d0cc;background-color:#e4e4e0;box-shadow:inset 0 1px rgba(255,255,255,0)}.window-inactive .Notebook .Notebook__arrow:active::before,.Notebook .window-inactive .Notebook__arrow:active::before,.window-inactive .control-buttons button:active::before,.control-buttons .window-inactive button:active::before,.window-inactive .Notebook .Notebook__arrow:checked::before,.Notebook .window-inactive .Notebook__arrow:checked::before,.window-inactive .control-buttons button:checked::before,.control-buttons .window-inactive button:checked::before,.window-inactive .Button.flat:active::before,.window-inactive .Button.flat:checked::before,.window-inactive .Button:active::before,.window-inactive .Button:checked::before{opacity:0}.window-inactive .Notebook .Notebook__arrow:disabled,.Notebook .window-inactive .Notebook__arrow:disabled,.window-inactive .control-buttons button:disabled,.control-buttons .window-inactive button:disabled,.window-inactive .Button.flat:disabled,.window-inactive .Button:disabled{color:#d4cfca;border-color:#d5d0cc;background-color:#f7f6f5;text-shadow:none;--icon-shadow: none;box-shadow:inset 0 1px rgba(255,255,255,0)}.window-inactive .Notebook .Notebook__arrow:disabled::before,.Notebook .window-inactive .Notebook__arrow:disabled::before,.window-inactive .control-buttons button:disabled::before,.control-buttons .window-inactive button:disabled::before,.window-inactive .Button.flat:disabled::before,.window-inactive .Button:disabled::before{opacity:0}.window-inactive .Notebook .Notebook__arrow:disabled:active,.Notebook .window-inactive .Notebook__arrow:disabled:active,.window-inactive .control-buttons button:disabled:active,.control-buttons .window-inactive button:disabled:active,.window-inactive .Notebook .Notebook__arrow:disabled:checked,.Notebook .window-inactive .Notebook__arrow:disabled:checked,.window-inactive .control-buttons button:disabled:checked,.control-buttons .window-inactive button:disabled:checked,.window-inactive .Button.flat:disabled:active,.window-inactive .Button.flat:disabled:checked,.window-inactive .Button:disabled:active,.window-inactive .Button:disabled:checked{color:#d4cfca;border-color:#d5d0cc;background-color:#e4e4e0;box-shadow:inset 0 1px rgba(255,255,255,0)}.window-inactive .Notebook .Notebook__arrow:disabled:active::before,.Notebook .window-inactive .Notebook__arrow:disabled:active::before,.window-inactive .control-buttons button:disabled:active::before,.control-buttons .window-inactive button:disabled:active::before,.window-inactive .Notebook .Notebook__arrow:disabled:checked::before,.Notebook .window-inactive .Notebook__arrow:disabled:checked::before,.window-inactive .control-buttons button:disabled:checked::before,.control-buttons .window-inactive button:disabled:checked::before,.window-inactive .Button.flat:disabled:active::before,.window-inactive .Button.flat:disabled:checked::before,.window-inactive .Button:disabled:active::before,.window-inactive .Button:disabled:checked::before{opacity:0}.Notebook .Notebook__arrow:disabled,.control-buttons button:disabled,.Notebook .disabled.Notebook__arrow,.control-buttons button.disabled,.Button:disabled,.Button.disabled{color:#929595;border-color:#d5d0cc;background-color:#f7f6f5;text-shadow:none;--icon-shadow: none;--icon-color: #929595;box-shadow:inset 0 1px rgba(255,255,255,0)}.Notebook .Notebook__arrow:disabled::before,.control-buttons button:disabled::before,.Notebook .disabled.Notebook__arrow::before,.control-buttons button.disabled::before,.Button:disabled::before,.Button.disabled::before{opacity:0}.Notebook .Notebook__arrow:disabled.active,.control-buttons button:disabled.active,.Notebook .Notebook__arrow:disabled:active,.control-buttons button:disabled:active,.Notebook .Notebook__arrow:disabled:checked,.control-buttons button:disabled:checked,.Notebook .disabled.active.Notebook__arrow,.control-buttons button.disabled.active,.Notebook .disabled.Notebook__arrow:active,.control-buttons button.disabled:active,.Notebook .disabled.Notebook__arrow:checked,.control-buttons button.disabled:checked,.Button:disabled.active,.Button:disabled:active,.Button:disabled:checked,.Button.disabled.active,.Button.disabled:active,.Button.disabled:checked{color:#929595;border-color:#d5d0cc;background-color:#e4e4e0;box-shadow:inset 0 1px rgba(255,255,255,0)}.Notebook .Notebook__arrow:disabled.active::before,.control-buttons button:disabled.active::before,.Notebook .Notebook__arrow:disabled:active::before,.control-buttons button:disabled:active::before,.Notebook .Notebook__arrow:disabled:checked::before,.control-buttons button:disabled:checked::before,.Notebook .disabled.active.Notebook__arrow::before,.control-buttons button.disabled.active::before,.Notebook .disabled.Notebook__arrow:active::before,.control-buttons button.disabled:active::before,.Notebook .disabled.Notebook__arrow:checked::before,.control-buttons button.disabled:checked::before,.Button:disabled.active::before,.Button:disabled:active::before,.Button:disabled:checked::before,.Button.disabled.active::before,.Button.disabled:active::before,.Button.disabled:checked::before{opacity:0}button.sidebar-button,.Notebook .Notebook__arrow,.control-buttons button,.Button.flat{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;transition:none}button.sidebar-button::before,.Notebook .Notebook__arrow::before,.control-buttons button::before,.Button.flat::before{opacity:0}button.sidebar-button:not(:disabled):not(.disabled).hover,.Notebook .Notebook__arrow:not(:disabled):not(.disabled).hover,.control-buttons button:not(:disabled):not(.disabled).hover,button.sidebar-button:not(:disabled):not(.disabled):hover,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):hover,.control-buttons button:not(:disabled):not(.disabled):hover,.Button.flat:not(:disabled):not(.disabled).hover,.Button.flat:not(:disabled):not(.disabled):hover{border-color:rgba(0,0,0,0);box-shadow:none;text-shadow:none;background-color:#e4e1de;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);transition-duration:500ms}button.sidebar-button:not(:disabled):not(.disabled).hover::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled).hover::before,.control-buttons button:not(:disabled):not(.disabled).hover::before,button.sidebar-button:not(:disabled):not(.disabled):hover::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):hover::before,.control-buttons button:not(:disabled):not(.disabled):hover::before,.Button.flat:not(:disabled):not(.disabled).hover::before,.Button.flat:not(:disabled):not(.disabled):hover::before{opacity:0}button.sidebar-button:not(:disabled):not(.disabled):active,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):active,.control-buttons button:not(:disabled):not(.disabled):active,button.sidebar-button:not(:disabled):not(.disabled):checked,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):checked,.control-buttons button:not(:disabled):not(.disabled):checked,.Button.flat:not(:disabled):not(.disabled):active,.Button.flat:not(:disabled):not(.disabled):checked{border-color:rgba(0,0,0,0);box-shadow:none;text-shadow:none;background-color:#b1a9a0;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}button.sidebar-button:not(:disabled):not(.disabled):active::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):active::before,.control-buttons button:not(:disabled):not(.disabled):active::before,button.sidebar-button:not(:disabled):not(.disabled):checked::before,.Notebook .Notebook__arrow:not(:disabled):not(.disabled):checked::before,.control-buttons button:not(:disabled):not(.disabled):checked::before,.Button.flat:not(:disabled):not(.disabled):active::before,.Button.flat:not(:disabled):not(.disabled):checked::before{opacity:0}button.sidebar-button:disabled,.Notebook .Notebook__arrow:disabled,.control-buttons button:disabled,button.disabled.sidebar-button,.Notebook .disabled.Notebook__arrow,.control-buttons button.disabled,.Button.flat:disabled,.Button.flat.disabled{color:#829095}button.sidebar-button:backdrop,.Notebook .Notebook__arrow:backdrop,.control-buttons button:backdrop,button.sidebar-button:disabled,.Notebook .Notebook__arrow:disabled,.control-buttons button:disabled,.Button.flat:backdrop,.Button.flat:disabled,.Button.flat:backdrop:disabled{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}button.sidebar-button:backdrop::before,.Notebook .Notebook__arrow:backdrop::before,.control-buttons button:backdrop::before,button.sidebar-button:disabled::before,.Notebook .Notebook__arrow:disabled::before,.control-buttons button:disabled::before,.Button.flat:backdrop::before,.Button.flat:disabled::before,.Button.flat:backdrop:disabled::before{opacity:0}.Notebook .link.Notebook__arrow,.control-buttons button.link,.Button.link{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#1b6acb;border-width:0}.Notebook .link.Notebook__arrow::before,.control-buttons button.link::before,.Button.link::before{opacity:0}.Notebook .link.Notebook__arrow:not(:disabled):not(.disabled),.control-buttons button.link:not(:disabled):not(.disabled),.Button.link:not(:disabled):not(.disabled),.Button.link:not(:disabled):not(.disabled):hover,.Button.link:not(:disabled):not(.disabled):active,.Button.link:not(:disabled):not(.disabled):checked{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#1b6acb;text-shadow:none}.Notebook .link.Notebook__arrow:not(:disabled):not(.disabled)::before,.control-buttons button.link:not(:disabled):not(.disabled)::before,.Button.link:not(:disabled):not(.disabled)::before,.Button.link:not(:disabled):not(.disabled):hover::before,.Button.link:not(:disabled):not(.disabled):active::before,.Button.link:not(:disabled):not(.disabled):checked::before{opacity:0}.Notebook .link.Notebook__arrow:disabled,.control-buttons button.link:disabled,.Notebook .link.disabled.Notebook__arrow,.control-buttons button.link.disabled,.Button.link:disabled,.Button.link.disabled{color:rgba(27,106,203,.6);cursor:default}.Notebook .image-button.Notebook__arrow,.control-buttons button.image-button,.Button.image-button{padding-left:5px;padding-right:5px}.Notebook .text-button.Notebook__arrow,.control-buttons button.text-button,.Button.text-button{padding-left:16px;padding-right:16px}.Notebook .text-button.Notebook__arrow>.Button__icon,.control-buttons button.text-button>.Button__icon,.Button.text-button>.Button__icon{margin-right:.5em}.Notebook .text-button.image-button.Notebook__arrow,.control-buttons button.text-button.image-button,.Button.text-button.image-button{padding-left:8px;padding-right:8px}.Notebook .text-button.image-button.Notebook__arrow .Label,.control-buttons button.text-button.image-button .Label,.Button.text-button.image-button .Label{padding-left:8px;padding-right:8px}.Notebook .dnd-active.Notebook__arrow,.control-buttons button.dnd-active,.Button.dnd-active{color:#2ec27e;border-color:#2ec27e;box-shadow:inset 0 0 0 1px #2ec27e}row.selected .Button{border-color:#185fb4}row.selected button.sidebar-button:not(:active):not(:checked):not(:hover):not(disabled),row.selected .Button.flat:not(:active):not(:checked):not(:hover):not(disabled){color:#fff;border-color:rgba(0,0,0,0)}row.selected button.sidebar-button:not(:active):not(:checked):not(:hover):not(disabled):backdrop,row.selected .Button.flat:not(:active):not(:checked):not(:hover):not(disabled):backdrop{color:#fcfcfc}.Button.osd{min-width:26px;min-height:32px;color:#eeeeec;border-radius:5px;color:#eeeeec;outline-color:rgba(53,132,228,.5);border-color:rgba(0,0,0,.7);background-color:rgba(53,53,53,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none;border:none;box-shadow:none}.Button.osd.image-button{min-width:30px}.Button.osd.image-button:only-child{margin:4px;border-radius:50%;box-shadow:0 1px 2px rgba(0,0,0,.2)}.Button.osd::before{opacity:0}.Button.osd:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(27,27,27,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none;border:none;box-shadow:none}.Button.osd:hover::before{opacity:0}.Button.osd:active,.Button.osd:checked{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(2,2,2,.7);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none;border:none;box-shadow:none}.Button.osd:active::before,.Button.osd:checked::before{opacity:0}.app-notification button,.osd .Button{color:#eeeeec;outline-color:rgba(53,132,228,.5);border-color:rgba(0,0,0,.7);background-color:rgba(53,53,53,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.app-notification button::before,.osd .Button::before{opacity:0}.app-notification button:hover,.osd .Button:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(27,27,27,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.app-notification button:hover::before,.osd .Button:hover::before{opacity:0}.app-notification button:active,.app-notification button:checked,.osd .Button:active:backdrop,.osd .Button:active,.osd .Button:checked:backdrop,.osd .Button:checked{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(2,2,2,.7);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.app-notification button:active::before,.app-notification button:checked::before,.osd .Button:active:backdrop::before,.osd .Button:active::before,.osd .Button:checked:backdrop::before,.osd .Button:checked::before{opacity:0}.app-notification button:disabled,.osd .Button:disabled:backdrop,.osd .Button:disabled{color:#929291;border-color:rgba(0,0,0,.7);background-color:rgba(72,72,71,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.app-notification button:disabled::before,.osd .Button:disabled:backdrop::before,.osd .Button:disabled::before{opacity:0}.app-notification button.flat,.osd .Button.flat{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;box-shadow:none;text-shadow:0 1px #000;--icon-shadow: 0 1px black}.app-notification button.flat::before,.osd .Button.flat::before{opacity:0}.app-notification button.flat:hover,.osd .Button.flat:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(27,27,27,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.app-notification button.flat:hover::before,.osd .Button.flat:hover::before{opacity:0}.app-notification button.flat:disabled,.osd .Button.flat:disabled{color:#929291;border-color:rgba(0,0,0,.7);background-color:rgba(72,72,71,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none;background-image:none;border-color:rgba(0,0,0,0);box-shadow:none}.app-notification button.flat:disabled::before,.osd .Button.flat:disabled::before{opacity:0}.app-notification button.flat:active,.app-notification button.flat:checked,.osd .Button.flat:active,.osd .Button.flat:checked{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(2,2,2,.7);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.app-notification button.flat:active::before,.app-notification button.flat:checked::before,.osd .Button.flat:active::before,.osd .Button.flat:checked::before{opacity:0}.Button.suggested-action{color:#fff;outline-color:rgba(255,255,255,.8);border-color:#1b6acb;border-bottom-color:#15539e;background-color:#3584e4;box-shadow:inset 0 1px rgba(255,255,255,.2),0 1px 2px rgba(0,0,0,.07)}.Button.suggested-action::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Button.suggested-action{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Button.suggested-action:focus:focus-visible{outline-color:rgba(255,255,255,.8);outline-width:2px;outline-offset:-2px}.Button.suggested-action.flat{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#3584e4}.Button.suggested-action.flat::before{opacity:0}.Button.suggested-action:not(:disabled):not(.disabled).hover,.Button.suggested-action:not(:disabled):not(.disabled):hover{color:#fff;border-color:#1b6acb;border-bottom-color:#15539e;background-color:#3c88e5;box-shadow:inset 0 1px #3181e3,0 1px 2px rgba(0,0,0,.07)}.Button.suggested-action:not(:disabled):not(.disabled).hover::before,.Button.suggested-action:not(:disabled):not(.disabled):hover::before{opacity:0}.Button.suggested-action:not(:disabled):not(.disabled).active,.Button.suggested-action:not(:disabled):not(.disabled):active,.Button.suggested-action:not(:disabled):not(.disabled):checked{color:#fff;border-color:#1b6acb;background-color:#1961b9;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Button.suggested-action:not(:disabled):not(.disabled).active::before,.Button.suggested-action:not(:disabled):not(.disabled):active::before,.Button.suggested-action:not(:disabled):not(.disabled):checked::before{opacity:0}.Button.suggested-action.flat:disabled{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:rgba(53,132,228,.8)}.Button.suggested-action.flat:disabled::before{opacity:0}.Button.suggested-action:disabled{color:#929595;border-color:#d5d0cc;background-color:#f7f6f5;text-shadow:none;--icon-shadow: none;--icon-color: #929595;box-shadow:inset 0 1px rgba(255,255,255,0)}.Button.suggested-action:disabled::before{opacity:0}.Button.suggested-action:disabled:active,.Button.suggested-action:disabled:checked{color:#acccf4;border-color:#1b6acb;background-color:#2f80e3;box-shadow:inset 0 1px rgba(255,255,255,0)}.Button.suggested-action:disabled:active::before,.Button.suggested-action:disabled:checked::before{opacity:0}.osd .Button.suggested-action{color:#eeeeec;outline-color:rgba(255,255,255,.8);border-color:rgba(0,0,0,.7);background-color:rgba(53,132,228,.5);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .Button.suggested-action::before{opacity:0}.osd .Button.suggested-action:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(53,132,228,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .Button.suggested-action:hover::before{opacity:0}.osd .Button.suggested-action:active:backdrop,.osd .Button.suggested-action:active,.osd .Button.suggested-action:checked:backdrop,.osd .Button.suggested-action:checked{color:#fff;border-color:rgba(0,0,0,.7);background-color:#3584e4;background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .Button.suggested-action:active:backdrop::before,.osd .Button.suggested-action:active::before,.osd .Button.suggested-action:checked:backdrop::before,.osd .Button.suggested-action:checked::before{opacity:0}.osd .Button.suggested-action:disabled:backdrop,.osd .Button.suggested-action:disabled{color:#929291;border-color:rgba(0,0,0,.7);background-color:rgba(72,72,71,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .Button.suggested-action:disabled:backdrop::before,.osd .Button.suggested-action:disabled::before{opacity:0}.Button.destructive-action{color:#fff;outline-color:rgba(255,255,255,.8);border-color:#b2161d;border-bottom-color:#851015;background-color:#e01b24;box-shadow:inset 0 1px rgba(255,255,255,.1),0 1px 2px rgba(0,0,0,.07)}.Button.destructive-action::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Button.destructive-action{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Button.destructive-action:focus:focus-visible{outline-color:rgba(255,255,255,.8);outline-width:2px;outline-offset:-2px}.Button.destructive-action.flat{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#e01b24}.Button.destructive-action.flat::before{opacity:0}.Button.destructive-action:not(:disabled):not(.disabled).hover,.Button.destructive-action:not(:disabled):not(.disabled):hover{color:#fff;border-color:#b2161d;border-bottom-color:#851015;background-color:#e41f28;box-shadow:inset 0 1px #db1a23,0 1px 2px rgba(0,0,0,.07)}.Button.destructive-action:not(:disabled):not(.disabled).hover::before,.Button.destructive-action:not(:disabled):not(.disabled):hover::before{opacity:0}.Button.destructive-action:not(:disabled):not(.disabled).active,.Button.destructive-action:not(:disabled):not(.disabled):active,.Button.destructive-action:not(:disabled):not(.disabled):checked{color:#fff;border-color:#b2161d;background-color:#a0131a;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Button.destructive-action:not(:disabled):not(.disabled).active::before,.Button.destructive-action:not(:disabled):not(.disabled):active::before,.Button.destructive-action:not(:disabled):not(.disabled):checked::before{opacity:0}.Button.destructive-action.flat:disabled{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:rgba(224,27,36,.8)}.Button.destructive-action.flat:disabled::before{opacity:0}.Button.destructive-action:disabled{color:#929595;border-color:#d5d0cc;background-color:#f7f6f5;text-shadow:none;--icon-shadow: none;--icon-color: #929595;box-shadow:inset 0 1px rgba(255,255,255,0)}.Button.destructive-action:disabled::before{opacity:0}.Button.destructive-action:disabled:active,.Button.destructive-action:disabled:checked{color:#f1a5a9;border-color:#b2161d;background-color:#dc1d27;box-shadow:inset 0 1px rgba(255,255,255,0)}.Button.destructive-action:disabled:active::before,.Button.destructive-action:disabled:checked::before{opacity:0}.osd .Button.destructive-action{color:#eeeeec;outline-color:rgba(255,255,255,.8);border-color:rgba(0,0,0,.7);background-color:rgba(224,27,36,.5);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .Button.destructive-action::before{opacity:0}.osd .Button.destructive-action:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(224,27,36,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .Button.destructive-action:hover::before{opacity:0}.osd .Button.destructive-action:active:backdrop,.osd .Button.destructive-action:active,.osd .Button.destructive-action:checked:backdrop,.osd .Button.destructive-action:checked{color:#fff;border-color:rgba(0,0,0,.7);background-color:#e01b24;background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .Button.destructive-action:active:backdrop::before,.osd .Button.destructive-action:active::before,.osd .Button.destructive-action:checked:backdrop::before,.osd .Button.destructive-action:checked::before{opacity:0}.osd .Button.destructive-action:disabled:backdrop,.osd .Button.destructive-action:disabled{color:#929291;border-color:rgba(0,0,0,.7);background-color:rgba(72,72,71,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .Button.destructive-action:disabled:backdrop::before,.osd .Button.destructive-action:disabled::before{opacity:0}.StackSwitcher>.Button>.Label{padding:0 6px;margin:0 -6px}.StackSwitcher>.Button>.Image{padding:3px 6px;margin:-3px -6px}.linked:not(.vertical)>.Button:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.linked:not(.vertical)>.Button:not(:last-child){border-right-style:none;border-top-right-radius:0;border-bottom-right-radius:0}.linked.vertical>.Button:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.linked.vertical>.Button:not(:last-child){border-bottom-style:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.Button.circular{min-width:32px;min-height:32px;padding:0;border-radius:9999px}.Button.circular .Label{padding:0}.stack-sidebar .List__item.needs-attention>.Label,.StackSwitcher>.Button.needs-attention>.Label,.StackSwitcher>.Button.needs-attention>.Image{animation:needs_attention 150ms ease-in;background-image:radial-gradient(farthest-side, #3584e4 96%, rgba(53, 132, 228, 0));background-size:5px 5px,5px 5px;background-repeat:no-repeat;background-position:right 3px,right 4px}.stack-sidebar .List__item.needs-attention>.Label:backdrop,.StackSwitcher>.Button.needs-attention>.Label:backdrop,.StackSwitcher>.Button.needs-attention>.Image:backdrop{background-size:6px 6px,0 0}.stack-sidebar .List__item.needs-attention>.Label:dir(rtl),.StackSwitcher>.Button.needs-attention>.Label:dir(rtl),.StackSwitcher>.Button.needs-attention>.Image:dir(rtl){background-position:left 3px,left 4px}.linked:not(.vertical)>menubutton:dir(ltr):not(:first-child)>button,.linked:not(.vertical)>.Dropdown:dir(ltr):not(:first-child)>button,.linked:not(.vertical)>colorbutton:dir(ltr):not(:first-child)>button,.linked:not(.vertical)>fontbutton:dir(ltr):not(:first-child)>button,.linked:not(.vertical)>filechooserbutton:dir(ltr):not(:first-child)>button{border-top-left-radius:0;border-bottom-left-radius:0}.linked:not(.vertical)>menubutton:dir(ltr):not(:last-child)>button,.linked:not(.vertical)>.Dropdown:dir(ltr):not(:last-child)>button,.linked:not(.vertical)>colorbutton:dir(ltr):not(:last-child)>button,.linked:not(.vertical)>fontbutton:dir(ltr):not(:last-child)>button,.linked:not(.vertical)>filechooserbutton:dir(ltr):not(:last-child)>button{border-right-style:none;border-top-right-radius:0;border-bottom-right-radius:0}.linked:not(.vertical)>menubutton:dir(rtl):not(:first-child)>button,.linked:not(.vertical)>.Dropdown:dir(rtl):not(:first-child)>button,.linked:not(.vertical)>colorbutton:dir(rtl):not(:first-child)>button,.linked:not(.vertical)>fontbutton:dir(rtl):not(:first-child)>button,.linked:not(.vertical)>filechooserbutton:dir(rtl):not(:first-child)>button{border-right-style:none;border-top-right-radius:0;border-bottom-right-radius:0}.linked:not(.vertical)>menubutton:dir(rtl):not(:last-child)>button,.linked:not(.vertical)>.Dropdown:dir(rtl):not(:last-child)>button,.linked:not(.vertical)>colorbutton:dir(rtl):not(:last-child)>button,.linked:not(.vertical)>fontbutton:dir(rtl):not(:last-child)>button,.linked:not(.vertical)>filechooserbutton:dir(rtl):not(:last-child)>button{border-top-left-radius:0;border-bottom-left-radius:0}.linked.vertical>menubutton:not(:first-child)>button,.linked.vertical>.Dropdown:not(:first-child)>button,.linked.vertical>colorbutton:not(:first-child)>button,.linked.vertical>fontbutton:not(:first-child)>button,.linked.vertical>filechooserbutton:not(:first-child)>button{border-top-left-radius:0;border-top-right-radius:0}.linked.vertical>menubutton:not(:last-child)>button,.linked.vertical>.Dropdown:not(:last-child)>button,.linked.vertical>colorbutton:not(:last-child)>button,.linked.vertical>fontbutton:not(:last-child)>button,.linked.vertical>filechooserbutton:not(:last-child)>button{border-bottom-style:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.ModelItem,.ModelButton,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable{min-height:26px;padding-left:5px;padding-right:5px}.ModelButton,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;border:none;border-radius:0;text-align:left}.ModelButton::before,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable::before{opacity:0}.ModelButton.focus,.navigation-sidebar:not(.increase-specificity)>.focus.List__item.activatable,.ModelButton:focus,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable:focus,.ModelButton.hover,.navigation-sidebar:not(.increase-specificity)>.hover.List__item.activatable,.ModelButton:hover,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable:hover{outline:none;background-color:#efedec}.ModelButton.active,.navigation-sidebar:not(.increase-specificity)>.active.List__item.activatable,.ModelButton:active,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable:active{border-color:rgba(0,0,0,0);box-shadow:none;text-shadow:none;background-color:#b1a9a0}.ModelButton.active::before,.navigation-sidebar:not(.increase-specificity)>.active.List__item.activatable::before,.ModelButton:active::before,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable:active::before{opacity:0}.ModelButton.disabled,.navigation-sidebar:not(.increase-specificity)>.disabled.List__item.activatable,.ModelButton:disabled,.navigation-sidebar:not(.increase-specificity)>.List__item.activatable:disabled{color:#929595}.Toolbar button{margin:1px;color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Toolbar button::before{opacity:0}.Toolbar button:hover{color:#2e3436;border-color:#cdc7c2;border-bottom-color:#bfb8b1;background-color:#f9f9f8;box-shadow:inset 0 1px #f4f2f1,0 1px 2px rgba(0,0,0,.07)}.Toolbar button:hover::before{opacity:0}.Toolbar button:active{color:#2e3436;border-color:#cdc7c2;background-color:#d6d1cd;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Toolbar button:active::before{opacity:0}.Toolbar button:disabled{color:#929595;border-color:#d5d0cc;background-color:#f7f6f5;text-shadow:none;--icon-shadow: none;--icon-color: #929595;box-shadow:inset 0 1px rgba(255,255,255,0)}.Toolbar button:disabled::before{opacity:0}.Toolbar button:backdrop{color:#929595;border-color:#d5d0cc;background-color:#f6f5f4;text-shadow:none;--icon-shadow: none;box-shadow:inset 0 1px rgba(255,255,255,0)}.Toolbar button:backdrop::before{opacity:0}.Toolbar button:backdrop:disabled{color:#d4cfca;border-color:#d5d0cc;background-color:#f7f6f5;text-shadow:none;--icon-shadow: none;box-shadow:inset 0 1px rgba(255,255,255,0)}.Toolbar button:backdrop:disabled::before{opacity:0}button.color{padding:4px}button.color>colorswatch:only-child{box-shadow:0 1px rgba(0,0,0,.1)}button.color>colorswatch:only-child,button.color>colorswatch:only-child>overlay{border-radius:0}.osd button.color>colorswatch:only-child{box-shadow:none}.osd button.color:disabled colorswatch:only-child,.osd button.color:active colorswatch:only-child,.osd button.color:checked colorswatch:only-child,button.color:disabled colorswatch:only-child,button.color:active colorswatch:only-child,button.color:checked colorswatch:only-child{box-shadow:none}.Menu .Box.circular-buttons .Button.circular,.list>.Row button.image-button:not(.flat){color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;border:1px solid rgba(205,199,194,.5)}.Menu .Box.circular-buttons .Button.circular::before,.list>.Row button.image-button:not(.flat)::before{opacity:0}.Menu .Box.circular-buttons .Button.circular:hover,.list>.Row button.image-button:not(.flat):hover{color:#2e3436;border-color:#cdc7c2;border-bottom-color:#bfb8b1;background-color:#f9f9f8;box-shadow:inset 0 1px #f4f2f1,0 1px 2px rgba(0,0,0,.07)}.Menu .Box.circular-buttons .Button.circular:hover::before,.list>.Row button.image-button:not(.flat):hover::before{opacity:0}.Menu .Box.circular-buttons .Button.circular:active,.Menu .Box.circular-buttons .Button.circular:checked,.list>.Row button.image-button:not(.flat):active,.list>.Row button.image-button:not(.flat):checked{color:#2e3436;border-color:#cdc7c2;background-color:#d6d1cd;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Menu .Box.circular-buttons .Button.circular:active::before,.Menu .Box.circular-buttons .Button.circular:checked::before,.list>.Row button.image-button:not(.flat):active::before,.list>.Row button.image-button:not(.flat):checked::before{opacity:0}input[type=number]{-moz-appearance:textfield}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.InputNumber{font-feature-settings:"tnum"}.InputNumber:not(.vertical){display:flex;flex-direction:row;justify-content:center;align-items:center;padding:0;border-spacing:0;width:100px}.InputNumber:not(.vertical).mini{width:54px}.InputNumber:not(.vertical).mini>.Input__area>input,.InputNumber:not(.vertical).mini>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).mini>button.InputNumber__button.down:not(.flat){width:16px}.InputNumber:not(.vertical).small{width:66px}.InputNumber:not(.vertical).small>.Input__area>input,.InputNumber:not(.vertical).small>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).small>button.InputNumber__button.down:not(.flat){width:20px}.InputNumber:not(.vertical).medium{width:84px}.InputNumber:not(.vertical).medium>.Input__area>input,.InputNumber:not(.vertical).medium>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).medium>button.InputNumber__button.down:not(.flat){width:26px}.InputNumber:not(.vertical).large{width:108px}.InputNumber:not(.vertical).large>.Input__area>input,.InputNumber:not(.vertical).large>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).large>button.InputNumber__button.down:not(.flat){width:34px}.InputNumber:not(.vertical).huge{width:126px}.InputNumber:not(.vertical).huge>.Input__area>input,.InputNumber:not(.vertical).huge>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).huge>button.InputNumber__button.down:not(.flat){width:40px}.InputNumber:not(.vertical).mega{width:174px}.InputNumber:not(.vertical).mega>.Input__area>input,.InputNumber:not(.vertical).mega>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical).mega>button.InputNumber__button.down:not(.flat){width:56px}.osd .InputNumber:not(.vertical)>.Input__area>input,.InputNumber:not(.vertical)>.Input__area>input{min-width:28px;margin:0;background:none;background-color:rgba(0,0,0,0);border:none;border-radius:0;box-shadow:none;padding:6px}.window-inactive .InputNumber:not(.vertical)>.Input__area>input.disabled,.window-inactive .InputNumber:not(.vertical)>.Input__area>input:disabled{background-color:rgba(0,0,0,0)}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat),.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat){display:flex;justify-content:center;align-items:center;height:100%;margin:0;padding-bottom:0;padding-top:0;color:#43484a;background-color:rgba(0,0,0,0);border-width:.5px;border-style:none none none solid;border-color:rgba(205,199,194,.3);border-radius:0;box-shadow:none;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(rtl),.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(rtl){border-style:none solid none none}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):not(:disabled):focus,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):not(:disabled):focus{outline:none}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):not(:disabled):hover,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):not(:disabled):hover{color:#2e3436;background-color:rgba(0,0,0,.03);box-shadow:0 -1px #ebe8e6}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):not(:disabled):active,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):not(:disabled):active{background-color:rgba(0,0,0,.1);box-shadow:inset 0 2px 2px 0px rgba(0,0,0,.08)}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):disabled,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):disabled{color:rgba(146,149,149,.3);background-color:rgba(0,0,0,0)}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(ltr):last-child,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(ltr):last-child{border-radius:0 5px 5px 0}.InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(rtl):first-child,.InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(rtl):first-child{border-radius:5px 0 0 5px}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat),.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat){color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#eeeeec;border-style:none none none solid;border-color:rgba(0,0,0,.4);border-radius:0;box-shadow:none;--icon-shadow: 0 1px black;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat)::before,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat)::before{opacity:0}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(rtl),.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(rtl){border-style:none solid none none}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):hover,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):hover{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#eeeeec;border-color:rgba(0,0,0,.5);background-color:rgba(27,27,27,.7);--icon-shadow: 0 1px black;box-shadow:none}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):hover::before,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):hover::before{opacity:0}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):disabled,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):disabled{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#929291;border-color:rgba(0,0,0,.5);--icon-shadow: none;box-shadow:none}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):disabled::before,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):disabled::before{opacity:0}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(ltr):last-child,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(ltr):last-child{border-radius:0 5px 5px 0}.osd .InputNumber:not(.vertical)>button.InputNumber__button.up:not(.flat):dir(rtl):first-child,.osd .InputNumber:not(.vertical)>button.InputNumber__button.down:not(.flat):dir(rtl):first-child{border-radius:5px 0 0 5px}.InputNumber.vertical{display:inline-flex;flex-direction:column;min-width:40px;width:40px}.InputNumber.vertical.mini{width:26px}.InputNumber.vertical.mini>.Input__area>input,.InputNumber.vertical.mini>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.mini>button.InputNumber__button.down:not(.flat){min-height:18px}.InputNumber.vertical.small{width:31px}.InputNumber.vertical.small>.Input__area>input,.InputNumber.vertical.small>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.small>button.InputNumber__button.down:not(.flat){min-height:22px}.InputNumber.vertical.medium{width:40px}.InputNumber.vertical.medium>.Input__area>input,.InputNumber.vertical.medium>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.medium>button.InputNumber__button.down:not(.flat){min-height:28px}.InputNumber.vertical.large{width:51px}.InputNumber.vertical.large>.Input__area>input,.InputNumber.vertical.large>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.large>button.InputNumber__button.down:not(.flat){min-height:36px}.InputNumber.vertical.huge{width:60px}.InputNumber.vertical.huge>.Input__area>input,.InputNumber.vertical.huge>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.huge>button.InputNumber__button.down:not(.flat){min-height:42px}.InputNumber.vertical.mega{width:83px}.InputNumber.vertical.mega>.Input__area>input,.InputNumber.vertical.mega>button.InputNumber__button.up:not(.flat),.InputNumber.vertical.mega>button.InputNumber__button.down:not(.flat){min-height:58px}.InputNumber.vertical.dnd-active{border-color:rgba(0,0,0,0);box-shadow:none}.InputNumber.vertical>.Input__area{order:2}.InputNumber.vertical>.Input__area{position:relative;outline:none;overflow:visible}.InputNumber.vertical>.Input__area::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.InputNumber.vertical>.Input__area:focus-within{outline:none}.InputNumber.vertical>.Input__area:focus-within::after{border:2px solid rgba(53,132,228,.5);top:-2px;left:-2px;width:100%;height:100%}.InputNumber.vertical>.Input__area>input{width:100%;padding:0;border-radius:0;text-align:center}.InputNumber.vertical>.Input__area>input>block-cursor{color:#fff;background-color:#000}.InputNumber.vertical>button{width:100%;padding:0}.InputNumber.vertical>button.up{order:1;border-bottom-style:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.InputNumber.vertical>button.down{order:3;border-top-style:none;border-top-left-radius:0;border-top-right-radius:0}.osd .InputNumber.vertical>button:first-child{color:#eeeeec;outline-color:rgba(53,132,228,.5);border-color:rgba(0,0,0,.7);background-color:rgba(53,53,53,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .InputNumber.vertical>button:first-child::before{opacity:0}.osd .InputNumber.vertical>button:first-child:hover{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(27,27,27,.7);background-clip:padding-box;box-shadow:inset 0 1px rgba(255,255,255,.1);text-shadow:none;--icon-shadow: none}.osd .InputNumber.vertical>button:first-child:hover::before{opacity:0}.osd .InputNumber.vertical>button:first-child:active{color:#fff;border-color:rgba(0,0,0,.7);background-color:rgba(2,2,2,.7);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .InputNumber.vertical>button:first-child:active::before{opacity:0}.osd .InputNumber.vertical>button:first-child:disabled{color:#929291;border-color:rgba(0,0,0,.7);background-color:rgba(72,72,71,.5);background-clip:padding-box;box-shadow:none;text-shadow:none;--icon-shadow: none}.osd .InputNumber.vertical>button:first-child:disabled::before{opacity:0}.TreeView .InputNumber:not(.vertical){min-height:0;border-style:none;border-radius:0}.TreeView .InputNumber:not(.vertical)>text{min-height:0;padding:1px 2px}.InputNumber>input{font-feature-settings:"tnum"}.Dropdown{display:flex;flex-direction:row;min-width:120px}.Dropdown.Button>.Label{flex:1;text-align:left}.Dropdown.Button>.Icon{flex:0}.Dropdown.open{background-color:#fff}.Dropdown.open.popover-bottom{border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-color:rgba(0,0,0,0)}.Dropdown.open.popover-top{border-top-left-radius:0;border-top-right-radius:0;border-top-color:rgba(0,0,0,0)}.Dropdown.open.Button.active{color:#2e3436;border-color:#cdc7c2;border-bottom-color:#bfb8b1;background-color:#f9f9f8;box-shadow:inset 0 1px #f4f2f1,0 1px 2px rgba(0,0,0,.07);border-color:rgba(0,0,0,.23)}.Dropdown.open.Button.active::before{opacity:0}.Dropdown__menu.Popover.bottom .Popover__container{padding-top:0;border-top:none;border-top-left-radius:0;border-top-right-radius:0}.Dropdown__menu.Popover.top .Popover__container{padding-top:0;border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.Dropdown__menu.Popover .Popover__container .Dropdown__item{padding-left:9px;padding-right:9px;padding:0 12px}.Dropdown__menu.Popover .Popover__container .ModelButton.selected,.Dropdown__menu.Popover .Popover__container .navigation-sidebar:not(.increase-specificity)>.selected.List__item.activatable{font-weight:700;outline-color:rgba(255,255,255,.8);color:#000;background-color:#efedec}.Dropdown__menu.Popover .dropdown-searchbar{padding:6px;border-bottom:1px solid #cdc7c2}.SearchBar,.Toolbar{padding:4px;border-spacing:4px;background-color:#f6f5f4}.Toolbar.horizontal{display:flex;flex-direction:row}.Toolbar.vertical{display:flex;flex-direction:column;width:38px}.osd .Toolbar{background-color:rgba(0,0,0,0)}.Toolbar.osd{padding:13px;border:none;border-radius:5px;background-color:rgba(53,53,53,.7)}.Toolbar.osd.left,.Toolbar.osd.right,.Toolbar.osd.top,.Toolbar.osd.bottom{border-radius:0}.Toolbar.horizontal>.separator{display:inline-block;min-height:28px;margin:0 3px}.Toolbar.vertical>.separator{margin:3px 1px}.InfoBar{display:block;overflow:hidden;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);height:45px}.InfoBar.close{height:0}.InfoBar>.Box{padding:8px;border-spacing:12px}.InfoBar.info>.Box{border-bottom:1px solid #88afde;background-color:#c4d7ee}.InfoBar.info.activatable:hover>.Box{background-color:#d0dff2}.InfoBar.info>.Box>.Button{color:#2e3436;outline-color:rgba(255,255,255,.8);border-color:#9cbce3;border-bottom-color:#74a1d8;background-color:#c4d7ee;box-shadow:inset 0 1px rgba(255,255,255,.5),0 1px 2px rgba(0,0,0,.07)}.InfoBar.info>.Box>.Button::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.InfoBar.info>.Box>.Button.hover,.InfoBar.info>.Box>.Button:hover{color:#2e3436;border-color:#9cbce3;border-bottom-color:#74a1d8;background-color:#cadbf0;box-shadow:inset 0 1px #c0d4ed,0 1px 2px rgba(0,0,0,.07)}.InfoBar.info>.Box>.Button.hover::before,.InfoBar.info>.Box>.Button:hover::before{opacity:0}.InfoBar.info>.Box>.Button.active,.InfoBar.info>.Box>.Button:active{color:#2e3436;border-color:#9cbce3;background-color:#8cb1df;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.InfoBar.info>.Box>.Button.active::before,.InfoBar.info>.Box>.Button:active::before{opacity:0}.InfoBar.success>.Box{border-bottom:1px solid #84b399;background-color:#b4d0c0}.InfoBar.success.activatable:hover>.Box{background-color:#bdd6c8}.InfoBar.success>.Box>.Button{color:#2e3436;outline-color:rgba(255,255,255,.8);border-color:#94bca6;border-bottom-color:#75a98c;background-color:#b4d0c0;box-shadow:inset 0 1px rgba(255,255,255,.2),0 1px 2px rgba(0,0,0,.07)}.InfoBar.success>.Box>.Button::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.InfoBar.success>.Box>.Button.hover,.InfoBar.success>.Box>.Button:hover{color:#2e3436;border-color:#94bca6;border-bottom-color:#75a98c;background-color:#b8d3c4;box-shadow:inset 0 1px #b0cebe,0 1px 2px rgba(0,0,0,.07)}.InfoBar.success>.Box>.Button.hover::before,.InfoBar.success>.Box>.Button:hover::before{opacity:0}.InfoBar.success>.Box>.Button.active,.InfoBar.success>.Box>.Button:active{color:#2e3436;border-color:#94bca6;background-color:#88b59c;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.InfoBar.success>.Box>.Button.active::before,.InfoBar.success>.Box>.Button:active::before{opacity:0}.InfoBar.warning>.Box{border-bottom:1px solid #dead7d;background-color:#eed3ba}.InfoBar.warning.activatable:hover>.Box{background-color:#f1dbc6}.InfoBar.warning>.Box>.Button{color:#2e3436;outline-color:rgba(255,255,255,.8);border-color:#e4ba91;border-bottom-color:#d9a068;background-color:#eed3ba;box-shadow:inset 0 1px rgba(255,255,255,.5),0 1px 2px rgba(0,0,0,.07)}.InfoBar.warning>.Box>.Button::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.InfoBar.warning>.Box>.Button.hover,.InfoBar.warning>.Box>.Button:hover{color:#2e3436;border-color:#e4ba91;border-bottom-color:#d9a068;background-color:#efd7c0;box-shadow:inset 0 1px #edd1b6,0 1px 2px rgba(0,0,0,.07)}.InfoBar.warning>.Box>.Button.hover::before,.InfoBar.warning>.Box>.Button:hover::before{opacity:0}.InfoBar.warning>.Box>.Button.active,.InfoBar.warning>.Box>.Button:active{color:#2e3436;border-color:#e4ba91;background-color:#dfaf81;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.InfoBar.warning>.Box>.Button.active::before,.InfoBar.warning>.Box>.Button:active::before{opacity:0}.InfoBar.danger>.Box{border-bottom:1px solid #db7070;background-color:#ebadad}.InfoBar.danger.activatable:hover>.Box{background-color:#eebaba}.InfoBar.danger>.Box>.Button{color:#2e3436;outline-color:rgba(255,255,255,.8);border-color:#e08585;border-bottom-color:#d65c5c;background-color:#ebadad;box-shadow:inset 0 1px rgba(255,255,255,.2),0 1px 2px rgba(0,0,0,.07)}.InfoBar.danger>.Box>.Button::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.InfoBar.danger>.Box>.Button.hover,.InfoBar.danger>.Box>.Button:hover{color:#2e3436;border-color:#e08585;border-bottom-color:#d65c5c;background-color:#ecb4b4;box-shadow:inset 0 1px #eaa9a9,0 1px 2px rgba(0,0,0,.07)}.InfoBar.danger>.Box>.Button.hover::before,.InfoBar.danger>.Box>.Button:hover::before{opacity:0}.InfoBar.danger>.Box>.Button.active,.InfoBar.danger>.Box>.Button:active{color:#2e3436;border-color:#e08585;background-color:#dc7474;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.InfoBar.danger>.Box>.Button.active::before,.InfoBar.danger>.Box>.Button:active::before{opacity:0}.SearchBar{border-style:solid;border-color:#cdc7c2;background-color:#eae7e5}.window-inactive .SearchBar{border-color:#d5d0cc;background-color:#eae8e6;box-shadow:none;transition:200ms ease-out}.SearchBar{padding:6px;border-spacing:6px;border-width:0 0 1px}.control-buttons{border-spacing:6px}.control-buttons:not(.empty).start:dir(ltr),.control-buttons:not(.empty).end:dir(rtl){margin-right:7px}.control-buttons:not(.empty).start:dir(rtl),.control-buttons:not(.empty).end:dir(ltr){margin-left:7px}.control-buttons button{border-radius:9999px;padding:6px;margin:0 2px;min-width:0;min-height:0}.control-buttons button:not(:disabled):not(.disabled):hover{color:#2e3436;border-color:#c4bdb6;border-bottom-color:#ada39a;background-color:#dedad7;box-shadow:inset 0 1px #d8d4d0,0 1px 2px rgba(0,0,0,.07)}.control-buttons button:not(:disabled):not(.disabled):hover::before{opacity:0}.control-buttons button:not(:disabled):not(.disabled):active,.control-buttons button:not(:disabled):not(.disabled):checked{border-color:rgba(0,0,0,0);box-shadow:none;text-shadow:none;background-color:#968a7e}.control-buttons button:not(:disabled):not(.disabled):active::before,.control-buttons button:not(:disabled):not(.disabled):checked::before{opacity:0}.titlebar:not(.HeaderBar),.HeaderBar{padding:0 6px;min-height:46px;border-width:1px;border-style:solid;border-color:#bfb8b1;border-top-left-radius:8px;border-top-right-radius:8px;background:#f1f0ee linear-gradient(to top, #dfdcd8, #f4f2f1);box-shadow:inset 0 1px rgba(255,255,255,.8),inset 0 -2px 2px rgba(0,0,0,.02)}.window-inactive .titlebar:not(.HeaderBar),.window-inactive .HeaderBar{border-color:#d5d0cc;background-color:#f6f5f4;background-image:none;box-shadow:inset 0 1px rgba(255,255,255,.8);transition:200ms ease-out}.titlebar:not(.HeaderBar),.HeaderBar.titlebar{background:#edebe9 linear-gradient(to top, #dad6d2, #efedec);box-shadow:inset 0 1px rgba(255,255,255,.8),inset 0 -2px 2px rgba(0,0,0,.02);background:none;background-color:#e6e3e0;box-shadow:none}.titlebar:not(.HeaderBar)>.Box,.HeaderBar>.Box{min-height:46px}.titlebar:not(.HeaderBar) .title,.HeaderBar .title{padding-left:12px;padding-right:12px;font-weight:bold}.titlebar:not(.HeaderBar) .title:not(:only-child),.HeaderBar .title:not(:only-child){margin-bottom:.15em}.titlebar:not(.HeaderBar) .subtitle,.HeaderBar .subtitle{font-size:smaller;padding-left:12px;padding-right:12px}.titlebar:not(.HeaderBar) .Button:not(:disabled):not(.disabled).active,.HeaderBar .Button:not(:disabled):not(.disabled).active{border-color:#c6bfb9;border-top-color:#bab3ab}.titlebar:not(.HeaderBar),.window-inactive .HeaderBar.titlebar,.HeaderBar.titlebar,.window-inactive .HeaderBar.no-round-corner,.HeaderBar.no-round-corner,.window-inactive .maximized .HeaderBar,.maximized .HeaderBar,.window-inactive .fullscreen .HeaderBar,.fullscreen .HeaderBar{border-radius:0}.Window.csd>.titlebar:not(.HeaderBar){padding:0;background-color:rgba(0,0,0,0);background-image:none;border-style:none;border-color:rgba(0,0,0,0);box-shadow:none}.titlebar:not(.HeaderBar) .separator{background-color:#cdc7c2}pathbar>button.text-button,pathbar>button.image-button,pathbar>button{padding-left:4px;padding-right:4px}pathbar>button.text-button.image-button .Label{padding-left:0;padding-right:0}pathbar>button.text-button.image-button .Label:last-child,pathbar>button .Label:last-child{padding-right:8px}pathbar>button.text-button.image-button .Label:first-child,pathbar>button .Label:first-child{padding-left:8px}pathbar>button image{padding-left:4px;padding-right:4px}pathbar>button.slider-button{padding-left:0;padding-right:0}.table{display:flex;flex-direction:column;width:100%;height:100%;max-width:100%;overflow:hidden;border:1px solid #d7d2ce;background-color:#fff}.table{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.table:focus:focus-visible{outline-color:rgba(53,132,228,.5);outline-width:2px;outline-offset:-2px}.table.disabled{color:#929595}.table.disabled.selected{color:#86b5ef}.table.disabled.selected:backdrop{color:#71a8eb}.window-inactive .table{border-left-color:#ddd9d6;border-top:#ddd9d6}.table .table__header{flex:0 0 auto;width:100%;height:min-content;overflow:hidden;user-select:none}.table .table__header__content{min-width:100%;width:min-content;height:min-content;overflow-x:scroll;overflow-y:hidden}.table .table__body{flex:1;overflow-y:hidden;overflow-x:hidden}.table .table__body>div{width:100%;margin:0}@media screen and (-webkit-min-device-pixel-ratio: 0){.table .table__body>div:not(.resize-triggers)>div{overflow:overlay}.table .table__body>div:not(.resize-triggers)>div::-webkit-scrollbar{width:8px;height:8px;z-index:1000}.table .table__body>div:not(.resize-triggers)>div::-webkit-scrollbar-thumb{background-clip:padding-box;border-radius:16px;border:2px solid rgba(0,0,0,0);background-color:rgba(0,0,0,.2);-webkit-transition:background-color .5s ease;transition:background-color .5s ease}.table .table__body>div:not(.resize-triggers)>div::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.3)}.table .table__body>div:not(.resize-triggers)>div::-webkit-scrollbar-thumb:active{background-color:rgba(0,0,0,.4)}}.table .th{color:#979a9b;--icon-color: #979a9b;background-color:#fff;font-weight:bold;text-shadow:none;box-shadow:none;cursor:default}.table .th:first-child{border-left:none}.table .th.activatable:hover{color:#636769;box-shadow:none;transition:none}.table .th.activatable:active{color:#2e3436;transition:none}.table .th>.Label{flex:1}.table .th .table__sortIcon{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.table .th .table__sortIcon:not(.descending){transform:rotate(180deg)}.table .th .table__sortIcon.hidden{opacity:0}.table .th:hover .table__sortIcon.hidden{opacity:.5}.table .th .table__filter{padding:.25rem 0;text-align:center}.table .th .table__filter>*{width:100%}.table .th .InputFilter{padding-left:2px;padding-right:2px}.table .th .DropdownFilter .Dropdown{margin-right:.5rem}.table .td{padding:4px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;height:28px}.table .td:not(:last-child){border-right:1px solid #d7d2ce}.table .table__resizer{position:absolute;top:0;right:0;width:10px;height:100%;z-index:1;touch-action:none;border-right:4px solid rgba(0,0,0,0)}.table .table__resizer:hover{border-right:4px solid rgba(205,199,194,.3)}.table .table__resizer.isResizing{border-right:4px solid #3584e4}.table.separator{min-height:2px;color:#d7d2ce}.table.dnd-active{box-shadow:none}.table>dndtarget.dnd-active{border-style:solid none;border-width:1px;border-color:#185fb4}.table>dndtarget.dnd-active.after{border-top-style:none}.table>dndtarget.dnd-active.before{border-bottom-style:none}.table.expander{min-width:16px;min-height:16px;-gtk-icon-source:-gtk-icontheme("pan-end-symbolic");color:#4d4d4d}.table.expander:dir(rtl){-gtk-icon-source:-gtk-icontheme("pan-end-symbolic-rtl")}.table.expander:hover{color:#000}.table.expander.selected{color:#c2daf7}.table.expander.selected:hover{color:#fff}.table.expander:checked{-gtk-icon-source:-gtk-icontheme("pan-down-symbolic")}.table.progressbar{color:#fff;background-color:#3584e4;background-image:image(#3584e4);box-shadow:none}.table.progressbar.selected:focus,.table.progressbar.selected{color:#3584e4;background-image:image(#ffffff)}.table.progressbar.selected:focus:backdrop,.table.progressbar.selected:backdrop{color:#3584e4;background-color:#fcfcfc}.table.trough{background-color:rgba(46,52,54,.1)}.table.trough.selected:focus,.table.trough.selected{background-color:rgba(255,255,255,.3)}.table button.dnd:active,.table button.dnd.selected,.table button.dnd:hover,.table button.dnd,.table .table__header.button.dnd:active,.table .table__header.button.dnd.selected,.table .table__header.button.dnd:hover,.table .table__header.button.dnd{padding:0 6px;color:#fff;background-image:none;background-color:#3584e4;border-style:none;border-radius:0;box-shadow:inset 0 0 0 1px #fff;text-shadow:none;transition:none}.table .th,.table .th.activatable:hover,.table .th.activatable:active{padding:0 4px;background-image:none;border-width:1px;border-style:none none solid solid;border-color:#d7d2ce;border-radius:0;text-shadow:none}.table .th:disabled,.table .th.activatable:disabled:hover,.table .th.activatable:disabled:active{border-color:#f6f5f4;background-image:none}.table .th:last-child,.table .th.activatable:last-child:hover,.table .th.activatable:last-child:active{border-right-style:none}columnview row:not(.selected) cell editablelabel:not(.editing):focus-within{outline:2px solid rgba(53,132,228,.5)}columnview row:not(.selected) cell editablelabel.editing:focus-within{outline:2px solid #3584e4}columnview row:not(.selected) cell editablelabel.editing text selection{color:#fff;background-color:#3584e4}.Popover{--arrow-size: 10px;position:absolute;z-index:2;background-color:rgba(0,0,0,0)}.Popover:not(.open){pointer-events:none}.Popover .Popover__wrapper{transition:all 80ms cubic-bezier(0.25, 0.46, 0.45, 0.94);opacity:0;transform:scale(0.95)}.Popover.open .Popover__wrapper{opacity:1;transform:scale(1)}.Popover .Popover__arrow{position:absolute;z-index:2;width:0;height:0;background-color:rgba(0,0,0,0)}.Popover .Popover__arrow::after,.Popover .Popover__arrow::before{content:" ";position:absolute;top:0;left:0;border:var(--arrow-size) solid rgba(0,0,0,0)}.Popover .Popover__arrow.top{top:calc(-1*var(--arrow-size) + 1px);margin-left:calc(-1*var(--arrow-size))}.Popover .Popover__arrow.top::before{top:-1px;border-top-width:0;border-bottom-color:rgba(0,0,0,.23)}.Popover .Popover__arrow.top::after{border-top-width:0;border-bottom-color:#fff}.Popover .Popover__arrow.bottom{bottom:2px;margin-left:calc(-1*var(--arrow-size))}.Popover .Popover__arrow.bottom::before{top:1px;border-bottom-width:0;border-top-color:rgba(0,0,0,.23)}.Popover .Popover__arrow.bottom::after{border-bottom-width:0;border-top-color:#fff}.Popover .Popover__arrow.left{left:calc(-1*var(--arrow-size) + 1px);margin-top:calc(-1*var(--arrow-size))}.Popover .Popover__arrow.left::before{left:-1px;border-left-width:0;border-right-color:rgba(0,0,0,.23)}.Popover .Popover__arrow.left::after{border-left-width:0;border-right-color:#fff}.Popover .Popover__arrow.right{right:2px;margin-top:calc(-1*var(--arrow-size))}.Popover .Popover__arrow.right::before{left:1px;border-right-width:0;border-left-color:rgba(0,0,0,.23)}.Popover .Popover__arrow.right::after{border-right-width:0;border-left-color:#fff}.Popover .Popover__container{padding:8px 0;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.23);border-radius:9px;box-shadow:0 1px 3px 2px rgba(0,0,0,.08)}.Popover .Popover__container>.list,.Popover .Popover__container>.view,.Popover .Popover__container>.IconView,.Popover .Popover__container>.Toolbar{border-style:none;background-color:rgba(0,0,0,0)}.Popover.right .Popover__container,.Popover.left .Popover__container{padding:8px}.Popover{padding:0}.Popover.MenuBar__popover>.Popover__wrapper>.Popover__container{border-top-left-radius:0;border-top-right-radius:0;border-top:none}.Menu .separator{margin:6px 0}.Menu .Box.inline-buttons{padding:0 12px}.Menu .Box.inline-buttons .Button:not(:disabled):not(.disabled):not(.increase-specificity){border-radius:2px;transition:none}.Menu .Box.circular-buttons{padding:12px 12px 6px}.Menu .Box.circular-buttons .Button.circular{padding:7px;margin:0}.Menu .Box.circular-buttons .Button.circular:focus{background-color:#efedec}.Menu .Box.circular-buttons .Button.circular:active{color:#2e3436;border-color:#cdc7c2;background-color:#d6d1cd;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Menu .Box.circular-buttons .Button.circular:active::before{opacity:0}.Menu .Menu__item,.Menu .Menu__button{display:flex;flex-direction:row;align-items:center;border:none;user-select:none;min-height:30px;min-width:40px;width:100%;padding:0 12px;border-radius:0;text-align:left}.Menu .Menu__button.selected{color:#000;background-color:#efedec}.Menu .Menu__button.selected:active{background-color:#d6d1cd}.Menu .Menu__button:focus{outline:none}.Menu .Menu__button__text{flex:1}.Menu .Menu__button__accelerator{color:rgba(0,0,0,.4);margin-left:12px}.Menu check,.Menu radio{transform:scale(0.8);border-width:1.2px;border-color:rgba(0,0,0,0);box-shadow:none;background-image:image(transparent);color:#000}.Menu check:hover,.Menu radio:hover{transform:scale(0.8);border-width:1.2px;color:#000;box-shadow:none;background-image:image(transparent)}.Menu check:active,.Menu radio:active{transform:scale(0.8);border-width:1.2px;color:#000;box-shadow:none;background-image:image(transparent)}.Menu radio{border-color:#cdc7c2}.Menu radio:active{border-color:rgba(205,199,194,.5)}.Menu arrow.left,.Menu radio.left,.Menu check.left{margin-left:-2px;margin-right:6px}.Menu arrow.right,.Menu radio.right,.Menu check.right{margin-left:6px;margin-right:-2px}.Menu .title{padding:4px 12px;width:100%;text-align:left}.Menu.icons .Menu__item,.Menu.icons .Menu__button,.Menu.icons .title{position:relative;padding-left:32px}.Menu.icons .Menu__icon{position:absolute;height:100%;top:0;left:8px;opacity:.6}.Menu .Menu__iconAfter.submenu{opacity:.3}.Menu .Menu__back .Menu__icon{opacity:.3}.Menu .Menu__back .Menu__button__text{text-align:center;margin-left:-16px}.MenuBar{padding:0px;box-shadow:inset 0 -1px rgba(0,0,0,.1);background-color:#f6f5f4}.MenuBar>.MenuBar__button{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;color:#000;min-height:16px;padding:1px 8px;border-width:0;border-top:3px solid rgba(0,0,0,0);border-bottom:3px solid rgba(0,0,0,0);user-select:none}.MenuBar>.MenuBar__button::before{opacity:0}.MenuBar>.MenuBar__button:hover,.MenuBar>.MenuBar__button.hover,.MenuBar>.MenuBar__button:active,.MenuBar>.MenuBar__button.active{color:#3584e4;border-bottom:3px solid #3584e4}.MenuBar>.MenuBar__button.focus,.MenuBar>.MenuBar__button:focus{outline:none;background-color:#efedec}.MenuBar>.MenuBar__button.selected{box-shadow:inset 0 -3px #3584e4;color:#1b6acb}.MenuBar>.MenuBar__button:disabled{color:#929595;box-shadow:none}.MenuBar>.MenuBar__button popover.menu>.Popover__container{padding:5px}.MenuBar>.MenuBar__button popover.menu popover.menu{padding:0 0 4px 0}.MenuBar>.MenuBar__button popover.menu popover.menu>.Popover__container{margin:0;border-radius:9px}.MenuBar__popover>.Popover__container{padding-top:0}.Notebook{display:flex;border:1px solid #cdc7c2}.Notebook.top{flex-direction:column}.Notebook.bottom{flex-direction:column-reverse}.Notebook.left{flex-direction:row}.Notebook.right{flex-direction:row-reverse}.Notebook .Notebook__header{flex:0;display:flex;border-color:#cdc7c2;border-width:1px;background-color:#e2dedb}.Notebook .Notebook__header,.Notebook .Notebook__header>.Notebook__tabs{display:flex;align-items:center}.Notebook .Notebook__header.top{border-bottom-style:solid}.Notebook .Notebook__header.bottom{border-top-style:solid}.Notebook .Notebook__header.left{border-right-style:solid}.Notebook .Notebook__header.right{border-left-style:solid}.Notebook .Notebook__header.top,.Notebook .Notebook__header.bottom{flex-direction:row}.Notebook .Notebook__header.top>.Notebook__tabs,.Notebook .Notebook__header.bottom>.Notebook__tabs{flex-direction:row;padding-left:4px;padding-right:4px}.Notebook .Notebook__header.left,.Notebook .Notebook__header.right{flex-direction:column}.Notebook .Notebook__header.left>.Notebook__tabs,.Notebook .Notebook__header.right>.Notebook__tabs{flex-direction:column;padding-top:4px;padding-bottom:4px}.Notebook .Notebook__tabs>.Notebook__tab{transition:none;padding:3px 12px;min-height:30px;min-width:30px;display:flex;justify-content:center;align-items:center;white-space:nowrap;color:#2e3436;font-weight:normal;cursor:default;user-select:none;border:0}.Notebook .Notebook__tabs>.Notebook__tab:focus{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.Notebook .Notebook__tabs>.Notebook__tab:focus:focus:focus-visible{outline-color:rgba(53,132,228,.5);outline-width:2px;outline-offset:-2px}.Notebook .Notebook__tabs>.Notebook__tab:hover{color:#2e3436;background-color:#edebe9}.Notebook .Notebook__tabs>.Notebook__tab.selected{color:#2e3436;background-color:#edebe9}.Notebook .Notebook__tabs>.Notebook__tab.selected:hover{background-color:#f2f0ef}.Notebook.top .Notebook__tabs>.Notebook__tab:hover{box-shadow:inset 0 -3px #c8c2bc}.Notebook.top .Notebook__tabs>.Notebook__tab.selected{box-shadow:inset 0 -3px #3584e4}.Notebook.bottom .Notebook__tabs>.Notebook__tab:hover{box-shadow:inset 0 3px #c8c2bc}.Notebook.bottom .Notebook__tabs>.Notebook__tab.selected{box-shadow:inset 0 3px #3584e4}.Notebook.left .Notebook__tabs>.Notebook__tab:hover{box-shadow:inset -3px 0 #c8c2bc}.Notebook.left .Notebook__tabs>.Notebook__tab.selected{box-shadow:inset -3px 0 #3584e4}.Notebook.right .Notebook__tabs>.Notebook__tab:hover{box-shadow:inset 3px 0 #c8c2bc}.Notebook.right .Notebook__tabs>.Notebook__tab.selected{box-shadow:inset 3px 0 #3584e4}.Notebook.top .Notebook__tab:not(:last-of-type),.Notebook.bottom .Notebook__tab:not(:last-of-type){margin-right:6px}.Notebook.top .Notebook__tab.reorderable,.Notebook.bottom .Notebook__tab.reorderable{border-style:none solid}.Notebook.left .Notebook__tab,.Notebook.right .Notebook__tab{width:100%;justify-content:start}.Notebook.left .Notebook__tab:not(:last-of-type),.Notebook.right .Notebook__tab:not(:last-of-type){margin-bottom:6px}.Notebook.left .Notebook__tab.reorderable,.Notebook.right .Notebook__tab.reorderable{border-style:solid none}.Notebook.left .Notebook__tab>.Label,.Notebook.right .Notebook__tab>.Label{flex:1}.Notebook .Notebook__tab button{padding:0;margin:0;margin-left:6px;margin-right:-6px;margin-bottom:-2px;width:16px;height:16px;min-width:16px;min-height:16px;--icon-size: 16px;opacity:.3;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94) !important;color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Notebook .Notebook__tab button::before{opacity:0}.Notebook .Notebook__tab button:hover{color:#2e3436;border-color:#e2dedb;border-bottom-color:#cbc4bf;background-color:#fcfcfb;box-shadow:inset 0 1px #f6f5f4,0 1px 2px rgba(0,0,0,.07);opacity:1;border-color:#c1bab3}.Notebook .Notebook__tab button:hover::before{opacity:0}.Notebook .Notebook__arrow{min-height:30px;min-width:30px;border-radius:0}.Notebook .Notebook__arrow:not(:disabled):not(.disabled):hover:not(:active){background-color:rgba(255,255,255,.5);border-color:rgba(0,0,0,0);box-shadow:none}.Notebook .Notebook__arrow:not(:disabled):not(.disabled):active{background-color:#d0c9c4}.Notebook .Notebook__arrow:disabled{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Notebook .Notebook__arrow:disabled::before{opacity:0}.Notebook.left .Notebook__arrow,.Notebook.right .Notebook__arrow{width:100%}.Notebook.bottom .Notebook__arrow,.Notebook.top .Notebook__arrow{padding-left:4px;padding-right:4px}.Notebook.top .Notebook__arrow{border-top-style:none}.Notebook.bottom .Notebook__arrow{border-bottom-style:none}.Notebook.right .Notebook__arrow,.Notebook.left .Notebook__arrow{padding-top:4px;padding-bottom:4px}.Notebook.left .Notebook__arrow{border-left-style:none}.Notebook.right .Notebook__arrow{border-right-style:none}.Notebook .Notebook__action button{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.Notebook .Notebook__action button::before{opacity:0}.Notebook .Notebook__content{flex:1;background-color:#fff}.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page{overflow:auto}@media screen and (-webkit-min-device-pixel-ratio: 0){.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page{overflow:overlay}.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page::-webkit-scrollbar{width:8px;height:8px;z-index:1000}.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page::-webkit-scrollbar-thumb{background-clip:padding-box;border-radius:16px;border:2px solid rgba(0,0,0,0);background-color:rgba(0,0,0,.2);-webkit-transition:background-color .5s ease;transition:background-color .5s ease}.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.3)}.Notebook .Notebook__content>.PageSwitcher>.PageSwitcher__page::-webkit-scrollbar-thumb:active{background-color:rgba(0,0,0,.4)}}.PageSwitcher{position:relative;width:100%;height:100%;overflow:hidden}.PageSwitcher .PageSwitcher__page{position:absolute;top:0;left:0;width:100%;height:100%;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.PageSwitcher .PageSwitcher__page.padded{padding:8px}.PageSwitcher .PageSwitcher__page.active{opacity:1;transform:translate3d(0, 0, 0)}.PageSwitcher.horizontal .PageSwitcher__page:not(.active):first-child{transform:translate3d(-100%, 0, 0)}.PageSwitcher.horizontal .PageSwitcher__page:not(.active):last-child{transform:translate3d(100%, 0, 0)}.PageSwitcher.vertical .PageSwitcher__page:not(.active):first-child{transform:translate3d(0, -100%, 0)}.PageSwitcher.vertical .PageSwitcher__page:not(.active):last-child{transform:translate3d(0, 100%, 0)}.PageSwitcher.opacity .PageSwitcher__page:not(.active):first-child{opacity:0}.PageSwitcher.opacity .PageSwitcher__page:not(.active):last-child{opacity:0}.PageSwitcher.expand{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.PageSwitcher.expand .PageSwitcher__page{width:max-content;height:max-content}.PageSwitcher.expand.use-both .PageSwitcher__page:not(.main),.PageSwitcher.expand.use-width .PageSwitcher__page:not(.main){width:100%}.PageSwitcher.expand.use-both .PageSwitcher__page:not(.main),.PageSwitcher.expand.use-height .PageSwitcher__page:not(.main){height:100%}.Expander .Expander__button{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);border-radius:5px;display:flex;justify-content:center;align-items:center;padding:0;margin:0;border:none}.Expander .Expander__button::before{opacity:0}.Expander .Expander__button{position:relative;outline:none;overflow:visible}.Expander .Expander__button::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.Expander .Expander__button:focus:focus-visible{outline:none}.Expander .Expander__button:focus:focus-visible::after{border:2px solid rgba(53,132,228,.5);top:-2px;left:-2px;width:100%;height:100%}.Expander .Expander__button .Icon.arrow{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Expander.open .Expander__button .Icon.arrow-after{transform:rotate(-90deg)}.Expander.open .Expander__button .Icon.arrow-before{transform:rotate(90deg)}.Expander .Expander__container{position:relative;overflow:hidden;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Expander .Expander__content{position:absolute;top:0;left:0}.Expander.vertical .Expander__content{width:100%;height:auto}.Expander.vertical:not(.open) .Expander__container{height:0}.Expander.horizontal .Expander__content{height:100%;width:auto}.Expander.horizontal:not(.open) .Expander__container{width:0}.Expander.fit-content.vertical .Expander__content{width:max-content}.Expander.fit-content.horizontal .Expander__content{height:max-content}.Paned{position:relative;overflow:hidden;border:1px solid #cdc7c2}.Paned.border-handle{border:none}.Paned.border-none{border:none}.Paned.border-none .Paned__handle::before{background-color:rgba(0,0,0,0)}.Paned .Paned__wrapper{width:100%;height:100%}.Paned .Paned__pane{flex:0 0 auto;overflow:hidden}.Paned .Paned__handle{flex:0 0 1px;position:absolute !important;touch-action:none}.Paned .Paned__handle{position:relative;outline:none;overflow:visible}.Paned .Paned__handle::after{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.Paned .Paned__handle:focus:focus-visible{outline:none}.Paned .Paned__handle:focus:focus-visible::after{border:2px solid rgba(53,132,228,.5);top:-2px;left:-2px;width:100%;height:100%}.Paned .Paned__wrapper.horizontal{display:flex;flex-direction:row}.Paned .Paned__wrapper.horizontal>.Paned__pane{width:50%}.Paned .Paned__wrapper.horizontal>.Paned__pane:first-child{border-right:1px solid #cdc7c2}.Paned .Paned__wrapper.horizontal>.Paned__handle{top:0;left:50%;height:100%;cursor:ew-resize;padding:0 5px;transform:translateX(-50%)}.Paned .Paned__wrapper.vertical{display:flex;flex-direction:column}.Paned .Paned__wrapper.vertical>.Paned__pane{height:50%}.Paned .Paned__wrapper.vertical>.Paned__pane:first-child{border-bottom:1px solid #cdc7c2}.Paned .Paned__wrapper.vertical>.Paned__handle{top:50%;left:0;width:100%;cursor:ns-resize;padding:5px 0;transform:translateY(-50%)}.Autocomplete__popover .Popover__wrapper{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);opacity:0;transform:none}.Autocomplete__popover .Popover__container{padding:4px 0 !important;overflow:hidden}.Autocomplete__popover .List__item{padding-left:8px;padding-right:8px}.Autocomplete__popover .List__item>*{white-space:nowrap}.Switch{--switch-size: 20px;display:flex;flex-direction:row;align-items:center;font-weight:bold;height:28px}.Switch.mini{height:18px;min-height:18px;font-size:0px;--switch-size: 13px}.Switch.small{height:22px;min-height:22px;font-size:8px;--switch-size: 16px}.Switch.medium{height:28px;min-height:28px;font-size:10px;--switch-size: 20px}.Switch.large{height:36px;min-height:36px;font-size:13px;--switch-size: 26px}.Switch.huge{height:42px;min-height:42px;font-size:16px;--switch-size: 30px}.Switch.mega{height:58px;min-height:58px;font-size:20px;--switch-size: 41px}.Switch input{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.Switch label{position:relative;display:inline-block;width:calc(2*var(--switch-size));height:calc(1*var(--switch-size));border:1px solid #cdc7c2;border-radius:20px;color:rgba(46,52,54,.2);background-color:#e2dedb;text-shadow:0 1px rgba(0,0,0,.1);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Switch input+label{position:relative;outline:none;overflow:visible}.Switch input+label::before{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-2px;left:-2px;width:calc(100% - 0px);height:calc(100% - 0px)}.Switch input:focus:focus-visible+label{outline:none}.Switch input:focus:focus-visible+label::before{border:2px solid rgba(53,132,228,.5);top:-2px;left:-2px;width:100%;height:100%}.Switch input:checked+label{color:#fff;border-color:#185fb4;background-color:#3584e4;text-shadow:0 1px rgba(53,132,228,.5),0 0 2px rgba(255,255,255,.6)}.Switch input:disabled+label{color:#929595;border-color:#cdc7c2;background-color:#f7f6f5;text-shadow:none}.Switch label::after{content:"";position:absolute;display:inline-block;top:0px;left:0px;margin:-1px -1px;width:calc(var(--switch-size) - 2px);height:calc(var(--switch-size) - 2px);border:1px solid;border-color:#cdc7c2;border-radius:50%;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);color:#2e3436;outline-color:rgba(53,132,228,.5);border-color:#cdc7c2;border-bottom-color:#bfb8b1;background-color:#f6f5f4;box-shadow:inset 0 1px #fff,0 1px rgba(0,0,0,.1),0 1px 2px rgba(0,0,0,.07)}.Switch label::after::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Switch label:hover::after{color:#2e3436;border-color:#e8e6e3;border-bottom-color:#d1ccc7;background-color:#fff;box-shadow:inset 0 1px #fdfcfc,0 1px rgba(0,0,0,.1),0 1px 2px rgba(0,0,0,.07);border-color:#cdc7c2}.Switch label:hover::after::before{opacity:0}.Switch input:checked+label::after{border:1px solid #185fb4;transform:translateX(100%)}.Switch input:disabled+label::after{color:#929595;border-color:#d5d0cc;background-color:#f7f6f5;text-shadow:none;--icon-shadow: none;--icon-color: #929595;box-shadow:inset 0 1px rgba(255,255,255,0)}.Switch input:disabled+label::after::before{opacity:0}.Switch label>span{font-size:inherit;user-select:none;position:absolute;top:50%;transform:translateY(-50%)}.Switch label>span:first-child{left:3px}.Switch label>span:last-child{right:3px}row.selected .Switch{outline-color:rgba(255,255,255,.8);box-shadow:none;border-color:#185fb4}row.selected .Switch>slider:checked,row.selected .Switch>slider{border-color:#185fb4}.Checkbox,.Radio{--element-size: 20px;--element-padding-size: calc(var(--element-size) * 0.19);--element-inner-size: calc(var(--element-size) - 2 * var(--element-padding-size));font-size:14px;display:flex;flex-direction:row;align-items:center;height:28px}.Checkbox.mini,.Radio.mini{height:18px;min-height:18px;font-size:11px;--icon-size: 12px;--element-size: 14.4px}.Checkbox.mini>label>.label__text,.Radio.mini>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox.small,.Radio.small{height:22px;min-height:22px;font-size:12px;--icon-size: 13px;--element-size: 17.6px}.Checkbox.small>label>.label__text,.Radio.small>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox.medium,.Radio.medium{height:28px;min-height:28px;font-size:14px;--icon-size: 16px;--element-size: 22.4px}.Checkbox.medium>label>.label__text,.Radio.medium>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox.large,.Radio.large{height:36px;min-height:36px;font-size:18px;--icon-size: 20px;--element-size: 28.8px}.Checkbox.large>label>.label__text,.Radio.large>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox.huge,.Radio.huge{height:42px;min-height:42px;font-size:20px;--icon-size: 23px;--element-size: 33.6px}.Checkbox.huge>label>.label__text,.Radio.huge>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox.mega,.Radio.mega{height:58px;min-height:58px;font-size:28px;--icon-size: 32px;--element-size: 46.4px}.Checkbox.mega>label>.label__text,.Radio.mega>label>.label__text{height:100%;display:flex;flex-direction:row;justify-content:center;align-items:center}.Checkbox input,.Radio input{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}.Checkbox label,.Radio label{position:relative;display:inline-block;height:calc(1*var(--element-size));padding-left:var(--element-size);padding-right:2px;color:#2e3436;border-radius:5px;text-shadow:0 1px rgba(0,0,0,.1);user-select:none;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Checkbox input+label,.Radio input+label{position:relative;outline:none;overflow:visible}.Checkbox input+label::before,.Radio input+label::before{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-2px;left:-2px;width:calc(100% - 0px);height:calc(100% - 0px)}.Checkbox input:focus:focus-visible+label,.Radio input:focus:focus-visible+label{outline:none}.Checkbox input:focus:focus-visible+label::before,.Radio input:focus:focus-visible+label::before{border:2px solid rgba(53,132,228,.5);top:-2px;left:-2px;width:100%;height:100%}.Checkbox label>.element,.Radio label>.element{content:"";position:absolute;display:inline-block;color:#000;border-color:#cdc7c2;background-color:#fff;border:1px solid #bfb8b1;box-shadow:0 1px rgba(0,0,0,.075);transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:calc(var(--element-padding-size));left:calc(var(--element-padding-size));width:var(--element-inner-size);height:var(--element-inner-size)}.Checkbox label>.element::before,.Checkbox label>.element::after,.Radio label>.element::before,.Radio label>.element::after{content:"";position:absolute;display:inline-block;top:0;left:0;width:100%;height:100%}.Checkbox label:hover>.element,.Radio label:hover>.element{background-color:#ebe9e7}.Checkbox input:not(:disabled)+label:active>.element,.Radio input:not(:disabled)+label:active>.element{background-color:#e1ddda;box-shadow:inset 0 1px #c4bdb6}.Checkbox input:checked+label>.element,.Checkbox input:checked:disabled+label>.element,.Radio input:checked+label>.element,.Radio input:checked:disabled+label>.element{color:#fff;border-color:#185fb4;background-color:#5094e8;background-image:linear-gradient(to top, #3987e5, #5094e8)}.Checkbox input:checked:not(:disabled)+label:hover>.element,.Radio input:checked:not(:disabled)+label:hover>.element{background-image:linear-gradient(to top, #5094e8, #6ba5eb)}.Checkbox input:checked:not(:disabled)+label:active>.element,.Radio input:checked:not(:disabled)+label:active>.element{background-image:linear-gradient(to top, #2379e2, #3181e3);box-shadow:inset 0 1px #1c6fd4}.Checkbox input:disabled+label,.Radio input:disabled+label{color:#929595;text-shadow:none}.Checkbox input:disabled+label>.element,.Radio input:disabled+label>.element{color:#929595;border-color:#cdc7c2;background-color:#f7f6f5;box-shadow:none;border-color:#d5d0cc;background-color:#f7f6f5;background-image:none}row.selected .Checkbox,row.selected .Radio{outline-color:rgba(255,255,255,.8);box-shadow:none;border-color:#185fb4}row.selected .Checkbox>slider:checked,row.selected .Checkbox>slider,row.selected .Radio>slider:checked,row.selected .Radio>slider{border-color:#185fb4}.Checkbox.mini{--element-stroke-width: 2px}.Checkbox.small{--element-stroke-width: 2px}.Checkbox.medium{--element-stroke-width: 3px}.Checkbox.large{--element-stroke-width: 4px}.Checkbox.huge{--element-stroke-width: 5px}.Checkbox.mega{--element-stroke-width: 6px}.Checkbox label .element{border-radius:3px}.Checkbox label .element::before{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);transition-property:transform;transform:translate(3px, 0px) rotate(45deg) scale(0)}.Checkbox input:checked+label .element::before{border:var(--element-stroke-width) solid #fff;border-top-width:0;border-left-width:0;width:calc(var(--element-inner-size)/6);height:calc(var(--element-inner-size)/2.5);transform:translate(3px, 0px) rotate(45deg)}.Checkbox input:checked:disabled+label .element::before{border-color:rgba(255,255,255,.5)}.Checkbox.mini input:checked+label .element::before{transform:translate(2.5714285714px, 0px) rotate(45deg)}.Checkbox.small input:checked+label .element::before{transform:translate(3.1428571429px, 0px) rotate(45deg)}.Checkbox.medium input:checked+label .element::before{transform:translate(4px, 0px) rotate(45deg)}.Checkbox.large input:checked+label .element::before{transform:translate(5.1428571429px, 0px) rotate(45deg)}.Checkbox.huge input:checked+label .element::before{transform:translate(6px, 0px) rotate(45deg)}.Checkbox.mega input:checked+label .element::before{transform:translate(8.2857142857px, 0px) rotate(45deg)}.Radio label .element{border-radius:50%}.Radio label .element::before{transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);transition-property:transform;transform:translate(-50%, -50%) scale(0)}.Radio input:checked+label .element::before{background-color:#fff;border-radius:50%;width:calc(var(--element-inner-size)/1.9);height:calc(var(--element-inner-size)/1.9);top:50%;left:50%;transform:translate(-50%, -50%);box-shadow:inset 0 1px 0 0px #e6e6e6}.Radio input:checked:disabled+label .element::before{background-color:rgba(255,255,255,.5);box-shadow:none}.Range{cursor:pointer;position:relative;display:inline-flex;justify-content:center;align-items:center;border-radius:16px;padding:var(--range-padding);width:100%;height:var(--range-size)}.Range{position:relative;outline:none;overflow:visible}.Range::before{content:"";position:absolute;pointer-events:none;z-index:2;display:inline-block;border:2px solid rgba(0,0,0,0);border-radius:inherit;transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);top:-4px;left:-4px;width:calc(100% - -4px);height:calc(100% - -4px)}.Range.focus{outline:none}.Range.focus::before{border:2px solid rgba(53,132,228,.5);top:-2px;left:-2px;width:100%;height:100%}body{--range-track-width: 4px;--range-size: 28px;--range-padding: calc(var(--range-size) / 2 - var(--range-track-width));--range-thumb-size: 16px}.Range.mini{--range-track-width: 4px;--range-size: 18px;--range-thumb-size: 12px;border-radius:10px}.Range.small{--range-track-width: 4px;--range-size: 22px;--range-thumb-size: 12px;border-radius:13px}.Range.medium{--range-track-width: 4px;--range-size: 28px;--range-thumb-size: 16px;border-radius:16px}.Range.large{--range-track-width: 6px;--range-size: 36px;--range-thumb-size: 18px;border-radius:21px}.Range.huge{--range-track-width: 8px;--range-size: 42px;--range-thumb-size: 20px;border-radius:24px}.Range.mega{--range-track-width: 10px;--range-size: 58px;--range-thumb-size: 28px;border-radius:33px}.Range.vertical{width:var(--range-size);height:100%}.Range.marked{margin-bottom:20px}.Range.marked.vertical{margin-bottom:auto;margin-right:20px}.Range.disabled{pointer-events:none;cursor:default}.LevelBar .LevelBar__content,.Progress .Progress__content,.Range__content{position:relative;display:inline-block;width:100%;height:var(--range-track-width)}.LevelBar.vertical .LevelBar__content,.Progress.vertical .Progress__content,.Range.vertical .Range__content{width:var(--range-track-width);height:100%}.LevelBar .LevelBar__rail,.Progress .Progress__rail,.Range__rail{display:block;position:absolute;top:0;left:0;width:100%;height:var(--range-track-width);border-radius:var(--range-track-width);border:1px solid #c8c2bc;background-color:#ebe8e6}.LevelBar.vertical .LevelBar__rail,.Progress.vertical .Progress__rail,.Range.vertical .Range__rail{height:100%;width:var(--range-track-width)}.LevelBar.disabled .LevelBar__rail,.Progress.disabled .Progress__rail,.Range.disabled .Range__rail{color:#929595;border-color:#d5d0cc;background-color:#f7f6f5;text-shadow:none;--icon-shadow: none;--icon-color: #929595;box-shadow:inset 0 1px rgba(255,255,255,0)}.LevelBar.disabled .LevelBar__rail::before,.Progress.disabled .Progress__rail::before,.Range.disabled .Range__rail::before{opacity:0}.Progress .Progress__track,.Range__track{display:block;position:absolute;content:"";height:var(--range-track-width);border-radius:var(--range-track-width);border:1px solid #185fb4;background-color:#3584e4;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Progress.vertical .Progress__track,.Range.vertical .Range__track{width:var(--range-track-width)}.Range.no-track .Range__track{display:none}.Range.disabled .Range__track{display:none}.Range .Range__thumb{position:absolute;display:flex;align-items:center;justify-content:center;width:var(--range-thumb-size);height:var(--range-thumb-size);margin-left:calc(var(--range-thumb-size)/-2);margin-top:calc(var(--range-thumb-size)/-2.5);color:#2e3436;outline-color:rgba(53,132,228,.5);border-color:#cdc7c2;border-bottom-color:#bfb8b1;background-color:#f6f5f4;box-shadow:inset 0 1px #fff,0 1px 2px rgba(0,0,0,.07);border:1px solid #9f9489;border-radius:50%;outline:0;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Range .Range__thumb::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.Range .Range__thumb:hover{color:#2e3436;border-color:#cdc7c2;border-bottom-color:#bfb8b1;background-color:#f9f9f8;box-shadow:inset 0 1px #f4f2f1,0 1px 2px rgba(0,0,0,.07);border:1px solid #9f9489}.Range .Range__thumb:hover::before{opacity:0}.Range .Range__thumb:active{border-color:#124787}.Range.disabled .Range__thumb{color:#929595;border-color:#d5d0cc;background-color:#f7f6f5;text-shadow:none;--icon-shadow: none;--icon-color: #929595;box-shadow:inset 0 1px rgba(255,255,255,0);border:1px solid #bab3ab}.Range.disabled .Range__thumb::before{opacity:0}.Range.disabled .Range__thumb:hover{box-shadow:none}.Range.vertical .Range__thumb{margin-top:0;margin-bottom:-6px;margin-left:-6px}.Range .Range__mark{position:absolute;border-radius:1px;background-color:#d8d4d0}.Range .Range__mark.active{background-color:#3584e4}.Range:not(.vertical) .Range__mark{top:8px;width:1px;height:4px}.Range.vertical .Range__mark{left:8px;width:4px;height:1px}.Range.disabled .Range__mark.active{background-color:#d8d4d0;box-shadow:none}.Range.fine-tune.horizontal{padding-top:9px;padding-bottom:9px;min-height:16px}.Range.fine-tune.vertical{padding-left:9px;padding-right:9px;min-width:16px}.Range.fine-tune>trough>slider{margin:-6px}.Range.fine-tune>trough>fill,.Range.fine-tune>trough>highlight,.Range.fine-tune>trough{border-radius:5px}.Progress{position:relative;display:inline-flex;padding:12px;height:28px;width:100%}.Progress.vertical{width:28px;height:100%}.Progress.indeterminate:not(.vertical) .Progress__track{width:25%;animation:progress_horizontal 2.5s infinite}.Progress.indeterminate.vertical .Progress__track{height:25%;animation:progress_vertical 2.5s infinite}.Progress.labeled{padding-top:24px}.Progress .Progress__label{position:absolute;top:3px;left:50%;transform:translateX(-50%);color:rgba(146,149,149,.7);white-space:nowrap;user-select:none}@keyframes progress_horizontal{0%{left:0%}50%{left:75%}100%{left:0%}}@keyframes progress_vertical{0%{top:0%}50%{top:75%}100%{top:0%}}.LevelBar{position:relative;display:inline-flex;padding:12px;height:28px;width:100%}.LevelBar.vertical{width:28px;height:100%}.LevelBar .LevelBar__content{display:flex;flex-direction:row}.LevelBar.vertical .LevelBar__content{flex-direction:column}.LevelBar .LevelBar__rail{position:initial;border-radius:0}.LevelBar .LevelBar__rail:first-child{border-top-left-radius:1px;border-bottom-left-radius:1px}.LevelBar .LevelBar__rail:last-child{border-top-right-radius:1px;border-bottom-right-radius:1px}.LevelBar .LevelBar__rail:not(:last-child){margin-right:2px}.LevelBar .LevelBar__rail.danger{background-color:#e61a1a;border-color:#8a0f0f}.LevelBar .LevelBar__rail.warning{background-color:#e3a05f;border-color:#bb6d21}.LevelBar .LevelBar__rail.info{background-color:#67abff;border-color:#0173ff}.LevelBar .LevelBar__rail.success{background-color:#5ebf8a;border-color:#348358}.Frame{border:1px solid #cdc7c2}.Frame.inline{display:inline-block;width:min-content}.Frame.padded{padding:1rem}.Frame.scrollable{overflow:auto}.Frame.no-border{border:none}listview,list,.List{display:inline-block;color:#000;background-color:#fff;margin:0;padding:0;overflow:auto}@media screen and (-webkit-min-device-pixel-ratio: 0){listview,list,.List{overflow:overlay}listview::-webkit-scrollbar,list::-webkit-scrollbar,.List::-webkit-scrollbar{width:8px;height:8px;z-index:1000}listview::-webkit-scrollbar-thumb,list::-webkit-scrollbar-thumb,.List::-webkit-scrollbar-thumb{background-clip:padding-box;border-radius:16px;border:2px solid rgba(0,0,0,0);background-color:rgba(0,0,0,.2);-webkit-transition:background-color .5s ease;transition:background-color .5s ease}listview::-webkit-scrollbar-thumb:hover,list::-webkit-scrollbar-thumb:hover,.List::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.3)}listview::-webkit-scrollbar-thumb:active,list::-webkit-scrollbar-thumb:active,.List::-webkit-scrollbar-thumb:active{background-color:rgba(0,0,0,.4)}}.window-inactive listview,.window-inactive list,.window-inactive .List{color:#323232;background-color:#fcfcfc;border-color:#d5d0cc}listview.horizontal .List__item.separator,listview.separators.horizontal>.List__item:not(.separator):not(:last-child),list.horizontal .List__item.separator,list.separators.horizontal>.List__item:not(.separator):not(:last-child),.List.horizontal .List__item.separator,.List.separators.horizontal>.List__item:not(.separator):not(:last-child){border-left:1px solid #d7d2ce}listview:not(.horizontal) .List__item.separator,listview.separators:not(.horizontal)>.List__item:not(.separator):not(:last-child),list:not(.horizontal) .List__item.separator,list.separators:not(.horizontal)>.List__item:not(.separator):not(:last-child),.List:not(.horizontal) .List__item.separator,.List.separators:not(.horizontal)>.List__item:not(.separator):not(:last-child){border-bottom:1px solid #d7d2ce}listview.border,list.border,.List.border{border:1px solid #cdc7c2}listview.border-top,list.border-top,.List.border-top{border-top:1px solid #cdc7c2}listview.border-bottom,list.border-bottom,.List.border-bottom{border-bottom:1px solid #cdc7c2}listview.border-left,list.border-left,.List.border-left{border-left:1px solid #cdc7c2}listview.border-right,list.border-right,.List.border-right{border-right:1px solid #cdc7c2}listview.border-none,list.border-none,.List.border-none{border:none}listview.rounded,list.rounded,.List.rounded{border-radius:12px}.List__item{display:flex;flex-direction:row;padding:2px}.List__item,.List__item:hover{text-decoration:none;color:#2e3436}.List__item.activatable{user-select:none;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}.List__item.activatable{outline:0 solid rgba(0,0,0,0);outline-offset:4px}.List__item.activatable:focus:focus-visible{outline-color:rgba(53,132,228,.5);outline-width:2px;outline-offset:-2px}.List__item.activatable:hover{background-color:rgba(46,52,54,.05)}.List__item.activatable:active{box-shadow:inset 0 2px 2px -2px rgba(0,0,0,.2)}.List__item.activatable.selected{text-shadow:0 1px rgba(53,132,228,.5),0 0 2px rgba(255,255,255,.6)}.List__item.activatable.selected:active{box-shadow:inset 0 2px 3px -1px rgba(0,0,0,.5)}.List__item.activatable.selected:hover{background-color:#347cd3}.List__item.selected{outline-color:rgba(255,255,255,.8)}button.List__item{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;border:none;width:100%;text-align:left}button.List__item::before{opacity:0}.List.rich>.List__item{padding:8px 12px;min-height:32px;align-items:center}.List.rich>.List__item>.Label{flex:1;line-height:28px}.List.rich>.List__item>.Box{border-spacing:12px;align-items:center}.List.rich>.List__item>.Box>.Label:first-child{flex:1;white-space:nowrap}.List.rich>.List__item .Button{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;border:1px solid #dfdcd8}.List.rich>.List__item .Button::before{opacity:0}.List.rich>.List__item .Button.hover,.List.rich>.List__item .Button:hover{color:#2e3436;border-color:#cdc7c2;border-bottom-color:#bfb8b1;background-color:#f9f9f8;box-shadow:inset 0 1px #f4f2f1,0 1px 2px rgba(0,0,0,.07)}.List.rich>.List__item .Button.hover::before,.List.rich>.List__item .Button:hover::before{opacity:0}.List.rich>.List__item .Button.active,.List.rich>.List__item .Button:active{color:#2e3436;border-color:#cdc7c2;background-color:#d6d1cd;box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none}.List.rich>.List__item .Button.active::before,.List.rich>.List__item .Button:active::before{opacity:0}.List.sublist{width:100%;background-color:#f1f0ee;border-bottom:1px solid #cdc7c2;box-shadow:inset 0 1px rgba(0,0,0,.07)}.List__item.expandable.expanded:not(:hover){background-color:rgba(0,0,0,.02)}.List__item.expandable .Icon.arrow{opacity:.3;transition:all 150ms cubic-bezier(0.25, 0.46, 0.45, 0.94);transform:rotate(0)}.List__item.expandable.expanded .Icon.arrow{color:#3584e4;--icon-color: #3584e4;opacity:1;transform:rotate(90deg)}.stack-sidebar{background-color:#fbfafa}.stack-sidebar.separators:not(.horizontal)>.List__item:not(.separator):not(.increase-specificity){border-bottom:none}.stack-sidebar.separators:not(.horizontal)>.List__item:not(.separator):not(.increase-specificity):not(:first-child){border-top:1px solid #cdc7c2}.stack-sidebar .List__item{padding:10px 4px}.stack-sidebar .List__item>.Label{padding-left:6px;padding-right:6px}.stack-sidebar .List__item.needs-attention>.Label{background-size:6px 6px,0 0}.stack-sidebar .List__item.activatable:active,.stack-sidebar .List__item.activatable.selected:active{box-shadow:none}.navigation-sidebar:not(.increase-specificity){padding:5px 0;background-color:#fbfafa;border-color:#dfdcd8 !important}.navigation-sidebar:not(.increase-specificity)>.separator{padding:0;margin:0;height:10px;border:none;border-bottom:1px solid #dfdcd8 !important}.navigation-sidebar:not(.increase-specificity)>.List__item{padding:5px}.navigation-sidebar:not(.increase-specificity).medium>.List__item{min-height:26px}.navigation-sidebar:not(.increase-specificity).large>.List__item{min-height:36px}.navigation-sidebar:not(.increase-specificity)>.List__item.activatable{align-items:center;color:#2e3436;border-color:#dfdcd8 !important}.navigation-sidebar:not(.increase-specificity)>.List__item.activatable.selected:not(.increase-specificity){color:inherit;background-color:#e1dedb;text-shadow:none}.navigation-sidebar:not(.increase-specificity)>.List__item.title{opacity:.9;font-weight:700;padding:8px 5px}.app-notification{padding:10px;border-spacing:10px;border-radius:0 0 5px 5px;background-color:rgba(53,53,53,.7);background-image:linear-gradient(to bottom, rgba(0, 0, 0, 0.2), transparent 2px);background-clip:padding-box}.app-notification border{border:none}.Calendar{display:inline-flex !important;color:#000;border:1px solid #cdc7c2;width:226px}.Calendar>.Calendar__header{padding:2px}.Calendar>.Calendar__header>.Button{border:none;box-shadow:none;background:none;border-radius:5px}.Calendar>.Calendar__header>.Button:backdrop{background:none}.Calendar>.Calendar__header>.Calendar__previous,.Calendar>.Calendar__header>.Calendar__next{border-radius:5px}.Calendar.mode-month .Calendar__previous,.Calendar.mode-month .Calendar__next,.Calendar.mode-year .Calendar__previous,.Calendar.mode-year .Calendar__next{opacity:0}.Calendar>.Calendar__header>.Calendar__monthLabel,.Calendar>.Calendar__header>.Calendar__yearLabel{display:flex;align-items:center}.Calendar>.Calendar__header>.Calendar__monthLabel{flex:3;justify-content:center}.Calendar>.Calendar__header>.Calendar__yearLabel{flex:2;justify-content:flex-start}.Calendar .Calendar__grid{border:none;height:222px}.Calendar .Calendar__grid>*{width:100%;height:100%}.Calendar .Calendar__weekDays{font-size:9px;font-weight:700;opacity:.4}.Calendar .Calendar__weekDays>.Calendar__day{padding-top:.75rem;padding-bottom:.75rem}.Calendar .Calendar__day:not(.increase-specificity){width:100%;text-align:center}.Calendar .Calendar__day:not(.increase-specificity).day-0,.Calendar .Calendar__day:not(.increase-specificity).day-6{color:#829095}.Calendar .Calendar__day:not(.increase-specificity).other-month{color:rgba(130,144,149,.5)}.Calendar .Calendar__day:not(.increase-specificity)>.Button{display:inline-block;border:none;font-weight:inherit;font-size:12px;width:28px;height:28px;min-width:28px;min-height:28px}.Calendar .Calendar__day:not(.increase-specificity).today>.Button{font-weight:600;box-shadow:none}.Calendar .Calendar__day:not(.increase-specificity).selected>.Button{box-shadow:inset 0px 1px #cdc7c2;background-color:#c8c2bc}.Calendar .Calendar__day:not(.increase-specificity).today.selected>.Button{background-color:#1b6acb}.Calendar .Calendar__grid .Calendar__month{width:33%}.Calendar .Calendar__grid .Calendar__month .Button{width:100%;height:100%;padding:0;padding-top:10px;padding-bottom:10px;font-size:12px}.YearPicker .YearPicker__year .Button{width:100%;padding:0;padding-top:0px;padding-bottom:0px;height:unset;font-size:12px}.YearPicker .YearPicker__input{padding:0 .25rem}.YearPicker .YearPicker__input input[type=number]{text-align:center}.DatePicker__input .Icon{opacity:.5}.DatePicker__popover .Popover__container{padding:0}.DatePicker__popover .Calendar{border:none}.Window.dialog.message .titlebar{min-height:20px;background-image:none;background-color:#f6f5f4;border-style:none;border-top-left-radius:7px;border-top-right-radius:7px}.Window.dialog.message box.dialog-vbox.vertical{border-spacing:10px}.Window.dialog.message .Label.title{font-weight:800;font-size:15pt}.Window.dialog.message.csd.background{border-bottom-left-radius:9px;border-bottom-right-radius:9px}.Window.dialog.message.csd .dialog-action-area button{padding:10px 14px;border-radius:0;border-left-style:solid;border-right-style:none;border-bottom-style:none}.Window.dialog.message.csd .dialog-action-area button:first-child{border-left-style:none;border-bottom-left-radius:7px}.Window.dialog.message.csd .dialog-action-area button:last-child{border-bottom-right-radius:7px}.Window.assistant .sidebar{padding:5px;border-top:1px solid #cdc7c2}.Window.assistant.csd .sidebar{border-top-style:none}.Window.assistant .sidebar>.Label{padding:6px 12px}.Window.assistant .sidebar>.Label.highlight{background-color:#efedec;border-radius:5px}filechooser .dialog-action-box{border-top:1px solid #cdc7c2}filechooser #pathbarbox{border-bottom:1px solid #f6f5f4}filechooserbutton>button>box{border-spacing:6px}filechooserbutton.dnd-active{box-shadow:none;border-color:rgba(0,0,0,0)}.DropZone{color:#cdc7c2;border-color:#cdc7c2}row image.sidebar-icon{opacity:.7}placessidebar .navigation-sidebar>row{padding:0}placessidebar .navigation-sidebar>row>revealer{padding:0 14px}placessidebar .navigation-sidebar>row image.sidebar-icon:dir(ltr){padding-right:8px}placessidebar .navigation-sidebar>row image.sidebar-icon:dir(rtl){padding-left:8px}placessidebar .navigation-sidebar>row .Label.sidebar-label:dir(ltr){padding-right:2px}placessidebar .navigation-sidebar>row .Label.sidebar-label:dir(rtl){padding-left:2px}button.sidebar-button{min-height:26px;min-width:26px;margin-top:3px;margin-bottom:3px;padding:0;border-radius:100%}placessidebar .navigation-sidebar>row.selected:active{box-shadow:none}placessidebar .navigation-sidebar>row.sidebar-placeholder-row{padding:0 8px;min-height:2px;background-image:image(#2ec27e);background-clip:content-box}placessidebar .navigation-sidebar>row.sidebar-new-bookmark-row{color:#3584e4}placessidebar .navigation-sidebar>row.dnd-active:not(:disabled){color:#2ec27e;box-shadow:inset 0 1px #2ec27e,inset 0 -1px #2ec27e}placessidebar .navigation-sidebar>row.dnd-active:not(:disabled).selected{color:#fff;background-color:#2ec27e}placesview .server-list-button>image{transition:200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);-gtk-icon-transform:rotate(0turn)}placesview .server-list-button:checked>image{transition:200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);-gtk-icon-transform:rotate(-0.5turn)}placesview>actionbar>revealer>box>box{border-spacing:6px}video{background:#000}video image.osd{min-width:64px;min-height:64px;border-radius:32px}tooltip{padding:6px 10px;border-radius:8px;box-shadow:none}tooltip.background{background-color:rgba(0,0,0,.8);background-clip:padding-box;border:1px solid rgba(255,255,255,.1);color:#fff}tooltip>box{border-spacing:6px}colorswatch{transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}colorswatch{outline:0 solid rgba(0,0,0,0);outline-offset:6px}colorswatch:focus:focus-visible{outline-color:rgba(53,132,228,.5);outline-width:4px;outline-offset:-2px}colorswatch.dnd-active,colorswatch{border-style:none}colorswatch.top{border-top-left-radius:5.5px;border-top-right-radius:5.5px}colorswatch.top>overlay{border-top-left-radius:5px;border-top-right-radius:5px}colorswatch.bottom{border-bottom-left-radius:5.5px;border-bottom-right-radius:5.5px}colorswatch.bottom>overlay{border-bottom-left-radius:5px;border-bottom-right-radius:5px}colorswatch.left,colorswatch:first-child:not(.top){border-top-left-radius:5.5px;border-bottom-left-radius:5.5px}colorswatch.left>overlay,colorswatch:first-child:not(.top)>overlay{border-top-left-radius:5px;border-bottom-left-radius:5px}colorswatch.right,colorswatch:last-child:not(.bottom){border-top-right-radius:5.5px;border-bottom-right-radius:5.5px}colorswatch.right>overlay,colorswatch:last-child:not(.bottom)>overlay{border-top-right-radius:5px;border-bottom-right-radius:5px}colorswatch.dark>overlay{color:#fff}colorswatch.dark.activatable:hover>overlay{border-color:rgba(0,0,0,.8)}colorswatch.light>overlay{color:#000}colorswatch.light.activatable:hover>overlay{border-color:rgba(0,0,0,.5)}colorswatch.dnd-active{box-shadow:none}colorswatch.dnd-active.light>overlay{border-color:#2ec27e;box-shadow:inset 0 0 0 2px #27a56b,inset 0 0 0 1px #2ec27e}colorswatch.dnd-active.dark>overlay{border-color:#2ec27e;box-shadow:inset 0 0 0 2px rgba(0,0,0,.3),inset 0 0 0 1px #2ec27e}colorswatch>overlay{border:1px solid rgba(0,0,0,.3)}colorswatch.activatable:hover>overlay{box-shadow:inset 0 1px rgba(255,255,255,.4),inset 0 -1px rgba(0,0,0,.2)}colorswatch#add-color-button{border-radius:5px 0 0 5px}colorswatch#add-color-button:only-child{border-radius:5px}colorswatch#add-color-button>overlay{color:#2e3436;outline-color:rgba(53,132,228,.5);border-color:#cdc7c2;border-bottom-color:#bfb8b1;background-color:#f6f5f4;box-shadow:inset 0 1px #fff,0 1px 2px rgba(0,0,0,.07)}colorswatch#add-color-button>overlay::before{content:" ";position:absolute;pointer-events:none;width:100%;height:100%;top:0px;left:0px;background:linear-gradient(to top, rgba(0, 0, 0, 0.03), transparent);transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}colorswatch#add-color-button.activatable:hover>overlay{color:#2e3436;border-color:#cdc7c2;border-bottom-color:#bfb8b1;background-color:#f9f9f8;box-shadow:inset 0 1px #f4f2f1,0 1px 2px rgba(0,0,0,.07)}colorswatch#add-color-button.activatable:hover>overlay::before{opacity:0}colorswatch:disabled{opacity:.5}colorswatch:disabled>overlay{border-color:rgba(0,0,0,.6);box-shadow:none}row.selected colorswatch{box-shadow:0 0 0 2px #fff}colorswatch#editor-color-sample{border-radius:4px}colorswatch#editor-color-sample>overlay{border-radius:4.5px}plane{transition:all 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94)}plane{outline:0 solid rgba(0,0,0,0);outline-offset:6px}plane:focus:focus-visible{outline-color:rgba(53,132,228,.5);outline-width:2px;outline-offset:2px}colorchooser .Popover.osd{border-radius:5px}.content-view{background-color:#e6e3e0}.content-view:hover{-gtk-icon-filter:brightness(1.2)}.content-view .tile{margin:2px;background-color:rgba(0,0,0,0);border-radius:0;padding:0}.content-view .tile:active,.content-view .tile.selected{background-color:rgba(0,0,0,0)}.content-view .tile:disabled{background-color:rgba(0,0,0,0)}.osd .scale-popup button.flat{border-style:none;border-radius:5px}.scale-popup button:hover{color:inherit;border-color:rgba(0,0,0,0);background-color:rgba(0,0,0,0);box-shadow:inset 0 1px rgba(255,255,255,0);text-shadow:none;--icon-shadow: none;background-color:rgba(46,52,54,.1);border-radius:5px}.scale-popup button:hover::before{opacity:0}.Window{border-width:0px}.Window.csd{box-shadow:0 3px 9px 1px rgba(0,0,0,.5),0 0 0 1px rgba(0,0,0,.23);margin:0px;border-radius:8px 8px 0 0}.Window.csd:backdrop{box-shadow:0 3px 9px 1px rgba(0,0,0,0),0 2px 6px 2px rgba(0,0,0,.2),0 0 0 1px rgba(0,0,0,.18);transition:200ms ease-out}.Window.csd.popup{border-radius:5px;box-shadow:0 1px 2px rgba(0,0,0,.2),0 0 0 1px rgba(0,0,0,.13)}.Window.csd.dialog.message{border-radius:8px;box-shadow:0 1px 2px rgba(0,0,0,.2),0 0 0 1px rgba(0,0,0,.13)}.Window.csd.solid-csd{margin:0;padding:0;border:solid 1px #cdc7c2;border-radius:0;box-shadow:inset 0 0 0 3px #f1f0ee,inset 0 1px rgba(255,255,255,.8)}.Window.csd.solid-csd:backdrop{box-shadow:inset 0 0 0 3px #f6f5f4,inset 0 1px rgba(255,255,255,.8)}.Window.maximized,.Window.fullscreen,.Window.tiled,.Window.tiled-top,.Window.tiled-left,.Window.tiled-right,.Window.tiled-bottom{border-radius:0}.Window.popup{box-shadow:none}.Window.ssd{box-shadow:0 0 0 1px rgba(0,0,0,.23)}tooltip.csd{border-radius:5px;box-shadow:none}.view.selected:focus,.view.selected,.selected.IconView:focus,.selected.IconView,.Flowbox>.Flowbox__child.selected,.Grid>.Grid__child.selected,.Input>.Input__area>input::selection,.ModelButton.selected,.InputNumber:not(.vertical)>.Input__area>input::selection,.InputNumber.vertical>.Input__area>input>.Input__area>input::selection,.InputNumber.vertical>.Input__area>input::selection,.List__item.selected,.navigation-sidebar:not(.increase-specificity)>.selected.List__item.activatable,.Calendar .Calendar__day:not(.increase-specificity).today>.Button{background-color:#3584e4}.view.selected:focus,.view.selected,.selected.IconView:focus,.selected.IconView,.Flowbox>.Flowbox__child.selected,.Grid>.Grid__child.selected,.Input>.Input__area>input::selection,.ModelButton.selected,.InputNumber:not(.vertical)>.Input__area>input::selection,.InputNumber.vertical>.Input__area>input>.Input__area>input::selection,.InputNumber.vertical>.Input__area>input::selection,.List__item.selected,.navigation-sidebar:not(.increase-specificity)>.selected.List__item.activatable,.Calendar .Calendar__day:not(.increase-specificity).today>.Button{color:#fff}.Label.disabled::selection,.view.selected:disabled,.selected.IconView:disabled,.Flowbox>.Flowbox__child.selected:disabled,.Grid>.Grid__child.selected:disabled,.Input>.Input__area>input:disabled::selection,.ModelButton.selected:disabled,.InputNumber:not(.vertical)>.Input__area>input:disabled::selection,.InputNumber.vertical>.Input__area>input>.Input__area>input:disabled::selection,.InputNumber.vertical>.Input__area>input:disabled::selection,.List__item.selected:disabled,.navigation-sidebar:not(.increase-specificity)>.selected.List__item.activatable:disabled,.Calendar .Calendar__day:not(.increase-specificity).today>.Button:disabled{color:#9ac2f2}.monospace{font-family:monospace}shortcuts-section{margin:20px}.shortcuts-search-results{margin:20px;border-spacing:24px}shortcut{border-spacing:6px}shortcut>.keycap{min-width:20px;min-height:25px;margin-top:2px;padding-bottom:3px;padding-left:6px;padding-right:6px;color:#2e3436;background-color:#fff;border:1px solid;border-color:#e2dedb;border-radius:5px;box-shadow:inset 0 -3px #f8f7f6;font-size:smaller}:not(decoration):not(.Window).dnd-active:focus,:not(decoration):not(.Window).dnd-active{border-color:#2ec27e;box-shadow:inset 0 0 0 1px #2ec27e;caret-color:#2ec27e}.StackSwitcher>button.text-button{min-width:100px}.StackSwitcher.circular{border-spacing:12px}.StackSwitcher.circular>button.circular,.StackSwitcher.circular>button.text-button.circular{min-width:32px;min-height:32px;padding:0}.lowres-icon{--icon-shadow: 0 -1px rgba(0, 0, 0, 0.05), 1px 0 rgba(0, 0, 0, 0.1), 0 1px rgba(0, 0, 0, 0.3), -1px 0 rgba(0, 0, 0, 0.1)}.icon-dropshadow{--icon-shadow: 0 1px 12px rgba(0, 0, 0, 0.05), 0 -1px rgba(0, 0, 0, 0.05), 1px 0 rgba(0, 0, 0, 0.1), 0 1px rgba(0, 0, 0, 0.3), -1px 0 rgba(0, 0, 0, 0.1)}popover.emoji-picker>.Popover__container{padding:0}.emoji-searchbar{padding:6px;border-spacing:6px;border-bottom:1px solid #cdc7c2}.emoji-toolbar{padding:6px;border-spacing:6px;border-top:1px solid #cdc7c2}button.emoji-section{border-color:rgba(0,0,0,0);border-width:3px;border-style:none none solid;border-radius:0;padding:3px 0 0;min-width:32px;min-height:28px;background:none;box-shadow:none;text-shadow:none}button.emoji-section:hover{border-color:#cdc7c2}button.emoji-section:checked{border-color:#3584e4}popover.emoji-picker emoji{font-size:x-large;padding:6px;border-radius:6px}popover.emoji-picker emoji:focus,popover.emoji-picker emoji:hover{background:#3584e4}emoji-completion-row>box{border-spacing:10px;padding:2px 10px}emoji-completion-row:focus,emoji-completion-row:hover{background-color:#3584e4;color:#fff}emoji-completion-row emoji:focus,emoji-completion-row emoji:hover{background-color:#efedec}popover.entry-completion>.Popover__container{padding:0}statusbar{padding:6px 10px 6px 10px}@define-color theme_fg_color #2e3436;@define-color theme_text_color black;@define-color theme_bg_color #f6f5f4;@define-color theme_base_color #ffffff;@define-color theme_selected_bg_color #3584e4;@define-color theme_selected_fg_color #ffffff;@define-color insensitive_bg_color #f7f6f5;@define-color insensitive_fg_color #929595;@define-color insensitive_base_color #ffffff;@define-color theme_unfocused_fg_color #929595;@define-color theme_unfocused_text_color black;@define-color theme_unfocused_bg_color #f6f5f4;@define-color theme_unfocused_base_color #fcfcfc;@define-color theme_unfocused_selected_bg_color #3584e4;@define-color theme_unfocused_selected_fg_color #ffffff;@define-color unfocused_insensitive_color #d4cfca;@define-color borders #cdc7c2;@define-color unfocused_borders #d5d0cc;@define-color warning_color #f57900;@define-color error_color #cc0000;@define-color success_color #33d17a;@define-color wm_title shade(#2e3436, 1.8);@define-color wm_unfocused_title #929595;@define-color wm_highlight rgba(255, 255, 255, 0.8);@define-color wm_borders_edge rgba(255, 255, 255, 0.8);@define-color wm_bg_a shade(#f6f5f4, 1.2);@define-color wm_bg_b #f6f5f4;@define-color wm_shadow alpha(black, 0.35);@define-color wm_border alpha(black, 0.18);@define-color wm_button_hover_color_a shade(#f6f5f4, 1.3);@define-color wm_button_hover_color_b #f6f5f4;@define-color wm_button_active_color_a shade(#f6f5f4, 0.85);@define-color wm_button_active_color_b shade(#f6f5f4, 0.89);@define-color wm_button_active_color_c shade(#f6f5f4, 0.9);@define-color content_view_bg #ffffff;@define-color text_view_bg #ffffff`;

const currentStyles = {
  theme: null,
  styleNode: null
};
class Adwaita {
  static currentTheme() {
    return currentStyles.theme;
  }
  static changeToLightTheme() {
    if (currentStyles.theme === "light")
      return;
    if (currentStyles.styleNode) {
      currentStyles.styleNode.textContent = adwaita_default;
      currentStyles.theme = "light";
    }
  }
  static changeToDarkTheme() {
    if (currentStyles.theme === "dark")
      return;
    if (currentStyles.styleNode) {
      currentStyles.styleNode.textContent = adwaita_dark_default;
      currentStyles.theme = "dark";
    }
  }
}
if (typeof document !== "undefined") {
  const styleEl = document.createElement("style");
  styleEl.type = "text/css";
  currentStyles.styleNode = styleEl;
  document.head.appendChild(styleEl);
  Adwaita.changeToLightTheme();
}

const SvgAcAdapterSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fontWeight: 400,
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    d: "M8.78 5.008a1.023 1.023 0 00-.47.281l-3.03 3c-.236.23-.345.583-.282.906v.813h2.47L6.282 11.28c-.214.22-.321.54-.281.844a1.464 1.464 0 000 .094V13h1a1.03 1.03 0 00.719-.281l3-2.993c.183-.19.287-.454.281-.718a.87.87 0 000-.125v-.875H8.436l1.312-1.282a1.03 1.03 0 00.281-.843 1.464 1.464 0 000-.094v-.781h-1a1.015 1.015 0 00-.25 0z",
    fontSize: "xx-small",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469.04c-.489 0-.794.213-1.03.452C4.204.732 4 1.046 4 1.52v.501H2v13.916l12.003.002V2.021H12v-.416a1.616 1.616 0 00-.418-1.012c-.236-.278-.621-.583-1.197-.55l.054-.003zm.529 1.995l4.006.002v1.98h2v9.924H3.996V4.018h2.002z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.5
  }))));
  return render(rest, ...restArgs);
};
const Memo = memo(SvgAcAdapterSymbolic);
var ac_adapter_symbolic_default = Memo;

const SvgAccessoriesCalculatorSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.031 0c-.542 0-1 .329-1 .938v14.124c0 .587.377.938 1 .938h13.031c.52 0 .938-.351.938-.938V.938A.908.908 0 0015.062 0zM3 2.031h11.031V5H3zM3.188 6h1.624A.18.18 0 015 6.188v1.625A.18.18 0 014.812 8H3.188A.179.179 0 013 7.812V6.188a.18.18 0 01.188-.187zm3 0h1.625A.18.18 0 018 6.188v1.625A.18.18 0 017.812 8H6.188A.179.179 0 016 7.812V6.188a.18.18 0 01.188-.187zm3 0h1.624a.18.18 0 01.188.188v1.625a.18.18 0 01-.188.187H9.188A.179.179 0 019 7.812V6.188a.18.18 0 01.188-.187zm3 0h1.624a.18.18 0 01.188.188v1.625a.18.18 0 01-.188.187h-1.624A.179.179 0 0112 7.812V6.188a.18.18 0 01.188-.187zm-9 3h1.624A.18.18 0 015 9.188v1.624a.18.18 0 01-.188.188H3.188A.179.179 0 013 10.812V9.188C3 9.076 3.077 9 3.188 9zm3 0h1.625A.18.18 0 018 9.188v1.624a.18.18 0 01-.188.188H6.188A.179.179 0 016 10.812V9.188C6 9.076 6.077 9 6.188 9zm3 0h1.624a.18.18 0 01.188.188v1.624a.18.18 0 01-.188.188H9.188A.179.179 0 019 10.812V9.188C9 9.076 9.077 9 9.188 9zm3 0h1.624a.18.18 0 01.188.188v1.624a.18.18 0 01-.188.188h-1.624a.179.179 0 01-.188-.188V9.188A.18.18 0 0112.188 9zm-9 3h1.624a.18.18 0 01.188.188v1.624a.18.18 0 01-.188.188H3.188A.179.179 0 013 13.812v-1.624A.18.18 0 013.188 12zm3 0h1.625a.18.18 0 01.187.188v1.624a.18.18 0 01-.188.188H6.188A.179.179 0 016 13.812v-1.624A.18.18 0 016.188 12zm3 0h1.624a.18.18 0 01.188.188v1.624a.18.18 0 01-.188.188H9.188A.179.179 0 019 13.812v-1.624A.18.18 0 019.188 12zm3 0h1.624a.18.18 0 01.188.188v1.624a.18.18 0 01-.188.188h-1.624a.179.179 0 01-.188-.188v-1.624a.18.18 0 01.188-.188z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$1 = memo(SvgAccessoriesCalculatorSymbolic);
var accessories_calculator_symbolic_default = Memo$1;

const SvgAccessoriesCharacterMapSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.702 1C2.17 1 .984 2.32.984 3.844v8.344c0 1.524 1.185 2.843 2.718 2.843h8.58c1.532 0 2.75-1.32 2.75-2.844V3.845c0-1.525-1.218-2.844-2.75-2.844zm.782 1.031c3.526.256 5.317.134 7.047 0 .754-.058 1.532.616 1.532 1.438v7.375c0 .665-.532 1.095-1.188 1.187-2.836.397-4.753.44-7.673 0-.655-.099-1.187-.522-1.187-1.187V3.5c0-.822.714-1.524 1.469-1.469z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10.564 5.977l-2.939.044.016 1 2.879-.043c.2.018.33.076.396.135.067.06.105.121.105.293l-.008.604H8.517l.037.002a1.457 1.457 0 00-1.164.43 1.558 1.558 0 00-.416 1.023c-.013.367.092.75.352 1.053.26.303.687.496 1.162.482h3.482l.051-3.59v-.004c0-.402-.16-.786-.435-1.035-.276-.249-.63-.364-.998-.393zM8.48 9.01h2.519l-.014.99H8.457c-.22.007-.302-.051-.371-.133a.553.553 0 01-.112-.367.587.587 0 01.141-.371c.079-.083.163-.134.363-.12zm2.862-5.985l-3 1 .316.95 3-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2 = memo(SvgAccessoriesCharacterMapSymbolic);
var accessories_character_map_symbolic_default = Memo$2;

const SvgAccessoriesDictionarySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.57 1.184c-.567.078-1.251.35-2.015.753-1.541-.844-2.741-.896-3.748-.638-1.07.274-1.938.722-3.291.681L0 1.965v10.81h.5c1.322 0 2.48-.601 3.555-.867 1.075-.265 1.992-.296 3.144.738l.338.305.336-.308c1.119-1.033 2.01-1.004 3.074-.74 1.065.263 2.224.864 3.55.872l.503.004V1.982L14.482 2c-1.516.055-2.27-.394-3.25-.684a3.84 3.84 0 00-1.662-.132zm.11.96c.478-.07.854.01 1.267.131.726.215 1.679.602 3.053.664v8.707c-.875-.127-1.778-.459-2.812-.714-1.12-.277-2.408-.163-3.655.8-1.278-.967-2.586-1.074-3.717-.795-1.043.258-1.946.59-2.816.711v-8.73c1.274-.073 2.247-.444 3.055-.65.924-.237 1.727-.287 3.242.623l.252.152.254-.147C8.62 2.43 9.2 2.214 9.68 2.145z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 2.397h1V12H7z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M0 2.5V16h15V2.518h-2V14H2V2.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M.938 14.75v-2.188l4.219-1.13 2.343.597 2.387-.671 3.742 1.003v2.451z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.3
  }))));
  return render(rest, ...restArgs);
};
const Memo$3 = memo(SvgAccessoriesDictionarySymbolic);
var accessories_dictionary_symbolic_default = Memo$3;

const SvgAccessoriesTextEditorSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.007",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.5 6.007a.5.5 0 100 1h6a.5.5 0 100-1zm0 2a.5.5 0 100 1h5a.5.5 0 100-1zm0 2a.5.5 0 100 1h6a.5.5 0 100-1zm0 2a.5.5 0 100 1h3a.5.5 0 100-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 1.007c-1.09 0-2 .91-2 2v11c0 1.09.91 2 2 2h9c1.09 0 2-.91 2-2v-11c0-1.09-.91-2-2-2v13H4v-13z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.492 0A.5.5 0 005 .506v3a.5.5 0 101 0v-3A.5.5 0 005.492 0zm2 0A.5.5 0 007 .506v3a.5.5 0 101 0v-3A.5.5 0 007.492 0zm2 0A.5.5 0 009 .506v3a.5.5 0 101 0v-3A.5.5 0 009.492 0zm2 0A.5.5 0 0011 .506v3a.5.5 0 101 0v-3A.5.5 0 0011.492 0z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4 = memo(SvgAccessoriesTextEditorSymbolic);
var accessories_text_editor_symbolic_default = Memo$4;

const SvgActionUnavailableSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1c3.863 0 7 3.137 7 7s-3.137 7-7 7-7-3.137-7-7 3.137-7 7-7zm0 2a4.93 4.93 0 00-2.75.813l6.937 6.937A4.93 4.93 0 0013 8c0-2.76-2.24-5-5-5zM3.812 5.25A4.93 4.93 0 003 8c0 2.76 2.24 5 5 5a4.93 4.93 0 002.75-.813z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$5 = memo(SvgActionUnavailableSymbolic);
var action_unavailable_symbolic_default = Memo$5;

const SvgAddressBookNewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1C1 1 1 3 1 3h8V1zm9 6v7H1s0 2 2 2h9s.459.014.947-.23C13.436 15.525 14 14.833 14 14V7z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M.5 4h2a.499.499 0 110 1h-2a.499.499 0 110-1zm0 2h2a.499.499 0 110 1h-2a.499.499 0 110-1zm0 2h2a.499.499 0 110 1h-2a.499.499 0 110-1zm0 2h2a.499.499 0 110 1h-2a.499.499 0 110-1zm0 2h2a.499.499 0 110 1h-2a.499.499 0 110-1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.285 5.004A3.506 3.506 0 004.027 8.94 3.506 3.506 0 007.515 12a5.68 5.68 0 001.644-.276l-.316-.949S8.137 11 7.512 11H7.51a2.494 2.494 0 01-2.49-2.186 2.495 2.495 0 011.867-2.738 2.797 2.797 0 011.808.164c.526.241.89.63 1.004 1.059.124.464.087.97-.084 1.275-.098.176-.403.354-.615.426v-.5C9 7.677 8.323 7 7.5 7 6.678 7 6 7.677 6 8.5c0 .822.678 1.5 1.5 1.5.176 0 .343-.037.5-.094v.045l.45.047c.941.096 1.692-.317 2.038-.936.347-.618.355-1.357.178-2.021-.208-.784-.82-1.372-1.554-1.709a3.75 3.75 0 00-1.827-.328zM7.5 8c.282 0 .5.218.5.5 0 .282-.218.5-.5.5a.493.493 0 01-.5-.5c0-.282.218-.5.5-.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 .005v1.997h-2v1.996h2v1.997h2V3.998h2V2.002h-2V.005z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6 = memo(SvgAddressBookNewSymbolic);
var address_book_new_symbolic_default = Memo$6;

const SvgAirplaneModeSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.497 1c-.794.001-.781.033-.532 1.031L7.59 7h-4.5L1.872 5.219C1.732 5.009 1.749 5 1.528 5h-.219c-.428 0-.281.438-.281.438L1.309 8l-.281 2.563s-.14.437.25.437h.25c.211 0 .204-.009.344-.219L3.09 9h4.5l-1.625 4.938C5.704 14.983 5.701 15 6.497 15c.432 0 .433-.012.718-.5L10.903 9h3.094c.554 0 1-.446 1-1s-.446-1-1-1h-3.094L7.215 1.5c-.266-.457-.283-.498-.656-.5z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7 = memo(SvgAirplaneModeSymbolic);
var airplane_mode_symbolic_default = Memo$7;

const SvgAlarmSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.011",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.492 5.993A.5.5 0 007 6.501V9H5.5a.5.5 0 100 1h2a.5.5 0 00.5-.5v-3a.5.5 0 00-.508-.508z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.5 3C3.922 3 1 5.924 1 9.5 1 13.08 3.922 16 7.5 16S14 13.08 14 9.5C14 5.924 11.078 3 7.5 3zm0 2C9.997 5 12 7.005 12 9.5c0 2.498-2.003 4.5-4.5 4.5A4.485 4.485 0 013 9.5C3 7.005 5.003 5 7.5 5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4.12 12.897a1 1 0 00-.692.291l-1.125 1.094a1 1 0 101.394 1.436l1.125-1.094a1 1 0 00-.703-1.727zm6.913.094a1 1 0 00-.68 1.68l.907 1a1 1 0 101.48-1.342l-.906-1a1 1 0 00-.8-.338z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.111 1.421a2.5 2.5 0 00-.69 3.468L5.58 2.11a2.5 2.5 0 00-3.468-.69zm10.778 0a2.5 2.5 0 01.69 3.468L9.42 2.11a2.5 2.5 0 013.468-.69z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8 = memo(SvgAlarmSymbolic);
var alarm_symbolic_default = Memo$8;

const SvgAppletsScreenshooterSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M14 0c1.2 0 2 .798 2 2v4h-2V2.25c0-.124-.057-.25-.188-.25H2.188C2.056 2 2 2.126 2 2.25V14c-1.2 0-2-.923-2-2.125V2C0 .798.8 0 2 0z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.25 6c-.471 0-.743.542-.75 1v1H4c-.469.065-1 .542-1 1v6c0 .458.527 1 1 1h10c.473 0 1-.542 1-1V9c0-.458-.527-1-1-1h-2.5V7c0-.458-.341-1-.813-1zM9 9a3 3 0 110 6 3 3 0 010-6z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 12a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$9 = memo(SvgAppletsScreenshooterSymbolic);
var applets_screenshooter_symbolic_default = Memo$9;

const SvgApplicationCertificateSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 2c-.524 0-1 .476-1 1v10c0 .524.476 1 1 1h3v-2s-1.993-.021-2 0V4h11v8h-1v2h2c.52 0 1-.435 1-1V3c0-.467-.437-1-1-1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 8.063a3 3 0 01-6 0 3 3 0 116 0z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 9l-2 7h1l2-2 2 2h1l-2-7",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$a = memo(SvgApplicationCertificateSymbolic);
var application_certificate_symbolic_default = Memo$a;

const SvgApplicationExitSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.014 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 1s-.459-.014-.947.23C2.564 1.475 2 2.167 2 3v10c0 .833.564 1.525 1.053 1.77.488.244.947.23.947.23h8c.833 0 1.525-.564 1.77-1.053.244-.488.23-.947.23-.947v-2a1 1 0 10-2 0v2H4V3h8v2a1 1 0 102 0V3c0-.833-.564-1.525-1.053-1.77C12.46.986 12 1 12 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.293 5.293L5.586 8l2.707 2.707 1.414-1.414L8.414 8l1.293-1.293z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 10h1v1H9zm0-5h1v1H9z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 5c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm0 4c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 7a1 1 0 100 2h7a1 1 0 100-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$b = memo(SvgApplicationExitSymbolic);
var application_exit_symbolic_default = Memo$b;

const SvgApplicationRssXmlSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 12a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 6h1.014v1.014H2zm7.014 7.014H10V14h-.986zm4 0H14V14h-.986zM2 2h1.014v1.014H2z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.014 8.014c2.774 0 5 2.227 5 5h2c0-3.854-3.145-7-7-7z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.014 4.028a8.972 8.972 0 018.987 8.986h2C14 6.96 9.07 2.028 3.014 2.028z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 7a1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1 1 1 0 011 1zm0-4a1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1 1 1 0 011 1zm6 10a1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1 1 1 0 011 1zm4 0a1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1 1 1 0 011 1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$c = memo(SvgApplicationRssXmlSymbolic);
var application_rss_xml_symbolic_default = Memo$c;

const SvgApplicationXAddonSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.5 1C5.669 1 5 1.669 5 2.5V4H2c-.554 0-1 .446-1 1v3h1.5C3.331 8 4 8.669 4 9.5S3.331 11 2.5 11H1v3c0 .554.446 1 1 1h3v-1.5c0-.831.669-1.5 1.5-1.5s1.5.669 1.5 1.5V15h3c.554 0 1-.446 1-1v-3h1.5c.831 0 1.5-.669 1.5-1.5S14.331 8 13.5 8H12V5c0-.554-.446-1-1-1H8V2.5C8 1.669 7.331 1 6.5 1z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$d = memo(SvgApplicationXAddonSymbolic);
var application_x_addon_symbolic_default = Memo$d;

const SvgApplicationXApplianceSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.017 16.017",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 2a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2zm0 12a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2zm12 0a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2zm0-12a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1 1v14h14V1zm2 2h10v10H3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 5v6h6V5zm1 1h4v4H6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 10.5a1.5 1.5 0 01-1.5 1.5A1.5 1.5 0 019 10.5 1.5 1.5 0 0110.5 9a1.5 1.5 0 011.5 1.5zm-5 0A1.5 1.5 0 015.5 12 1.5 1.5 0 014 10.5 1.5 1.5 0 015.5 9 1.5 1.5 0 017 10.5zm0-4.984A1.5 1.516 0 015.5 7.03 1.5 1.516 0 014 5.516 1.5 1.516 0 015.5 4 1.5 1.516 0 017 5.516zm5-.016A1.5 1.5 0 0110.5 7 1.5 1.5 0 019 5.5 1.5 1.5 0 0110.5 4 1.5 1.5 0 0112 5.5z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10.854 10.146l-.708.708 3.5 3.5.708-.708zm-5.708 0l-3.5 3.5.708.708 3.5-3.5zm8.52-8.453l-3.5 3.47.703.71 3.5-3.469zm-11.264.002l-.707.707L5.12 5.826l.707-.707z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$e = memo(SvgApplicationXApplianceSymbolic);
var application_x_appliance_symbolic_default = Memo$e;

const SvgApplicationXExecutableSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.188 2.281c-.094.056-.192.125-.29.19L5.566 3.803a1.684 1.684 0 11-2.17 2.17L2.332 7.037c.506-.069 1.017-.136 1.2.026.242.214.139 1.031.155 1.656.213.088.427.171.657.219.04.008.085-.007.125 0 .337-.525.683-1.288 1-1.344.322-.057.905.562 1.406.937a3.67 3.67 0 00.656-.468c-.195-.595-.594-1.369-.437-1.657.158-.29 1.019-.37 1.625-.531.028-.183.062-.371.062-.562 0-.075-.027-.146-.031-.22-.587-.217-1.435-.385-1.562-.687-.128-.302.34-1.021.593-1.593a3.722 3.722 0 00-.593-.532zm3.875 3.25c-.165.475-.305 1.086-.47 1.563-.43.047-.84.14-1.218.312-.38-.322-.787-.773-1.156-1.093a5.562 5.562 0 00-.688.468c.177.46.453 1.001.625 1.469-.298.309-.531.67-.719 1.063-.494 0-1.102-.084-1.593-.094a5.68 5.68 0 00-.219.812c.435.24 1.006.468 1.438.72-.006.093-.032.185-.032.28 0 .333.049.66.125.97-.382.304-.898.63-1.28.937.015.044.04.083.058.127l.613.613c.417-.1.868-.223 1.266-.303.248.343.532.626.875.875-.027.135-.068.283-.104.428.174-.063.34-.155.482-.297l1.432-1.432a1.994 1.994 0 01.533-3.918c.919 0 1.684.623 1.918 1.467l1.338-1.338c.06-.06.11-.124.156-.191-.035-.062-.06-.13-.1-.188.096-.152.205-.31.315-.47.017-.348-.1-.7-.37-.971l-.177-.176c-.28.192-.561.387-.83.555-.345-.233-.746-.383-1.156-.5-.077-.507-.107-1.132-.187-1.625a5.44 5.44 0 00-.875-.063zm-9.247.608c-.087.068-.173.138-.254.205l.014.035z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.707.293a1 1 0 00-1.415 0l-6.999 7a1 1 0 000 1.413l7 7.001a1 1 0 001.415 0l7-7a1 1 0 000-1.413zm-.708 2.121l5.587 5.587L8 13.586 2.414 7.999z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$f = memo(SvgApplicationXExecutableSymbolic);
var application_x_executable_symbolic_default = Memo$f;

const SvgApplicationXFirmwareSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.014 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.514 6.014c-.822 0-1.5.678-1.5 1.5 0 .823.678 1.5 1.5 1.5.823 0 1.5-.677 1.5-1.5 0-.822-.677-1.5-1.5-1.5zm0 1c.282 0 .5.218.5.5 0 .282-.218.5-.5.5a.493.493 0 01-.5-.5c0-.282.218-.5.5-.5zm-5 3v1h1.213l1.75 3h2.037v-1H4.051l-1.75-3zm14-1c-.822 0-1.5.678-1.5 1.5 0 .823.678 1.5 1.5 1.5.823 0 1.5-.677 1.5-1.5 0-.822-.677-1.5-1.5-1.5zm0 1c.282 0 .5.218.5.5 0 .282-.218.5-.5.5a.493.493 0 01-.5-.5c0-.282.218-.5.5-.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M.514 7.014v1h1.213l1.75 3h9.787v-1H4.051l-1.75-3zm0-3v1h3.004l1.043 1.672.848-.531-1.336-2.14zm2.03-2.996v1l2.687.002.605 1.002.856-.516-.897-1.486z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.446 10.262l-.863.504 1.125 1.938.863-.504zm-2.998.002l-.867.5 1.156 2 .867-.5zm-2.985.031l-.898.438.969 2 .898-.438z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.014.014v1h-1v1h-1v1h1v1h-1v1h1v1h-1v1h1v1h1v1h1v-1h1v1h1v-1h1v1h1v-1h1v-1h1v-1h-1v-1h1v-1h-1v-1h1v-1h-1v-1h-1v-1h-1v1h-1v-1h-1v1h-1v-1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.514 12.014c-.822 0-1.5.678-1.5 1.5 0 .823.678 1.5 1.5 1.5.823 0 1.5-.677 1.5-1.5 0-.822-.677-1.5-1.5-1.5zm0 1c.282 0 .5.218.5.5 0 .282-.218.5-.5.5a.493.493 0 01-.5-.5c0-.282.218-.5.5-.5zm-3-1c-.822 0-1.5.678-1.5 1.5 0 .823.678 1.5 1.5 1.5.823 0 1.5-.677 1.5-1.5 0-.822-.677-1.5-1.5-1.5zm0 1c.282 0 .5.218.5.5 0 .282-.218.5-.5.5a.493.493 0 01-.5-.5c0-.282.218-.5.5-.5zm-3-1c-.822 0-1.5.678-1.5 1.5 0 .823.678 1.5 1.5 1.5.823 0 1.5-.677 1.5-1.5 0-.822-.677-1.5-1.5-1.5zm0 1c.282 0 .5.218.5.5 0 .282-.218.5-.5.5a.493.493 0 01-.5-.5c0-.282.218-.5.5-.5zm-5-13c-.822 0-1.5.678-1.5 1.5 0 .823.678 1.5 1.5 1.5.823 0 1.5-.677 1.5-1.5 0-.822-.677-1.5-1.5-1.5zm0 1c.282 0 .5.218.5.5 0 .282-.218.5-.5.5a.493.493 0 01-.5-.5c0-.282.218-.5.5-.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$g = memo(SvgApplicationXFirmwareSymbolic);
var application_x_firmware_symbolic_default = Memo$g;

const SvgApplicationsEngineeringSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.997 8c-3.999 0-5.998 3-5.998 6H.25c-.25 0-.25.157-.25.25v1.5c0 .25.138.25.25.25h15.494c.195.006.25-.13.25-.25v-1.5c.021-.146 0-.25-.25-.25h-1.75c0-3-1.999-6-5.997-6zm0 3c2.35 0 2.999 1.762 2.999 3H4.998c0-1.198.703-3 2.999-3z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14.989.6a3.652 3.652 0 00-.967-.561l-.021 2.232c-.005.458-.452.729-1.006.729h-1c-.553-.007-1.003-.31-.998-.768L11.018 0a3.646 3.646 0 00-.977.536c-1.377 1.114-1.395 2.95-.04 4.098.284.24.624.42.967.562.028.011.028 2.054.028 2.054C12.486 8 13.346 9 13.995 10V5.252a3.55 3.55 0 00.954-.554c1.377-1.114 1.395-2.949.04-4.098z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$h = memo(SvgApplicationsEngineeringSymbolic);
var applications_engineering_symbolic_default = Memo$h;

const SvgApplicationsGamesSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.246 3c-.153 0-.256.073-.291.203L.26 11.824C.035 12.67 1.821 13.681 3 13l2.75-4h4.5L13 13c1.178.68 2.965-.33 2.738-1.176l-1.693-8.62c-.035-.131-.14-.204-.291-.204zM4.25 4h.5a.25.25 0 01.25.25V5h.75a.25.25 0 01.25.25v.5a.25.25 0 01-.25.25H5v.75a.25.25 0 01-.25.25h-.5A.25.25 0 014 6.75V6h-.75A.25.25 0 013 5.75v-.5A.25.25 0 013.25 5H4v-.75A.25.25 0 014.25 4zm6.25.75a.75.75 0 110 1.5.75.75 0 010-1.5zm2 1a.75.75 0 110 1.5.75.75 0 010-1.5z",
    color: "#000",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$i = memo(SvgApplicationsGamesSymbolic);
var applications_games_symbolic_default = Memo$i;

const SvgApplicationsGraphicsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.892.003c-2.11.03-4.945.802-4.897 3.28.05 2.587 2.917 1.662 3.15 2.719.035-.045.088-.082.125-.125.197-.214.395-.388.593-.594.312-.352.636-.679.967-1.031 1.106-1.178 1.154-1.25 3.796-3.25-1.035-.62-2.258-.965-3.297-1-.134-.004-.296-.001-.437 0zm-1.903 1.53c.827 0 1.497.672 1.497 1.5a1.499 1.499 0 11-1.497-1.5zm7.269.662C11.84 4.43 10.89 5.751 9.888 6.783c-.639.657-1.163 1.311-1.622 1.78-.839.891-1.938 1.942-3.15 3.094.063 1.469.81 2.746 3.244 3.218 3.898.756 8.027-1.824 7.611-7.061-.178-2.248-1.405-4.281-2.713-5.619zm.342 3.807a1 1 0 010 2 1 1 0 010-2zm-.624 3a1 1 0 010 1.999 1 1 0 010-2zM7.986 11a1 1 0 010 2 1 1 0 010-2zm2.994 0a1 1 0 010 2 1 1 0 010-2zM0 13.5c1.552 0 1.394-1.788 2.147-2.286.874-.577 1.639.138 1.792.726.192.742-.117 1.631-1.13 1.885-1.074.268-2.662.276-2.809-.326z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14.037.003c-1.8 1.299-4.206 3.302-6.115 5.333-.173.185-.34.363-.504.547-.104.108-.212.196-.315.308-.066.077-.126.163-.19.24-1.873 2.07-3.72 4.68-4.917 6.632 2.978-2.297 4.916-4.165 6.147-5.47.24-.246.53-.567.85-.923 1.204-1.335 2.926-3.438 5.044-6.667z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$j = memo(SvgApplicationsGraphicsSymbolic);
var applications_graphics_symbolic_default = Memo$j;

const SvgApplicationsMultimediaSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9 8v4.281A1.995 1.995 0 008 12a2 2 0 102 2V9h4v3.281A1.995 1.995 0 0013 12a2 2 0 102 2V8h-5z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.969 0S1 1 1 2v12c0 1.01-1 2-1 2h1s.423-.427.719-1h1C2.423 15.573 2 16 2 16h1s1-1.021 1-2v-2h1v-1H4V6h8v1h3V2c0-1 .969-2 .969-2h-3S12 1 12 2v3H4V2c0-1 .969-2 .969-2zm.312 1h1c-.152.306-.28.652-.28 1H2c0-.348.128-.694.28-1zm11 0h1c-.152.306-.28.652-.28 1h-1c0-.348.128-.694.28-1zM2.001 3h1v1H2zm11 0h1v1h-1zM2 5h1v1H2zm11 0h1v1h-1zM2 7h1v1H2zm0 2h1v1H2zm0 2h1v1H2zm0 2h1v1H2z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$k = memo(SvgApplicationsMultimediaSymbolic);
var applications_multimedia_symbolic_default = Memo$k;

const SvgApplicationsScienceSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.011.1a1 1 0 00-.486 1.873l.49.273V4.93c-.13.204-.248.386-.437.713-.273.47-.608 1.062-.97 1.709a514.615 514.615 0 00-2.202 3.994c-.573 1.047-.55 2.454.3 3.514.674.9 1.739 1.14 2.62 1.14h7.35c.882 0 1.947-.24 2.62-1.142.85-1.06.87-2.465.297-3.512-1.163-2.369-2.474-4.219-3.562-6.397v-2.7l.49-.276A1 1 0 0011.035.1zm2.004 2h2.016v3.107a1 1 0 00.101.44c1.202 2.457 2.574 4.343 3.686 6.617a1 1 0 00.02.04c.24.44.253.884-.1 1.315a1 1 0 00-.035.045c-.145.199-.487.336-1.028.336h-7.35c-.54 0-.882-.137-1.027-.336a1 1 0 00-.035-.045c-.354-.431-.341-.875-.101-1.314a512.447 512.447 0 012.193-3.979 128.3 128.3 0 01.951-1.68c.263-.453.491-.812.518-.849a1 1 0 00.191-.59z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.219 9.002L4 13h8L9.781 9z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.25
  }))));
  return render(rest, ...restArgs);
};
const Memo$l = memo(SvgApplicationsScienceSymbolic);
var applications_science_symbolic_default = Memo$l;

const SvgApplicationsSystemSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1c-.22 0-.44.011-.656.031l-.406 2.094a5.012 5.012 0 00-.969.312L4.438 1.97c-.389.23-.727.514-1.063.812l.906 1.906a5.057 5.057 0 00-.593.813L1.594 5.22a6.91 6.91 0 00-.406 1.28l1.843 1a4.826 4.826 0 00-.03.5c0 .173.013.332.03.5l-1.843 1c.097.445.228.872.406 1.281l2.094-.281c.17.29.371.563.593.812l-.906 1.907c.336.298.674.582 1.063.812l1.531-1.469c.306.137.634.24.969.313l.406 2.094a7.118 7.118 0 001.312 0l.407-2.094c.334-.073.663-.176.968-.313l1.532 1.47c.388-.23.727-.515 1.062-.813l-.906-1.907a5.11 5.11 0 00.594-.812l2.093.281a6.91 6.91 0 00.407-1.281l-1.844-1c.017-.168.031-.327.031-.5s-.014-.332-.031-.5l1.844-1a6.908 6.908 0 00-.407-1.281l-2.093.281a5.057 5.057 0 00-.594-.813l.906-1.906c-.335-.298-.674-.582-1.062-.812L10.03 3.437a5.015 5.015 0 00-.968-.312l-.407-2.094A7.118 7.118 0 008 1zm0 4a3 3 0 110 6 3 3 0 010-6z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$m = memo(SvgApplicationsSystemSymbolic);
var applications_system_symbolic_default = Memo$m;

const SvgApplicationsUtilitiesSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.934 0h.132C4.692 0 6 1.332 6 2.986v10.028C6 14.668 4.692 16 3.066 16h-.132C1.308 16 0 14.668 0 13.014V2.986C0 1.332 1.308 0 2.934 0zm2.594 0c.878.714 1.469 1.793 1.469 3v1h2.125c-.075-1.092 1.248-2 2-2 .68 0 1 .012 1 1v1h1.218c1.229-.6 1.782-1.969 1.782-2.687 0-.736-2.386-1.312-3.688-1.312zM7 5v4.313c2.766 2.662 6.125 2.406 6.125 2.406s.353-1.52-1.906-4.03L8.844 5H7.063C7.04 5.003 7.02 4.999 7 5zm2.975 2.532L11.66 9.27c-1.8.166-2.151-.856-1.684-1.737z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$n = memo(SvgApplicationsUtilitiesSymbolic);
var applications_utilities_symbolic_default = Memo$n;

const SvgAppointmentMissedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.492 4.992A.5.5 0 006 5.5V8H4.5a.5.5 0 100 1h2a.5.5 0 00.5-.5v-3a.5.5 0 00-.508-.508z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 11h1.375l1.125 1.094L14.594 11H16v1.469l-1.094 1.062L16 14.594V16h-1.438L13.5 14.937 12.437 16H11v-1.406l1.062-1.063L11 12.47z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.5 2C2.922 2 0 4.922 0 8.5S2.922 15 6.5 15a6.408 6.408 0 003.5-1.031v-2.656A4.452 4.452 0 016.5 13 4.485 4.485 0 012 8.5C2 6.003 4.003 4 6.5 4S11 6.003 11 8.5c0 .533-.114 1.027-.281 1.5h2.094A6.47 6.47 0 0013 8.5C13 4.922 10.078 2 6.5 2z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontSize: "xx-small",
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$o = memo(SvgAppointmentMissedSymbolic);
var appointment_missed_symbolic_default = Memo$o;

const SvgAppointmentNewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1v1.997h-2v1.996h2V6.99h2V4.993h2V2.997h-2V1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.492 5.992A.5.5 0 006 6.5V9H4.5a.5.5 0 100 1h2a.5.5 0 00.5-.5v-3a.5.5 0 00-.508-.508z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.5 3C2.922 3 0 5.922 0 9.5S2.922 16 6.5 16 13 13.078 13 9.5c0-.516-.073-1.018-.187-1.5h-2.094c.167.473.281.967.281 1.5 0 2.497-2.003 4.5-4.5 4.5A4.485 4.485 0 012 9.5C2 7.003 4.003 5 6.5 5c.932 0 1.79.27 2.5.75V3.5A6.442 6.442 0 006.5 3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontSize: "xx-small",
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$p = memo(SvgAppointmentNewSymbolic);
var appointment_new_symbolic_default = Memo$p;

const SvgAppointmentSoonSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.5 0C2.922 0 0 2.922 0 6.5S2.922 13 6.5 13c.17 0 .333-.018.5-.031v-2.031c-.167.018-.327.062-.5.062A4.485 4.485 0 012 6.5C2 4.003 4.003 2 6.5 2S11 4.003 11 6.5c0 .173-.044.333-.063.5h2.032c.013-.167.031-.33.031-.5C13 2.922 10.078 0 6.5 0z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontSize: "xx-small",
    fontFamily: "Sans",
    overflow: "visible",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.492 2.992A.5.5 0 006 3.5V6H4.5a.5.5 0 100 1h2a.5.5 0 00.5-.5v-3a.5.5 0 00-.508-.508z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    className: "warning",
    d: "M8.875 8.068a.861.861 0 00-.875.87v6.195a.86.86 0 00.875.867h6.25a.86.86 0 00.875-.867V8.938a.861.861 0 00-.875-.87zM11 9h2v2.5s0 .5-.5.5h-1c-.5 0-.5-.5-.5-.5zm.5 4h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#f57900"
  })));
  return render(rest, ...restArgs);
};
const Memo$q = memo(SvgAppointmentSoonSymbolic);
var appointment_soon_symbolic_default = Memo$q;

const SvgAudioCardSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.014 16.014",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M13 1a1 1 0 00-1 1v13a1 1 0 102 0V3h1a1 1 0 100-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M13 6v3h3V6zm1 1h1v1h-1zm-1 3v3h3v-3zm1 1h1v1h-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M0 4v12h10v-2h1v-2H8v2H2V6h3V4H4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 1l5 4H8v4.531H6z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.995 9.505A2.495 2.495 0 015.5 12a2.495 2.495 0 01-2.495-2.495A2.495 2.495 0 015.5 7.01a2.495 2.495 0 012.495 2.495z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$r = memo(SvgAudioCardSymbolic);
var audio_card_symbolic_default = Memo$r;

const SvgAudioHeadphonesSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.988 9.106c.948-.277 1.953.294 2.253 1.282l.675 2.226c.3.988-.224 2.006-1.172 2.283-.949.278-1.954-.294-2.253-1.282l-.675-2.226c-.3-.987.223-2.006 1.172-2.283z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.969 1C4.663 1 1.945 4.008 2 6.719c.048 2.365.809 4.695 1 5.281h1.526c-1.162-2.292-1.05-5.156-1.05-5.156 0-2.373 2.007-4.313 4.493-4.313 2.485 0 4.5 1.827 4.492 4.282-.024 1.674-.172 2.658-1.006 5.187h1.571c.225-.645.974-3.19.974-5.281C14 3.889 11.274 1 7.969 1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.012 9.139c-.948-.278-1.953.294-2.253 1.282l-.675 2.226c-.3.987.224 2.006 1.172 2.283.949.277 1.954-.294 2.253-1.282l.675-2.226c.3-.988-.223-2.006-1.172-2.283z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$s = memo(SvgAudioHeadphonesSymbolic);
var audio_headphones_symbolic_default = Memo$s;

const SvgAudioHeadsetSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.969 0C4.663 0 1.945 3.008 2 5.719c.062 3.022.934 4.695 1.125 5.281h1.4c-1.16-2.292-1.048-5.156-1.048-5.156 0-2.373 2.007-4.313 4.493-4.313 2.485 0 4.5 1.92 4.492 4.375-.024 1.674-.172 2.284-1.006 4.813h1.571c.225-.645.974-2.066.974-4.906C14 2.983 11.274 0 7.969 0z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.6 7.059c-.84-.234-1.766.368-2.079 1.351l-.426 1.343c-.312.983.112 1.963.951 2.197.84.234 1.766-.368 2.078-1.351l.426-1.343c.313-.983-.112-1.963-.95-2.197zm-9.148.001c.84-.235 1.766.368 2.078 1.35l.427 1.343c.312.983-.112 1.963-.951 2.197-.84.235-1.766-.368-2.078-1.35L2.5 9.255c-.312-.983.112-1.963.951-2.197z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.003 13h.016c.55 0 .992.447.992 1 0 .555-.442 1-.992 1h-.016a.994.994 0 01-.992-1c0-.553.443-1 .992-1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.695 9.405a.5.5 0 00-.149.97l1.452.536-.018 1.746c-.005.532-.146.858-.322 1.053-.177.195-.404.29-.72.29H9.014a.5.5 0 100 1h3.922c.548 0 1.087-.203 1.463-.618.376-.415.574-1.007.58-1.717l.024-2.45-2.112-.777a.5.5 0 00-.197-.033z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$t = memo(SvgAudioHeadsetSymbolic);
var audio_headset_symbolic_default = Memo$t;

const SvgAudioInputMicrophoneSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "m 40,328 c -1.662,0 -3,1.338 -3,3 v 5 c 0,1.662 1.338,3 3,3 1.662,0 3,-1.338 3,-3 v -5 c 0,-1.662 -1.338,-3 -3,-3 z m -6,6 v 2.00977 c 0,2.96574 2.165383,5.4238 5,5.90039 V 344 h 2 v -2.08984 c 2.834617,-0.47659 5,-2.93465 5,-5.90039 V 334 h -1.5 v 2.00977 c 0,2.50009 -1.993312,4.49023 -4.5,4.49023 -2.506688,0 -4.5,-1.99014 -4.5,-4.49023 V 334 Z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436",
    transform: "translate(-32 -328)"
  })));
  return render(rest, ...restArgs);
};
const Memo$u = memo(SvgAudioInputMicrophoneSymbolic);
var audio_input_microphone_symbolic_default = Memo$u;

const SvgAudioSpeakersSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.063",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1 5.063h2.484l2.97-3L7 2.078v12l-.475.001-3.04-3.016H1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 5.063V3.64L11.367.282c.404-.41 1.063-.346 1.412.023.332.351.375.988-.03 1.392L9.392 5.063zM8 11v1.422l3.367 3.358c.404.412 1.063.347 1.412-.022a1.016 1.016 0 00-.03-1.392L9.392 11zm0-3.937v2h6c.75 0 .999-.501 1-1.002 0-.5-.25-.998-1-.998z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$v = memo(SvgAudioSpeakersSymbolic);
var audio_speakers_symbolic_default = Memo$v;

const SvgAudioVolumeHighSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M0 5h2.484l2.97-3H6v12h-.475l-3.04-3H0z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 8c0-2.814-1-5.172-2.586-7H11v1.48C12.265 4 13 5.7 13 8c0 2.3-.78 4-2 5.52V15h1.381C13.847 13.36 15 10.814 15 8z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 8c0-2.166-.739-4.02-2-5H9v2c.607.789 1 1.76 1 3 0 1.241-.393 2.22-1 3v2h1c1.223-.995 2-2.873 2-5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 8c0-1.257-.312-2.216-1-3H7v6h1c.672-.837 1-1.742 1-3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$w = memo(SvgAudioVolumeHighSymbolic);
var audio_volume_high_symbolic_default = Memo$w;

const SvgAudioVolumeLowSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M0 5h2.484l2.97-3H6v12h-.475l-3.04-3H0z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 8c0-2.814-1-5.172-2.586-7H11v1.48C12.265 4 13 5.7 13 8c0 2.3-.78 4-2 5.52V15h1.381C13.847 13.36 15 10.814 15 8z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 8c0-2.166-.739-4.02-2-5H9v2c.607.789 1 1.76 1 3 0 1.241-.393 2.22-1 3v2h1c1.223-.995 2-2.873 2-5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 8c0-1.257-.312-2.216-1-3H7v6h1c.672-.837 1-1.742 1-3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$x = memo(SvgAudioVolumeLowSymbolic);
var audio_volume_low_symbolic_default = Memo$x;

const SvgAudioVolumeMediumSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M15 8c0-2.814-1-5.172-2.586-7H11v1.48C12.265 4 13 5.7 13 8c0 2.3-.78 4-2 5.52V15h1.381C13.847 13.36 15 10.814 15 8z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 8c0-2.166-.739-4.02-2-5H9v2c.607.789 1 1.76 1 3 0 1.241-.393 2.22-1 3v2h1c1.223-.995 2-2.873 2-5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 8c0-1.257-.312-2.216-1-3H7v6h1c.672-.837 1-1.742 1-3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M0 5h2.484l2.97-3H6v12h-.475l-3.04-3H0z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$y = memo(SvgAudioVolumeMediumSymbolic);
var audio_volume_medium_symbolic_default = Memo$y;

const SvgAudioVolumeMutedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11 11h1.375l1.125 1.094L14.594 11H16v1.469l-1.094 1.062L16 14.594V16h-1.438L13.5 14.937 12.437 16H11v-1.406l1.062-1.063L11 12.47zM0 5h2.484l2.97-3H6v12h-.475l-3.04-3H0z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 1v1.48C12.265 4 13 5.7 13 8c0 .723-.085 1.382-.229 2h2.034c.124-.645.195-1.314.195-2 0-2.814-1-5.172-2.586-7z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 3v2c.607.789 1 1.759 1 3s-.393 2.22-1 3v2h1v-3h1.75c.158-.626.25-1.297.25-2 0-2.167-.739-4.02-2-5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 8c0-1.257-.312-2.216-1-3H7v6h1c.672-.837 1-1.742 1-3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$z = memo(SvgAudioVolumeMutedSymbolic);
var audio_volume_muted_symbolic_default = Memo$z;

const SvgAudioVolumeOveramplifiedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.016",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M0 5.015h2.484l2.97-3H6v12h-.475l-3.04-3H0z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15.031.016l-2 .737v14.525l2 .738zm-3 1.106l-2 .737v12.313l2 .738zM9 2.24l-2 .74v10.07l2 .742z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15.031.016h-2v4.422l2-.364zm-3 0h-2v4.966l2-.363zM9 .016L7 0v5.535l2-.365zm-2 10.48v5.52h2V10.86zm3.031.553v4.967h2v-4.604zm3 .545v4.422h2v-4.059z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$A = memo(SvgAudioVolumeOveramplifiedSymbolic);
var audio_volume_overamplified_symbolic_default = Memo$A;

const SvgAudioXGenericSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 1v7.344A3.574 3.574 0 003.5 8 3.515 3.515 0 000 11.5C0 13.421 1.579 15 3.5 15A3.517 3.517 0 007 11.531v-7.53h6v4.343A3.574 3.574 0 0011.5 8 3.515 3.515 0 008 11.5c0 1.921 1.579 3.5 3.5 3.5 1.9 0 3.465-1.546 3.5-3.437V1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$B = memo(SvgAudioXGenericSymbolic);
var audio_x_generic_symbolic_default = Memo$B;

const SvgAuthFingerprintSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.01",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.955 2.818a1 1 0 00-.899.483A7.004 7.004 0 001 7a1 1 0 102 0c0-.934.262-1.85.755-2.643a1 1 0 00-.8-1.539z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.984 5.986A1 1 0 001 7v5.063a1 1 0 102 0V7a1 1 0 00-1.016-1.014z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 3C5.802 3 4 4.803 4 7a1 1 0 102 0c0-1.116.883-2 2-2 1.116 0 2 .884 2 2a1 1 0 102 0c0-2.197-1.803-4-4-4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.984 5.986A1 1 0 007 7v5s-.001.595.144 1.32c.145.726.413 1.651 1.149 2.387a1 1 0 101.414-1.414c-.265-.264-.497-.839-.602-1.363C9 12.405 9 12 9 12V7a1 1 0 00-1.016-1.014zm-3 0A1 1 0 004 7v1a1 1 0 102 0V7a1 1 0 00-1.016-1.014zm0 4A1 1 0 004 11v3a1 1 0 102 0v-3a1 1 0 00-1.016-1.014zm6-4A1 1 0 0010 7v5s.009.44.175.941a4.56 4.56 0 001.118 1.766 1 1 0 101.414-1.414c-.383-.382-.55-.736-.633-.984C11.99 12.06 12 12 12 12V7a1 1 0 00-1.016-1.014zm3 0A1 1 0 0013 7v1a1 1 0 102 0V7a1 1 0 00-1.016-1.014z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.072 0a6.996 6.996 0 00-3.488.89 1 1 0 10.974 1.747 4.997 4.997 0 014.97.05A4.996 4.996 0 0113 7a1 1 0 102 0A7.006 7.006 0 0011.54.961 6.993 6.993 0 008.073 0z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 11a1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1 1 1 0 011 1z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$C = memo(SvgAuthFingerprintSymbolic);
var auth_fingerprint_symbolic_default = Memo$C;

const SvgAuthSimLockedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M13 8.875c-1.09 0-2 .879-2 1.969v1.094h-.97V16H16v-4.063h-1.032v-1.093c0-1.09-.88-1.969-1.968-1.969zm0 1c.546 0 .968.417.968.969v1.094H12v-1.094c0-.552.453-.969 1-.969z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 0C2 0 2 2 2 2v12c0 2 2 2 2 2h5.031v-4.998H3.998v-2h6.672A3.008 3.008 0 0113 7.875c.352 0 .686.073 1 .188V3l-3-3zm1 6l.998.006v2h-2L4 7s0-1 1-1zm6 0c1 0 1 1 1 1l-.002 1.002h-2v-2zm-4.002.006h2v2h-2zm-3 5.996h2v2L5 14c-1 0-1-1-1-1zm3 0h2v2h-2zm5.002.935V13c0 .95-.878.994-.969.996V15h2.729c.14-.262.24-.579.24-1v-1.063h-.031z",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$D = memo(SvgAuthSimLockedSymbolic);
var auth_sim_locked_symbolic_default = Memo$D;

const SvgAuthSimMissingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 0C2 0 2 2 2 2v12c0 2 2 2 2 2h8s2 0 2-2V3l-3-3zm3.755 3.002c.02-.001.037.009.057.008 2.16-.09 4.063 1.565 4.186 3.746l.002.03v.027c0 .045-.005.086-.006.13 0 .015.006.057.006.057l-.002 1.002h-.123a3.248 3.248 0 01-.354.918c-.017.03-.039.054-.057.082h.534V11H12v2c0 1-1 1-1 1l-1.002-.002v-.984A2.014 2.014 0 018 15c-1.093 0-2-.907-2-2 0-.382.134-.712.336-1H6v-.998H3.998v-2H6V8h-.002v.006h-2L4 7l.01-.094c-.034-2.109 1.67-3.788 3.746-3.904zM11.998 11H10v.002h1.998zM8.666 5.13c.718.266 1.271.933 1.324 1.735 0-.007.002-.007.002-.013-.054-.799-.6-1.46-1.326-1.721zM9.664 12c.199.285.331.613.334.99V12zm-5.666.002h2v2L5 14c-1 0-1-1-1-1z",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.152 4.006a2.992 2.992 0 00-1.3.223A3.005 3.005 0 005 7h2c0-.407.24-.768.617-.924a.994.994 0 011.09.217.994.994 0 01.216 1.09A.994.994 0 018 8a1 1 0 00-1 1v2h2V9.82a2.998 2.998 0 001.771-1.672 3.006 3.006 0 00-.65-3.27 3.001 3.001 0 00-1.97-.872zM8 12a1 1 0 00-1 1 1 1 0 001 1 1 1 0 001-1 1 1 0 00-1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$E = memo(SvgAuthSimMissingSymbolic);
var auth_sim_missing_symbolic_default = Memo$E;

const SvgAuthSimSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 0C2 0 2 2 2 2v12c0 2 2 2 2 2h8s2 0 2-2V3l-3-3zm1 6l.998.006v2h-2L4 7s0-1 1-1zm6 0c1 0 1 1 1 1l-.002 1.002h-2v-2zm-4.002.006h2v2h-2zm-3 2.996h8V11H12v2c0 1-1 1-1 1l-1.002-.002.002-2.996H3.998zm6.002 2h1.998V11H10zm-6.002 1h2v2L5 14c-1 0-1-1-1-1zm3 0h2v2h-2z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$F = memo(SvgAuthSimSymbolic);
var auth_sim_symbolic_default = Memo$F;

const SvgAuthSmartcardSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 0C2 0 2 2 2 2v12c0 2 2 2 2 2h8s2 0 2-2V2c0-2-2-2-2-2zm1.508 2.977a.5.5 0 01.508.507v3.532h1V2.984h3v4.032h.511c.677-.01.677 1.01 0 1H9.016V3.984h-1v4.032h-3V3.484a.5.5 0 01.492-.507z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$G = memo(SvgAuthSmartcardSymbolic);
var auth_smartcard_symbolic_default = Memo$G;

const SvgAvatarDefaultSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a3 3 0 100 6 3 3 0 000-6zM6.5 8A4.49 4.49 0 002 12.5V14c0 1 1 1 1 1h10s1 0 1-1v-1.5A4.49 4.49 0 009.5 8z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$H = memo(SvgAvatarDefaultSymbolic);
var avatar_default_symbolic_default = Memo$H;

const SvgBatteryCautionChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    className: "error",
    d: "M5 12v1h3v-1z",
    fill: "#ef2929"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469.012c-.49 0-.796.215-1.032.455C4.202.707 4 1.023 4 1.497V2H2v14h8v-2H4V4h2V2.012h4V4h2v3h2V2h-2v-.395l-.002-.027a1.622 1.622 0 00-.416-1.014c-.236-.279-.62-.584-1.2-.552z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.957 8.002a1 1 0 00-.664.291l-3 3A1 1 0 0010 13h2.104l-.96 1.404a1 1 0 001.524 1.28l3.031-2.97A1 1 0 0015 11h-2.13l.962-1.445a1 1 0 00-.875-1.553z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 11h1v1h-1zm-6 1h1v1H9zm4-4h1v1h-1zm-2.031 6.968h1v1h-1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$I = memo(SvgBatteryCautionChargingSymbolic);
var battery_caution_charging_symbolic_default = Memo$I;

const SvgBatteryCautionSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    className: "error",
    d: "M5 12v1h2v-1z",
    fill: "#c00"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469.012c-.49 0-.796.215-1.032.455C4.202.707 4 1.023 4 1.497V2H2v14h5v-2H4V4h2V2.012h4V4h2v3h2V2h-2v-.395l-.002-.027a1.622 1.622 0 00-.416-1.014c-.236-.278-.62-.584-1.2-.552z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    className: "warning",
    d: "M8.875 8A.863.863 0 008 8.875v6.25c0 .492.383.875.875.875h6.25a.863.863 0 00.875-.875v-6.25A.863.863 0 0015.125 8zM11 9h2v2.5s0 .5-.5.5h-1c-.5 0-.5-.5-.5-.5zm.5 4h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#f57900"
  })));
  return render(rest, ...restArgs);
};
const Memo$J = memo(SvgBatteryCautionSymbolic);
var battery_caution_symbolic_default = Memo$J;

const SvgBatteryEmptyChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469.012c-.49 0-.796.215-1.032.455C4.202.707 4 1.023 4 1.497V2H2v14h8v-2H4V4h2V2.012h4V4h2v3h2V2h-2v-.395l-.002-.027a1.622 1.622 0 00-.416-1.014c-.236-.279-.62-.584-1.2-.552z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.957 8.002a1 1 0 00-.664.291l-3 3A1 1 0 0010 13h2.104l-.96 1.404a1 1 0 001.524 1.28l3.031-2.97A1 1 0 0015 11h-2.13l.962-1.445a1 1 0 00-.875-1.553z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 11h1v1h-1zm-6 1h1v1H9zm4-4h1v1h-1zm-2.031 6.968h1v1h-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$K = memo(SvgBatteryEmptyChargingSymbolic);
var battery_empty_charging_symbolic_default = Memo$K;

const SvgBatteryEmptySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469.006c-.492 0-.798.216-1.033.457C4.2.703 4 1.02 4 1.493V2H2v14l12.002.002v-14h-2v-.398L12 1.576a1.625 1.625 0 00-.416-1.013c-.236-.28-.62-.588-1.201-.555l.054-.002zm.533 2.002L10 2.01v1.994h1.998v9.994H4.002V4.002h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$L = memo(SvgBatteryEmptySymbolic);
var battery_empty_symbolic_default = Memo$L;

const SvgBatteryFullChargedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469.04c-.489 0-.794.213-1.03.452C4.204.732 4 1.046 4 1.52v.501H2v13.916l12.002.003V2.02H12v-.415a1.616 1.616 0 00-.418-1.012c-.236-.278-.62-.583-1.197-.55l.054-.003zm.529 1.995l4.006.002v1.98h2v9.924H3.996V4.018h2.002z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.5
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.957 5.002a1 1 0 00-.664.291l-3 3A1 1 0 006 10h.984l.17.002-.98 1.434a1 1 0 001.533 1.271l3-3A1 1 0 0010 8H8.87l.962-1.445a1 1 0 00-.875-1.553z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 9h1v1H5zm4-4h1v1H9zm-3 7h1v1H6zm4-4h1v1h-1z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$M = memo(SvgBatteryFullChargedSymbolic);
var battery_full_charged_symbolic_default = Memo$M;

const SvgBatteryFullChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 5v8h3v-2l2-2 1-1V5z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469.012c-.49 0-.796.215-1.032.455C4.202.707 4 1.023 4 1.497V2H2v14h8v-2H4V4h2V2.012h4V4h2v3h2V2h-2v-.395l-.002-.027a1.622 1.622 0 00-.416-1.014c-.236-.279-.62-.584-1.2-.552z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.957 8.002a1 1 0 00-.664.291l-3 3A1 1 0 0010 13h2.104l-.96 1.404a1 1 0 001.524 1.28l3.031-2.97A1 1 0 0015 11h-2.13l.962-1.445a1 1 0 00-.875-1.553z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 11h1v1h-1zm-6 1h1v1H9zm4-4h1v1h-1zm-2.031 6.968h1v1h-1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$N = memo(SvgBatteryFullChargingSymbolic);
var battery_full_charging_symbolic_default = Memo$N;

const SvgBatteryFullSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.49 0-.796.216-1.032.456C4.202.696 4 1.012 4 1.486V2H2v14h12V2h-2v-.406l-.002-.028a1.616 1.616 0 00-.416-1.012c-.236-.278-.62-.584-1.2-.552L10.439 0zM6 2h4v2h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 5v8h6V5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$O = memo(SvgBatteryFullSymbolic);
var battery_full_symbolic_default = Memo$O;

const SvgBatteryGoodChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 6.984V13h3v-2l3-3V6.984z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469.012c-.49 0-.796.215-1.032.455C4.202.707 4 1.023 4 1.497V2H2v14h8v-2H4V4h2V2.012h4V4h2v3h2V2h-2v-.395l-.002-.027a1.622 1.622 0 00-.416-1.014c-.236-.279-.62-.584-1.2-.552z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.957 8.002a1 1 0 00-.664.291l-3 3A1 1 0 0010 13h2.104l-.96 1.404a1 1 0 001.524 1.28l3.031-2.97A1 1 0 0015 11h-2.13l.962-1.445a1 1 0 00-.875-1.553z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 11h1v1h-1zm-6 1h1v1H9zm4-4h1v1h-1zm-2.031 6.968h1v1h-1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$P = memo(SvgBatteryGoodChargingSymbolic);
var battery_good_charging_symbolic_default = Memo$P;

const SvgBatteryGoodSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.49 0-.796.216-1.032.456C4.202.696 4 1.012 4 1.486V2H2v14h12V2h-2v-.406l-.002-.028a1.616 1.616 0 00-.416-1.012c-.236-.278-.62-.584-1.2-.552L10.439 0zM6 2h4v2h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 7v6h6V7z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$Q = memo(SvgBatteryGoodSymbolic);
var battery_good_symbolic_default = Memo$Q;

const SvgBatteryLevel0ChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469.012c-.49 0-.796.215-1.032.455C4.202.707 4 1.023 4 1.497V2H2v14h8v-2H4V4h2V2.012h4V4h2v3h2V2h-2v-.395l-.002-.027a1.622 1.622 0 00-.416-1.014c-.236-.279-.62-.584-1.2-.552z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.957 8.002a1 1 0 00-.664.291l-3 3A1 1 0 0010 13h2.104l-.96 1.404a1 1 0 001.524 1.28l3.031-2.97A1 1 0 0015 11h-2.13l.962-1.445a1 1 0 00-.875-1.553z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 11h1v1h-1zm-6 1h1v1H9zm4-4h1v1h-1zm-2.031 6.968h1v1h-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$R = memo(SvgBatteryLevel0ChargingSymbolic);
var battery_level_0_charging_symbolic_default = Memo$R;

const SvgBatteryLevel0Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    className: "error",
    d: "M14 2h-2v-.395l-.002-.027a1.622 1.622 0 00-.416-1.014c-.236-.278-.62-.584-1.2-.552H5.47c-.49 0-.796.215-1.032.455C4.202.707 4 1.023 4 1.497V2H2v14h5v-2H4V4h2V2.012h4V4h2v3h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#e01b24"
  }), /* @__PURE__ */ createElement("path", {
    className: "error",
    d: "M8.875 8A.863.863 0 008 8.875v6.25c0 .492.383.875.875.875h6.25a.863.863 0 00.875-.875v-6.25A.863.863 0 0015.125 8zM11 9h2v2.5s0 .5-.5.5h-1c-.5 0-.5-.5-.5-.5zm.5 4h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#e01b24"
  })));
  return render(rest, ...restArgs);
};
const Memo$S = memo(SvgBatteryLevel0Symbolic);
var battery_level_0_symbolic_default = Memo$S;

const SvgBatteryLevel10ChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16 16.000036",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-212,-91.999995)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-212,-27.999995)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-212,-91.999995)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-212,-27.999995)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-212,-27.999995)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-212,-27.999995)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-212,-27.999995)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-212,-27.999995)",
    id: "layer2"
  }, /* @__PURE__ */ createElement("path", {
    className: "success",
    d: "m 217,39.999995 v 1 h 3 v -1 z",
    id: "path3966",
    style: {
      fill: "#33d17a",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 1
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3968",
    d: "m 217.46875,28.011719 c -0.49033,0 -0.79607,0.214784 -1.03125,0.455078 C 216.20232,28.707091 216,29.023351 216,29.496094 V 30 h -2 v 14 h 8 v -2 h -6 V 32 h 2 v -1.988281 h 4 V 32 h 2 v 3 h 2 v -5 h -2 v -0.394531 l -0.002,-0.02734 c -0.0239,-0.430603 -0.18,-0.734707 -0.41602,-1.013672 -0.23602,-0.278964 -0.6205,-0.584896 -1.19922,-0.552734 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3972",
    d: "m 224.95703,36.001953 a 1.0001,1.0001 0 0 0 -0.66406,0.291016 l -3,3 A 1.0001,1.0001 0 0 0 222,41 h 1 1.10352 l -0.95899,1.404297 a 1.0001,1.0001 0 0 0 1.52344,1.279297 l 3.03125,-2.96875 A 1.0001,1.0001 0 0 0 227,39 h -1 -1.13086 l 0.96289,-1.445312 a 1.0001,1.0001 0 0 0 -0.875,-1.552735 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3974",
    d: "m 227,38.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3976",
    d: "m 221,39.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3978",
    d: "m 225,35.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3980",
    d: "m 222.96899,42.968494 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-212,-27.999995)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-212,-27.999995)",
    id: "layer3"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-212,-27.999995)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$T = memo(SvgBatteryLevel10ChargingSymbolic);
var battery_level_10_charging_symbolic_default = Memo$T;

const SvgBatteryLevel10Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    className: "error",
    d: "M5 12v1h2v-1z",
    fill: "#e01b24"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469.012c-.49 0-.796.215-1.032.455C4.202.707 4 1.023 4 1.497V2H2v14h5v-2H4V4h2V2.012h4V4h2v3h2V2h-2v-.395l-.002-.027a1.622 1.622 0 00-.416-1.014c-.236-.279-.62-.584-1.2-.552z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    className: "warning",
    d: "M8.875 8A.863.863 0 008 8.875v6.25c0 .492.383.875.875.875h6.25a.863.863 0 00.875-.875v-6.25A.863.863 0 0015.125 8zM11 9h2v2.5s0 .5-.5.5h-1c-.5 0-.5-.5-.5-.5zm.5 4h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#f57900"
  })));
  return render(rest, ...restArgs);
};
const Memo$U = memo(SvgBatteryLevel10Symbolic);
var battery_level_10_symbolic_default = Memo$U;

const SvgBatteryLevel100ChargedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-32,-91.999995)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-32,-27.999995)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-32,-91.999995)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-32,-27.999995)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-32,-27.999995)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-32,-27.999995)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-32,-27.999995)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-32,-27.999995)",
    id: "layer2"
  }, /* @__PURE__ */ createElement("path", {
    id: "path3434-5",
    d: "m 37.46875,28.039062 c -0.488278,10e-7 -0.794026,0.213658 -1.029297,0.453126 C 36.204182,28.731655 36,29.046428 36,29.519531 v 0.501953 H 34 V 43.9375 l 12.001953,0.002 V 42.941406 30.021484 H 44 v -0.390625 -0.02734 c -0.02404,-0.430715 -0.181757,-0.733579 -0.417969,-1.011719 -0.236212,-0.278141 -0.620819,-0.582745 -1.197265,-0.550781 l 0.05469,-0.002 z m 0.529297,1.996094 4.005859,0.002 v 1.980469 h 2 v 9.923828 h -8.007812 v -9.923828 h 2.001953 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 1.99676907,
      strokeLinecap: "round",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path12871-7",
    d: "m 40.957031,33.001953 a 1.0001,1.0001 0 0 0 -0.664062,0.291016 l -3,3 A 1.0001,1.0001 0 0 0 38,38 h 0.984375 l 0.169922,0.002 -0.980469,1.433594 a 1.0001,1.0001 0 0 0 1.533203,1.271484 l 3,-3 A 1.0001,1.0001 0 0 0 42,36 h -1.130859 l 0.96289,-1.445312 a 1.0001,1.0001 0 0 0 -0.875,-1.552735 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "new"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect12928",
    d: "m 37,36.999996 h 1 v 1 h -1 z",
    style: {
      opacity: 1,
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "square",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 1,
      strokeOpacity: 1
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect12930",
    d: "m 41,32.999996 h 1 v 1 h -1 z",
    style: {
      opacity: 1,
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "square",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 1,
      strokeOpacity: 1
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect12932",
    d: "m 38,39.999996 h 1 v 1 h -1 z",
    style: {
      opacity: 1,
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "square",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 1,
      strokeOpacity: 1
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect12934",
    d: "m 42,35.999996 h 1 v 1 h -1 z",
    style: {
      opacity: 1,
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "square",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 1,
      strokeOpacity: 1
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-32,-27.999995)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-32,-27.999995)",
    id: "layer3"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-32,-27.999995)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$V = memo(SvgBatteryLevel100ChargedSymbolic);
var battery_level_100_charged_symbolic_default = Memo$V;

const SvgBatteryLevel100Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.49 0-.796.216-1.032.456C4.202.696 4 1.012 4 1.486V2H2v14h12V2h-2v-.406l-.002-.028a1.616 1.616 0 00-.416-1.012c-.236-.278-.62-.584-1.2-.552L10.439 0zM6 2h4v2h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    className: "success",
    d: "M5 5v8h6V5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#33d17a"
  })));
  return render(rest, ...restArgs);
};
const Memo$W = memo(SvgBatteryLevel100Symbolic);
var battery_level_100_symbolic_default = Memo$W;

const SvgBatteryLevel20ChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16 16.000036",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-192,-91.999995)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-192,-27.999995)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-192,-91.999995)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-192,-27.999995)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-192,-27.999995)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-192,-27.999995)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-192,-27.999995)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-192,-27.999995)",
    id: "layer2"
  }, /* @__PURE__ */ createElement("path", {
    className: "success",
    d: "m 197,38.999995 v 2 h 3 v -2 z",
    id: "path4011",
    style: {
      fill: "#33d17a",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 1
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path4013",
    d: "m 197.46875,28.011719 c -0.49033,0 -0.79607,0.214784 -1.03125,0.455078 C 196.20232,28.707091 196,29.023351 196,29.496094 V 30 h -2 v 14 h 8 v -2 h -6 V 32 h 2 v -1.988281 h 4 V 32 h 2 v 3 h 2 v -5 h -2 v -0.394531 l -0.002,-0.02734 c -0.0239,-0.430603 -0.18,-0.734707 -0.41602,-1.013672 -0.23602,-0.278964 -0.6205,-0.584896 -1.19922,-0.552734 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path4017",
    d: "m 204.95703,36.001953 a 1.0001,1.0001 0 0 0 -0.66406,0.291016 l -3,3 A 1.0001,1.0001 0 0 0 202,41 h 1 1.10352 l -0.95899,1.404297 a 1.0001,1.0001 0 0 0 1.52344,1.279297 l 3.03125,-2.96875 A 1.0001,1.0001 0 0 0 207,39 h -1 -1.13086 l 0.96289,-1.445312 a 1.0001,1.0001 0 0 0 -0.875,-1.552735 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect4019",
    d: "m 207,38.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect4021",
    d: "m 201,39.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect4023",
    d: "m 205,35.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect4025",
    d: "m 202.96899,42.968494 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-192,-27.999995)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-192,-27.999995)",
    id: "layer3"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-192,-27.999995)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$X = memo(SvgBatteryLevel20ChargingSymbolic);
var battery_level_20_charging_symbolic_default = Memo$X;

const SvgBatteryLevel20Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    className: "warning",
    d: "M5 11v2h6v-2z",
    fill: "#f57900"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.49 0-.796.216-1.032.456C4.202.696 4 1.012 4 1.486V2H2v14h12V2h-2v-.406l-.002-.028a1.616 1.616 0 00-.416-1.012c-.236-.278-.62-.584-1.2-.552L10.439 0zM6 2h4v2h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$Y = memo(SvgBatteryLevel20Symbolic);
var battery_level_20_symbolic_default = Memo$Y;

const SvgBatteryLevel30ChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16 16.000036",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-172,-91.999995)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-172,-27.999995)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-172,-91.999995)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-172,-27.999995)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-172,-27.999995)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-172,-27.999995)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-172,-27.999995)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-172,-27.999995)",
    id: "layer2"
  }, /* @__PURE__ */ createElement("path", {
    className: "success",
    d: "m 177,38.999995 v 2 h 3 v -2 z",
    id: "path3938",
    style: {
      fill: "#33d17a",
      fillOpacity: 1,
      stroke: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3944",
    d: "m 177.46875,28.011719 c -0.49033,0 -0.79607,0.214784 -1.03125,0.455078 C 176.20232,28.707091 176,29.023351 176,29.496094 V 30 h -2 v 14 h 8 v -2 h -6 V 32 h 2 v -1.988281 h 4 V 32 h 2 v 3 h 2 v -5 h -2 v -0.394531 l -0.002,-0.02734 c -0.0239,-0.430603 -0.18,-0.734707 -0.41602,-1.013672 -0.23602,-0.278964 -0.6205,-0.584896 -1.19922,-0.552734 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3950",
    d: "m 184.95703,36.001953 a 1.0001,1.0001 0 0 0 -0.66406,0.291016 l -3,3 A 1.0001,1.0001 0 0 0 182,41 h 1 1.10352 l -0.95899,1.404297 a 1.0001,1.0001 0 0 0 1.52344,1.279297 l 3.03125,-2.96875 A 1.0001,1.0001 0 0 0 187,39 h -1 -1.13086 l 0.96289,-1.445312 a 1.0001,1.0001 0 0 0 -0.875,-1.552735 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3952",
    d: "m 187,38.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3954",
    d: "m 181,39.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3956",
    d: "m 185,35.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3958",
    d: "m 182.96899,42.968494 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-172,-27.999995)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-172,-27.999995)",
    id: "layer3"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-172,-27.999995)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$Z = memo(SvgBatteryLevel30ChargingSymbolic);
var battery_level_30_charging_symbolic_default = Memo$Z;

const SvgBatteryLevel30Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 11v2h6v-2z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.49 0-.796.216-1.032.456C4.202.696 4 1.012 4 1.486V2H2v14h12V2h-2v-.406l-.002-.028a1.616 1.616 0 00-.416-1.012c-.236-.278-.62-.584-1.2-.552L10.439 0zM6 2h4v2h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$_ = memo(SvgBatteryLevel30Symbolic);
var battery_level_30_symbolic_default = Memo$_;

const SvgBatteryLevel40ChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16 16.000036",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-152,-91.999995)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-152,-27.999995)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-152,-91.999995)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-152,-27.999995)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-152,-27.999995)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-152,-27.999995)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-152,-27.999995)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-152,-27.999995)",
    id: "layer2"
  }, /* @__PURE__ */ createElement("path", {
    className: "success",
    d: "m 157,37.999995 v 1 2 h 3 v -2 l 1,-1 z",
    id: "path3916",
    style: {
      fill: "#33d17a",
      fillOpacity: 1,
      stroke: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3918",
    d: "m 157.46875,28.011719 c -0.49033,0 -0.79607,0.214784 -1.03125,0.455078 C 156.20232,28.707091 156,29.023351 156,29.496094 V 30 h -2 v 14 h 8 v -2 h -6 V 32 h 2 v -1.988281 h 4 V 32 h 2 v 3 h 2 v -5 h -2 v -0.394531 l -0.002,-0.02734 c -0.0239,-0.430603 -0.18,-0.734707 -0.41602,-1.013672 -0.23602,-0.278964 -0.6205,-0.584896 -1.19922,-0.552734 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3922",
    d: "m 164.95703,36.001953 a 1.0001,1.0001 0 0 0 -0.66406,0.291016 l -3,3 A 1.0001,1.0001 0 0 0 162,41 h 1 1.10352 l -0.95899,1.404297 a 1.0001,1.0001 0 0 0 1.52344,1.279297 l 3.03125,-2.96875 A 1.0001,1.0001 0 0 0 167,39 h -1 -1.13086 l 0.96289,-1.445312 a 1.0001,1.0001 0 0 0 -0.875,-1.552735 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3924",
    d: "m 167,38.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3926",
    d: "m 161,39.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3928",
    d: "m 165,35.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3930",
    d: "m 162.96899,42.968494 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-152,-27.999995)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-152,-27.999995)",
    id: "layer3"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-152,-27.999995)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$$ = memo(SvgBatteryLevel40ChargingSymbolic);
var battery_level_40_charging_symbolic_default = Memo$$;

const SvgBatteryLevel40Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 10v3h6v-3z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.49 0-.796.216-1.032.456C4.202.696 4 1.012 4 1.486V2H2v14h12V2h-2v-.406l-.002-.028a1.616 1.616 0 00-.416-1.012c-.236-.278-.62-.584-1.2-.552L10.439 0zM6 2h4v2h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$10 = memo(SvgBatteryLevel40Symbolic);
var battery_level_40_symbolic_default = Memo$10;

const SvgBatteryLevel50ChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16 16.000036",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-132,-91.999995)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-132,-27.999995)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-132,-91.999995)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-132,-27.999995)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-132,-27.999995)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-132,-27.999995)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-132,-27.999995)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-132,-27.999995)",
    id: "layer2"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 137,36.999995 v 2 2 h 3 v -2 l 2,-2 z",
    id: "path3895",
    style: {
      fill: "#33d17a",
      fillOpacity: 1,
      stroke: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3897",
    d: "m 137.46875,28.011719 c -0.49033,0 -0.79607,0.214784 -1.03125,0.455078 C 136.20232,28.707091 136,29.023351 136,29.496094 V 30 h -2 v 14 h 8 v -2 h -6 V 32 h 2 v -1.988281 h 4 V 32 h 2 v 3 h 2 v -5 h -2 v -0.394531 l -0.002,-0.02734 c -0.0239,-0.430603 -0.18,-0.734707 -0.41602,-1.013672 -0.23602,-0.278964 -0.6205,-0.584896 -1.19922,-0.552734 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3901",
    d: "m 144.95703,36.001953 a 1.0001,1.0001 0 0 0 -0.66406,0.291016 l -3,3 A 1.0001,1.0001 0 0 0 142,41 h 1 1.10352 l -0.95899,1.404297 a 1.0001,1.0001 0 0 0 1.52344,1.279297 l 3.03125,-2.96875 A 1.0001,1.0001 0 0 0 147,39 h -1 -1.13086 l 0.96289,-1.445312 a 1.0001,1.0001 0 0 0 -0.875,-1.552735 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3903",
    d: "m 147,38.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3905",
    d: "m 141,39.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3907",
    d: "m 145,35.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3909",
    d: "m 142.96899,42.968494 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-132,-27.999995)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-132,-27.999995)",
    id: "layer3"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-132,-27.999995)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$11 = memo(SvgBatteryLevel50ChargingSymbolic);
var battery_level_50_charging_symbolic_default = Memo$11;

const SvgBatteryLevel50Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469.014c-.49 0-.796.214-1.032.455C4.202.709 4 1.025 4 1.498V2H2v14h12V2h-2v-.393l-.002-.027a1.622 1.622 0 00-.416-1.014c-.236-.279-.62-.584-1.2-.552zm.531 2h4V4h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 9v4h6V9z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$12 = memo(SvgBatteryLevel50Symbolic);
var battery_level_50_symbolic_default = Memo$12;

const SvgBatteryLevel60ChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16 16.000036",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-112,-91.999995)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-112,-27.999995)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-112,-91.999995)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-112,-27.999995)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-112,-27.999995)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-112,-27.999995)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-112,-27.999995)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-112,-27.999995)",
    id: "layer2"
  }, /* @__PURE__ */ createElement("path", {
    className: "success",
    d: "m 117,35.999995 v 3 2 h 3 v -2 l 3,-3 v 0 z",
    id: "path3856",
    style: {
      fill: "#33d17a",
      fillOpacity: 1,
      stroke: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3858",
    d: "m 117.46875,28.011719 c -0.49033,0 -0.79607,0.214784 -1.03125,0.455078 C 116.20232,28.707091 116,29.023351 116,29.496094 V 30 h -2 v 14 h 8 v -2 h -6 V 32 h 2 v -1.988281 h 4 V 32 h 2 v 3 h 2 v -5 h -2 v -0.394531 l -0.002,-0.02734 c -0.0239,-0.430603 -0.18,-0.734707 -0.41602,-1.013672 -0.23602,-0.278964 -0.6205,-0.584896 -1.19922,-0.552734 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3863",
    d: "m 124.95703,36.001953 a 1.0001,1.0001 0 0 0 -0.66406,0.291016 l -3,3 A 1.0001,1.0001 0 0 0 122,41 h 1 1.10352 l -0.95899,1.404297 a 1.0001,1.0001 0 0 0 1.52344,1.279297 l 3.03125,-2.96875 A 1.0001,1.0001 0 0 0 127,39 h -1 -1.13086 l 0.96289,-1.445312 a 1.0001,1.0001 0 0 0 -0.875,-1.552735 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3865",
    d: "m 127,38.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3867",
    d: "m 121,39.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3869",
    d: "m 125,35.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3871",
    d: "m 122.96899,42.968494 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-112,-27.999995)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-112,-27.999995)",
    id: "layer3"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-112,-27.999995)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$13 = memo(SvgBatteryLevel60ChargingSymbolic);
var battery_level_60_charging_symbolic_default = Memo$13;

const SvgBatteryLevel60Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469.014c-.49 0-.796.214-1.032.455C4.202.709 4 1.025 4 1.498V2H2v14h12V2h-2v-.393l-.002-.027a1.622 1.622 0 00-.416-1.014c-.236-.279-.62-.584-1.2-.552zm.531 2h4V4h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 8v5h6V8z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$14 = memo(SvgBatteryLevel60Symbolic);
var battery_level_60_symbolic_default = Memo$14;

const SvgBatteryLevel70ChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16 16.000036",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-92,-91.999995)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-92,-27.999995)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-92,-91.999995)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-92,-27.999995)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-92,-27.999995)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-92,-27.999995)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-92,-27.999995)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-92,-27.999995)",
    id: "layer2"
  }, /* @__PURE__ */ createElement("path", {
    id: "path3836",
    d: "m 97.46875,28.011719 c -0.490327,0 -0.796069,0.214784 -1.03125,0.455078 C 96.202319,28.707091 96,29.023351 96,29.496094 V 30 h -2 v 14 h 8 V 42 H 96 V 32 h 2 v -1.988281 h 4 V 32 h 2 v 3 h 2 v -5 h -2 v -0.394531 l -0.002,-0.02734 c -0.0239,-0.430603 -0.18,-0.734707 -0.41602,-1.013672 -0.23602,-0.278964 -0.6205,-0.584896 -1.19922,-0.552734 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3841",
    d: "m 104.95703,36.001953 a 1.0001,1.0001 0 0 0 -0.66406,0.291016 l -3,3 A 1.0001,1.0001 0 0 0 102,41 h 1 1.10352 l -0.95899,1.404297 a 1.0001,1.0001 0 0 0 1.52344,1.279297 l 3.03125,-2.96875 A 1.0001,1.0001 0 0 0 107,39 h -1 -1.13086 l 0.96289,-1.445312 a 1.0001,1.0001 0 0 0 -0.875,-1.552735 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3843",
    d: "m 107,38.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3846",
    d: "m 101,39.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3848",
    d: "m 105,35.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3850",
    d: "m 102.96899,42.968494 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    className: "success",
    d: "m 97,34.999995 v 1 3 2 h 3 v -2 l 3,-3 v -1 z",
    id: "path3832",
    style: {
      fill: "#33d17a",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 1,
      enableBackground: "new"
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-92,-27.999995)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-92,-27.999995)",
    id: "layer3"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-92,-27.999995)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$15 = memo(SvgBatteryLevel70ChargingSymbolic);
var battery_level_70_charging_symbolic_default = Memo$15;

const SvgBatteryLevel70Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.49 0-.796.216-1.032.456C4.202.696 4 1.012 4 1.486V2H2v14h12V2h-2v-.406l-.002-.028a1.616 1.616 0 00-.416-1.012c-.236-.278-.62-.584-1.2-.552L10.438 0zM6 2h4v2h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 7v6h6V7z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$16 = memo(SvgBatteryLevel70Symbolic);
var battery_level_70_symbolic_default = Memo$16;

const SvgBatteryLevel80ChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16 16.000036",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-72,-91.999995)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-72,-27.999995)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-72,-91.999995)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-72,-27.999995)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-72,-27.999995)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-72,-27.999995)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-72,-27.999995)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-72,-27.999995)",
    id: "layer2"
  }, /* @__PURE__ */ createElement("path", {
    className: "success",
    d: "m 77,33.999995 v 2 3 2 h 3 v -2 l 3,-3 v -2 z",
    id: "path3875",
    style: {
      fill: "#33d17a",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 1
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3879",
    d: "m 77.46875,28.011719 c -0.490327,0 -0.796069,0.214784 -1.03125,0.455078 C 76.202319,28.707091 76,29.023351 76,29.496094 V 30 h -2 v 14 h 8 V 42 H 76 V 32 h 2 v -1.988281 h 4 V 32 h 2 v 3 h 2 v -5 h -2 v -0.394531 l -0.002,-0.02734 C 83.974117,29.147522 83.81805,28.843418 83.582031,28.564453 83.346013,28.285489 82.96153,27.979557 82.382812,28.011719 Z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path3883",
    d: "m 84.957031,36.001953 a 1.0001,1.0001 0 0 0 -0.664062,0.291016 l -3,3 A 1.0001,1.0001 0 0 0 82,41 h 1 1.103516 l -0.958985,1.404297 a 1.0001,1.0001 0 0 0 1.523438,1.279297 l 3.03125,-2.96875 A 1.0001,1.0001 0 0 0 87,39 h -1 -1.130859 l 0.96289,-1.445312 a 1.0001,1.0001 0 0 0 -0.875,-1.552735 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3885",
    d: "m 87,38.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3887",
    d: "m 81,39.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3889",
    d: "m 85,35.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect3891",
    d: "m 82.968994,42.968494 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-72,-27.999995)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-72,-27.999995)",
    id: "layer3"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-72,-27.999995)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$17 = memo(SvgBatteryLevel80ChargingSymbolic);
var battery_level_80_charging_symbolic_default = Memo$17;

const SvgBatteryLevel80Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.49 0-.796.216-1.032.456C4.202.696 4 1.012 4 1.486V2H2v14h12V2h-2v-.406l-.002-.028a1.616 1.616 0 00-.416-1.012c-.236-.278-.62-.584-1.2-.552L10.438 0zM6 2h4v2h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 6v7h6V6z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$18 = memo(SvgBatteryLevel80Symbolic);
var battery_level_80_symbolic_default = Memo$18;

const SvgBatteryLevel90ChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16 16.000036",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-52,-91.999995)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-52,-27.999995)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-52,-91.999995)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-52,-27.999995)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-52,-27.999995)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-52,-27.999995)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-52,-27.999995)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-52,-27.999995)",
    id: "layer2"
  }, /* @__PURE__ */ createElement("path", {
    className: "success",
    d: "m 57,32.999995 v 3 3 2 h 3 v -2 l 3,-3 v -3 z",
    id: "rect6060-6",
    style: {
      fill: "#33d17a",
      fillOpacity: 1,
      stroke: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path12867-5",
    d: "m 57.46875,28.011719 c -0.490327,0 -0.796069,0.214784 -1.03125,0.455078 C 56.202319,28.707091 56,29.023351 56,29.496094 V 30 h -2 v 14 h 8 V 42 H 56 V 32 h 2 v -1.988281 h 4 V 32 h 2 v 3 h 2 v -5 h -2 v -0.394531 l -0.002,-0.02734 C 63.974117,29.147522 63.81805,28.843418 63.582031,28.564453 63.346013,28.285489 62.96153,27.979557 62.382812,28.011719 Z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path12871-5",
    d: "m 64.957031,36.001953 a 1.0001,1.0001 0 0 0 -0.664062,0.291016 l -3,3 A 1.0001,1.0001 0 0 0 62,41 h 1 1.103516 l -0.958985,1.404297 a 1.0001,1.0001 0 0 0 1.523438,1.279297 l 3.03125,-2.96875 A 1.0001,1.0001 0 0 0 67,39 h -1 -1.130859 l 0.96289,-1.445312 a 1.0001,1.0001 0 0 0 -0.875,-1.552735 z",
    style: {
      color: "#bebebe",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect12873-6",
    d: "m 67,38.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect12875-2",
    d: "m 61,39.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect12877-9",
    d: "m 65,35.999996 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect12879-1",
    d: "m 62.968994,42.968494 h 1 v 1 h -1 z",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-52,-27.999995)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-52,-27.999995)",
    id: "layer3"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-52,-27.999995)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$19 = memo(SvgBatteryLevel90ChargingSymbolic);
var battery_level_90_charging_symbolic_default = Memo$19;

const SvgBatteryLevel90Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.49 0-.796.216-1.032.456C4.202.696 4 1.012 4 1.486V2H2v14h12V2h-2v-.406l-.002-.028a1.616 1.616 0 00-.416-1.012c-.236-.278-.62-.584-1.2-.552L10.439 0zM6 2h4v2h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 5v8h6V5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1a = memo(SvgBatteryLevel90Symbolic);
var battery_level_90_symbolic_default = Memo$1a;

const SvgBatteryLowChargingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 11v2h3v-2z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469.012c-.49 0-.796.215-1.032.455C4.202.707 4 1.023 4 1.497V2H2v14h8v-2H4V4h2V2.012h4V4h2v3h2V2h-2v-.395l-.002-.027a1.622 1.622 0 00-.416-1.014c-.236-.279-.62-.584-1.2-.552z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.957 8.002a1 1 0 00-.664.291l-3 3A1 1 0 0010 13h2.104l-.96 1.404a1 1 0 001.524 1.28l3.031-2.97A1 1 0 0015 11h-2.13l.962-1.445a1 1 0 00-.875-1.553z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 11h1v1h-1zm-6 1h1v1H9zm4-4h1v1h-1zm-2.031 6.968h1v1h-1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1b = memo(SvgBatteryLowChargingSymbolic);
var battery_low_charging_symbolic_default = Memo$1b;

const SvgBatteryLowSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 11v2h6v-2z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.49 0-.796.216-1.032.456C4.202.696 4 1.012 4 1.486V2H2v14h12V2h-2v-.406l-.002-.028a1.616 1.616 0 00-.416-1.012c-.236-.278-.62-.584-1.2-.552L10.439 0zM6 2h4v2h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1c = memo(SvgBatteryLowSymbolic);
var battery_low_symbolic_default = Memo$1c;

const SvgBatteryMissingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.492 0-.796.228-1.032.469C4.202.709 4 1.028 4 1.5V2H2v14h12V2h-2v-.438a1.58 1.58 0 00-.406-1 1.523 1.523 0 00-1.156-.53V0h-.063zM6 2h4v1.531c.23.132.426.296.625.469H12v10H9.719a1.967 1.967 0 01-.719.719c-.12.07-.241.142-.375.187-.031.01-.062.023-.094.031a2.03 2.03 0 01-.125.032c-.13.027-.27.031-.406.031-.181 0-.364-.016-.531-.063-.032-.008-.063-.02-.094-.03-.132-.045-.256-.119-.375-.188A1.967 1.967 0 016.281 14H4V4h1.313c.209-.184.442-.331.687-.469V3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.152 4.006A2.992 2.992 0 005 7h2c0-.407.24-.768.617-.924a.994.994 0 011.09.217.994.994 0 01.217 1.09A.994.994 0 018 8a1 1 0 00-1 1v2h2V9.82a2.998 2.998 0 001.771-1.672 3.006 3.006 0 00-.65-3.27 3.001 3.001 0 00-1.969-.872zM8 12a1 1 0 00-1 1 1 1 0 001 1 1 1 0 001-1 1 1 0 00-1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1d = memo(SvgBatteryMissingSymbolic);
var battery_missing_symbolic_default = Memo$1d;

const SvgBatterySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 5v2h6V5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.469 0c-.49 0-.797.216-1.032.456C4.202.696 4 1.012 4 1.486V2H2v14h12V2h-2v-.406l-.002-.028a1.616 1.616 0 00-.416-1.011c-.236-.28-.62-.585-1.2-.553L10.438 0zm.53 2h4v2h2v10H4V4h2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 8v2h6V8zm0 3v2h6v-2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1e = memo(SvgBatterySymbolic);
var battery_symbolic_default = Memo$1e;

const SvgBluetoothActiveSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.984 0A1 1 0 006 1v3.586L4.707 3.293a1 1 0 10-1.414 1.414L6 7.414v1.172l-2.707 2.707a1 1 0 101.414 1.414L6 11.414V15a1 1 0 001.707.707l4-4a1 1 0 000-1.414L9.414 8l2.293-2.293a1 1 0 000-1.414l-4-4A1 1 0 006.984 0zM8 3.414L9.586 5 8 6.586zm0 6L9.586 11 8 12.586z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 3h1v1H3zm0 9h1v1H3zm3 3h1v1H6zM6 0h1v1H6z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1f = memo(SvgBluetoothActiveSymbolic);
var bluetooth_active_symbolic_default = Memo$1f;

const SvgBluetoothDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 0v5.523l2 2V3.414L9.586 5 7.53 7.055l1.414 1.414 2.762-2.762a1 1 0 000-1.414l-4-4A1 1 0 007 0h-.016zm0 8.473v.113l-2.707 2.707A.996.996 0 003 12v1h1a.996.996 0 00.707-.293L6 11.414V16h1a1 1 0 00.707-.293l2.764-2.764-1.414-1.414L8 12.586v-2.113z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.531.469L.47 1.53l14 14 1.062-1.062z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1g = memo(SvgBluetoothDisabledSymbolic);
var bluetooth_disabled_symbolic_default = Memo$1g;

const SvgBluetoothDisconnectedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.000107",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-212,-271.99989)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-212,-207.99989)"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 218,208 v 0.99805 0.002 3.58594 l -1.29297,-1.29297 A 1,1 0 0 0 216,211 h -1 V 211.9707 212 a 1,1 0 0 0 0.29297,0.70703 L 218,215.41406 v 1.17188 l -2.70703,2.70703 A 1,1 0 0 0 215,220 v 1 h 0.9707 a 1,1 0 0 0 0.0293,0 1,1 0 0 0 0.70703,-0.29297 L 218,219.41406 V 223 v 1 h 1 a 1.0001,1.0001 0 0 0 0.70703,-0.29297 l 2.56641,-2.56641 a 0.98884003,0.98884003 0 0 1 -0.26172,-0.67187 V 219 A 0.98884003,0.98884003 0 0 1 223,218.01172 h 0.42578 L 221.41406,216 l 2.29297,-2.29297 a 1.0001,1.0001 0 0 0 0,-1.41406 l -4,-4 A 1.0001,1.0001 0 0 0 219.0293,208 1.0001,1.0001 0 0 0 219,208 Z m 2,3.41406 L 221.58594,213 220,214.58594 Z m 0,6 L 221.58594,219 220,220.58594 Z",
    id: "path3359",
    style: {
      color: "#000000",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontVariantEastAsian: "normal",
      fontFeatureSettings: "normal",
      fontVariationSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      shapeMargin: 0,
      inlineSize: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 0.35,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate",
      stopColor: "#000000"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "m 222.99975,219 h 1.375 l 1.125,1.09375 L 226.5935,219 h 1.40625 v 1.46875 l -1.09375,1.0625 1.09375,1.0625 V 224 h -1.4375 l -1.0625,-1.0625 -1.0625,1.0625 h -1.4375 v -1.40625 l 1.0625,-1.0625 -1.0625,-1.0625 z",
    id: "path3761-2-3-5-4-8-9-8-0-1-6-3",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 2,
      marker: "none",
      enableBackground: "new"
    }
  })), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-212,-271.99989)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-212,-207.99989)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-212,-207.99989)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-212,-207.99989)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-212,-207.99989)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-212,-207.99989)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-212,-207.99989)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-212,-207.99989)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-212,-207.99989)"
  })));
  return render(rest, ...restArgs);
};
const Memo$1h = memo(SvgBluetoothDisconnectedSymbolic);
var bluetooth_disconnected_symbolic_default = Memo$1h;

const SvgBluetoothHardwareDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 198,248 v 0.99805 0.002 3.58594 l -1.29297,-1.29297 A 1,1 0 0 0 196,251 h -1 V 251.9707 252 a 1,1 0 0 0 0.29297,0.70703 L 197.58594,255 h 4.82812 l 1.29297,-1.29297 a 1.0001,1.0001 0 0 0 0,-1.41406 l -4,-4 A 1.0001,1.0001 0 0 0 199.0293,248 1.0001,1.0001 0 0 0 199,248 Z m 2,3.41406 L 201.58594,253 200,254.58594 Z M 195,260 v 1 h 0.9707 a 1,1 0 0 0 0.0293,0 1,1 0 0 0 0.70703,-0.29297 L 197.41406,260 Z m 3,0 v 3 1 h 1 a 1.0001,1.0001 0 0 0 0.70703,-0.29297 L 203.41406,260 h -2.82812 L 200,260.58594 V 260 Z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.35,
    transform: "translate(-192 -248)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 192,256 h 16 v 3 h -16 z",
    transform: "translate(-192 -248)"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1i = memo(SvgBluetoothHardwareDisabledSymbolic);
var bluetooth_hardware_disabled_symbolic_default = Memo$1i;

const SvgBluetoothSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.984 0A1 1 0 006 1v3.586L4.707 3.293a1 1 0 10-1.414 1.414L6 7.414v1.172l-2.707 2.707a1 1 0 101.414 1.414L6 11.414V15a1 1 0 001.707.707l4-4a1 1 0 000-1.414L9.414 8l2.293-2.293a1 1 0 000-1.414l-4-4A1 1 0 006.984 0zM8 3.414L9.586 5 8 6.586zm0 6L9.586 11 8 12.586z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 3h1v1H3zm0 9h1v1H3zm3 3h1v1H6zM6 0h1v1H6z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1j = memo(SvgBluetoothSymbolic);
var bluetooth_symbolic_default = Memo$1j;

const SvgBookmarkNewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.525 0C4.433 0 3.61.68 3.295 1.295c-.314.615-.3 1.205-.3 1.205v13.117l5-2.5 5 2.5V11h-2v1.383l-3-1.5-3 1.5V2.5s.013-.16.081-.295c.069-.134.01-.205.45-.205h4.968c.417 0 .35.06.418.197s.082.303.082.303V3h2v-.5s.014-.584-.293-1.197C12.394.689 11.577 0 10.494 0z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 4v2H9v2h2v2h2V8h2V6h-2V4z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1k = memo(SvgBookmarkNewSymbolic);
var bookmark_new_symbolic_default = Memo$1k;

const SvgCallIncomingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.029 16.03",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.006 2.03c.554 0 1 .446 1 1v3c0 .554-.446 1-1 1h-.711a6.972 6.972 0 004.71 4.71v-.71c0-.554.447-1 1-1h3c.555 0 1 .446 1 1v1.5a2.5 2.5 0 01-2.5 2.5h-.5c-5.504 0-10-4.495-10-10v-.5a2.5 2.5 0 012.5-2.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.995 8.034h1v-.832a1 1 0 00-1-1.168h-1.586l4.293-4.293c.982-.942-.472-2.396-1.414-1.414L9.995 4.62V3.034a1 1 0 00-1.158-1h-.842v1L8 8.03z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1l = memo(SvgCallIncomingSymbolic);
var call_incoming_symbolic_default = Memo$1l;

const SvgCallMissedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.006 16.013",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M12.98 0a1 1 0 00-.11.01H8v.832A1 1 0 009 2.01h1.586L8 4.596 5.707 2.303a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0L12 3.424V5.01a1 1 0 001.158 1H14V1.137a1 1 0 000-.275V.01h-.854A1 1 0 0012.98 0z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    className: "error",
    d: "M14.242 15.725a.979.979 0 01-1.387 0l-1.04-1.04-1.041-1.04a.979.979 0 010-1.387l.493-.493a6.838 6.838 0 00-6.534 0l.493.493a.979.979 0 010 1.387l-1.04 1.04-1.04 1.04a.979.979 0 01-1.388 0l-1.04-1.04a2.452 2.452 0 010-3.468l.347-.346c3.818-3.818 10.052-3.818 13.87 0l.347.346a2.452 2.452 0 010 3.468z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#e01b24"
  })));
  return render(rest, ...restArgs);
};
const Memo$1m = memo(SvgCallMissedSymbolic);
var call_missed_symbolic_default = Memo$1m;

const SvgCallOutgoingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.006 2c.554 0 1 .446 1 1v3c0 .554-.446 1-1 1h-.711a6.972 6.972 0 004.71 4.71V11c0-.554.447-1 1-1h3c.555 0 1 .446 1 1v1.5a2.5 2.5 0 01-2.5 2.5h-.5c-5.504 0-10-4.495-10-10v-.5a2.5 2.5 0 012.5-2.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 0h-1v.832A1 1 0 0011 2h1.586L8.293 6.293c-.982.942.472 2.396 1.414 1.414L14 3.414V5a1 1 0 001.158 1H16V0z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1n = memo(SvgCallOutgoingSymbolic);
var call_outgoing_symbolic_default = Memo$1n;

const SvgCallStartSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M10.994 2c-.554 0-1 .446-1 1v3c0 .554.446 1 1 1h.711a6.972 6.972 0 01-4.71 4.71V11c0-.554-.447-1-1-1h-3c-.555 0-1 .446-1 1v1.5a2.5 2.5 0 002.5 2.5h.5c5.504 0 10-4.495 10-10v-.5a2.5 2.5 0 00-2.5-2.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$1o = memo(SvgCallStartSymbolic);
var call_start_symbolic_default = Memo$1o;

const SvgCallStopSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.006 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M14.242 11.715a.979.979 0 01-1.387 0l-1.04-1.04-1.041-1.04a.979.979 0 010-1.388l.493-.493a6.838 6.838 0 00-6.534 0l.493.493a.979.979 0 010 1.387l-1.04 1.04-1.04 1.04a.979.979 0 01-1.388 0l-1.04-1.04a2.452 2.452 0 010-3.467l.347-.347c3.818-3.818 10.052-3.818 13.87 0l.347.347c.957.958.957 2.51 0 3.468z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$1p = memo(SvgCallStopSymbolic);
var call_stop_symbolic_default = Memo$1p;

const SvgCameraDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.605 4.082A1.003 1.003 0 001 5v8c0 .55.448 1 1 1h9.523L9.99 12.467A4 4 0 018 13c-3.073-.002-4.996-3.324-3.467-5.99zm4.452 4.451a2 2 0 002.41 2.41zM1.531.469L.47 1.53l14 14 1.062-1.062z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 2c-.55 0-1 .45-1 1v1H4l1.72 1.72A3.973 3.973 0 018 5a4 4 0 014 4c0 .849-.27 1.632-.72 2.28L14 14c.552 0 1-.45 1-1V5c0-.55-.448-1-1-1h-3V3c0-.55-.45-1-1-1zm2 5c-.293 0-.57.067-.82.18l2.64 2.64c.114-.25.18-.527.18-.82a2 2 0 00-2-2z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1q = memo(SvgCameraDisabledSymbolic);
var camera_disabled_symbolic_default = Memo$1q;

const SvgCameraHardwareDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 238,249.99999 c -0.54996,0 -1,0.45004 -1,1 v 1 h -3 c -0.55201,0 -1,0.45004 -1,1 v 2 h 3.55469 c 0.6929,-1.1906 1.96849,-2 3.44531,-2 1.47682,0 2.75241,0.8094 3.44531,2 H 247 v -2 c 0,-0.54996 -0.44799,-1 -1,-1 h -3 v -1 c 0,-0.54996 -0.45004,-1 -1,-1 z m -5,10 v 1 c 0,0.54996 0.44799,1 1,1 h 12 c 0.55201,0 1,-0.45004 1,-1 v -1 h -4.38086 c -0.70322,0.61442 -1.61196,1 -2.61914,1 -1.00718,0 -1.91592,-0.38558 -2.61914,-1 z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fillOpacity: 0.349,
    transform: "translate(-232 -248)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 232,255.99999 h 16 v 3 h -16 z",
    transform: "translate(-232 -248)"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1r = memo(SvgCameraHardwareDisabledSymbolic);
var camera_hardware_disabled_symbolic_default = Memo$1r;

const SvgCameraPhotoSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 2c-.55 0-1 .45-1 1v1H2c-.552 0-1 .45-1 1v8c0 .55.448 1 1 1h12c.552 0 1-.45 1-1V5c0-.55-.448-1-1-1h-3V3c0-.55-.45-1-1-1zm2 3a4 4 0 110 8 4 4 0 010-8zm0 2a2 2 0 100 4 2 2 0 000-4z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$1s = memo(SvgCameraPhotoSymbolic);
var camera_photo_symbolic_default = Memo$1s;

const SvgCameraSwitchSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M13.266 10.476l2.189-2.475H16v5.004h-.534zM7 7h5c.554 0 1 .446 1 1v5c0 .554-.446 1-1 1H7c-.554 0-1-.446-1-1V8c0-.554.446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 1.994c-.554 0-1 .446-1 1v5.008c0 .554.446 1 1 1h.998V8c0-1.05.952-2.007 2.002-2.002h3V2.994c0-.554-.446-1-1-1zm-4 1.01v5.005h.48l2.254-2.587L.611 3.003z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.5
  }))));
  return render(rest, ...restArgs);
};
const Memo$1t = memo(SvgCameraSwitchSymbolic);
var camera_switch_symbolic_default = Memo$1t;

const SvgCameraVideoSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.5 1A3.515 3.515 0 003 4.5C3 6.421 4.579 8 6.5 8S10 6.421 10 4.5 8.421 1 6.5 1zm0 2C7.34 3 8 3.66 8 4.5S7.34 6 6.5 6 5 5.34 5 4.5 5.66 3 6.5 3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.5 1A3.515 3.515 0 009 4.5C9 6.421 10.579 8 12.5 8S16 6.421 16 4.5 14.421 1 12.5 1zm0 2c.84 0 1.5.66 1.5 1.5S13.34 6 12.5 6 11 5.34 11 4.5 11.66 3 12.5 3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 6v7c0 .833.564 1.525 1.053 1.77.488.244.947.23.947.23h7s.459.014.947-.23C14.436 14.525 15 13.833 15 13V6h-1zm2 2h7v5H6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M.988 7A1 1 0 000 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2A1 1 0 00.988 7zM2 9.87l.197.13-.197.13z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1 12H0v1h1zm0-5H0v1h1zm0 1l3 2-3 2zm13 0h2v2l-1 1h-1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14 7v6c0 1-1 1-1 1H6s-1 0-1-1V7z",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1u = memo(SvgCameraVideoSymbolic);
var camera_video_symbolic_default = Memo$1u;

const SvgCameraWebSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 4h8c.554 0 1 .446 1 1v7c0 .554-.446 1-1 1H6c-.554 0-1-.446-1-1V5c0-.554.446-1 1-1zM5 8.47L1.53 5H1v7h.5z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#bebebe",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$1v = memo(SvgCameraWebSymbolic);
var camera_web_symbolic_default = Memo$1v;

const SvgCapsLockSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.07.918L1 7.988h3v4h8v-4h3.143zM4 12.988v2h8v-2z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$1w = memo(SvgCapsLockSymbolic);
var caps_lock_symbolic_default = Memo$1w;

const SvgChangesAllowSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 9h10c.554 0 1 .446 1 1v3c0 .554-.446 1-1 1H3c-.554 0-1-.446-1-1v-3c0-.554.446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 0s-.709-.014-1.447.356C4.814.725 4 1.666 4 3v3h2V3c0-.667.186-.725.447-.855C6.71 2.014 7 2 7 2h2s.291.014.553.145c.261.13.447.188.447.855v8h2V3c0-1.333-.814-2.275-1.553-2.644C9.71-.014 9 0 9 0z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 12h12v4H2z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1x = memo(SvgChangesAllowSymbolic);
var changes_allow_symbolic_default = Memo$1x;

const SvgChangesPreventSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 7h10c.554 0 1 .446 1 1v3c0 .554-.446 1-1 1H3c-.554 0-1-.446-1-1V8c0-.554.446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 1s-.709-.014-1.447.355C4.814 1.725 4 2.667 4 4v4h2V4c0-.667.186-.725.447-.855C6.71 3.014 7 3 7 3h2s.291.014.553.145c.261.13.447.188.447.855v4h2V4c0-1.333-.814-2.275-1.553-2.645C9.71.986 9 1 9 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 10h12v4H2z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1y = memo(SvgChangesPreventSymbolic);
var changes_prevent_symbolic_default = Memo$1y;

const SvgChannelInsecureSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 0C3.355 0 2 1.355 2 3v3h2V3c0-.571.429-1 1-1h2c.571 0 1 .429 1 1v.25c.267-.15.557-.25.875-.25H10c0-1.645-1.355-3-3-3zM2 9s-1 0-1 1v5h10v-2H8.875C7.865 13 7 12.135 7 11.125V9z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    className: "warning",
    d: "M8.875 4A.863.863 0 008 4.875v6.25c0 .492.383.875.875.875h6.25a.863.863 0 00.875-.875v-6.25A.863.863 0 0015.125 4zM11 5h2v2.5s0 .5-.5.5h-1c-.5 0-.5-.5-.5-.5zm.5 4h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    fill: "#f57900"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1z = memo(SvgChannelInsecureSymbolic);
var channel_insecure_symbolic_default = Memo$1z;

const SvgChannelSecureSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M7 2C5.355 2 4 3.355 4 5v2S3 7 3 8v5h10V8s0-1-1-1V5c0-1.645-1.355-3-3-3zm0 2h2c.571 0 1 .429 1 1v2H6V5c0-.571.429-1 1-1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$1A = memo(SvgChannelSecureSymbolic);
var channel_secure_symbolic_default = Memo$1A;

const SvgChatMessageNewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.000002 16",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-312,-872)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-312,-808)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-312,-872)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-312,-808)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-312,-808)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-312,-808)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-312,-808)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-312,-808)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-312,-808)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-312,-808)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-312,-808)"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 314.5,810 c -1.385,0 -2.5,1.115 -2.5,2.5 v 7 c 0,1.385 1.115,2.5 2.5,2.5 h 8.375 l 2.0776,1.9724 1.0474,10e-4 v -2.03592 c 1.14126,-0.23235 2,-1.22563 2,-2.4375 v -7 c 0,-1.385 -1.115,-2.5 -2.5,-2.5 z m 0,2 h 11 c 0.277,0 0.5,0.223 0.5,0.5 v 7 c 0,0.277 -0.223,0.5 -0.5,0.5 h -11 c -0.277,0 -0.5,-0.223 -0.5,-0.5 v -7 c 0,-0.277 0.223,-0.5 0.5,-0.5 z m 4.5,1 v 2 h -2 v 2 h 2 v 2 h 2 v -2 h 2 v -2 h -2 v -2 z",
    id: "path4075",
    style: {
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 1,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeOpacity: 1
    }
  }))));
  return render(rest, ...restArgs);
};
const Memo$1B = memo(SvgChatMessageNewSymbolic);
var chat_message_new_symbolic_default = Memo$1B;

const SvgCheckboxCheckedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 1A2.506 2.506 0 001 3.5v9C1 13.876 2.124 15 3.5 15h9c1.376 0 2.5-1.124 2.5-2.5v-9C15 2.124 13.876 1 12.5 1zm0 1h9c.84 0 1.5.66 1.5 1.5v9c0 .84-.66 1.5-1.5 1.5h-9c-.84 0-1.5-.66-1.5-1.5v-9C2 2.66 2.66 2 3.5 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14.5 3l-.5-.5L7.5 9 5 6.5l-2 2L7.5 13l7-7z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1C = memo(SvgCheckboxCheckedSymbolic);
var checkbox_checked_symbolic_default = Memo$1C;

const SvgCheckboxMixedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 1A2.506 2.506 0 001 3.5v9C1 13.876 2.124 15 3.5 15h9c1.376 0 2.5-1.124 2.5-2.5v-9C15 2.124 13.876 1 12.5 1zm0 1h9c.84 0 1.5.66 1.5 1.5v9c0 .84-.66 1.5-1.5 1.5h-9c-.84 0-1.5-.66-1.5-1.5v-9C2 2.66 2.66 2 3.5 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 6a2 2 0 100 4h6a2 2 0 100-4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1D = memo(SvgCheckboxMixedSymbolic);
var checkbox_mixed_symbolic_default = Memo$1D;

const SvgCheckboxSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 1A2.506 2.506 0 001 3.5v9C1 13.876 2.124 15 3.5 15h9c1.376 0 2.5-1.124 2.5-2.5v-9C15 2.124 13.876 1 12.5 1zm0 1h9c.84 0 1.5.66 1.5 1.5v9c0 .84-.66 1.5-1.5 1.5h-9c-.84 0-1.5-.66-1.5-1.5v-9C2 2.66 2.66 2 3.5 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$1E = memo(SvgCheckboxSymbolic);
var checkbox_symbolic_default = Memo$1E;

const SvgColorSelectSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.006 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M12.96.98a2 2 0 00-1.374.606L10 3.172 8.914 2.086a.5.5 0 00-.707 0L6.086 4.207a.5.5 0 000 .707l.646.647-5.586 5.585A.5.5 0 001 11.5v1.793l-.854.853a.5.5 0 000 .708l1 1a.5.5 0 00.707 0L2.707 15H4.5a.5.5 0 00.353-.146l5.586-5.586.647.646a.5.5 0 00.707 0l2.121-2.121a.5.5 0 000-.707L12.828 6l1.586-1.586c1.308-1.272.37-3.487-1.453-3.434zM7.94 6.768L9.231 8.06 6.292 11H3.708z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$1F = memo(SvgColorSelectSymbolic);
var color_select_symbolic_default = Memo$1F;

const SvgColorimeterColorhugSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.009",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.062.01c-.454.049-.883.22-1.25.5C5.324.88 5 1.463 5 2.196v5.312s.236.507.5.507.5-.507.5-.507V2.197c0-.45.172-.704.437-.907.266-.202.664-.3 1.063-.28.399.018.784.153 1.062.405.279.253.47.585.47 1.125 0 2.166 1.463 3.51 3 3.47.856-.023 1.687-.478 2.25-1.313l-.563-1c-.376.915-1.068 1.295-1.719 1.312-.96.025-1.969-.73-1.969-2.469 0-.792-.337-1.443-.812-1.875C8.743.235 8.138.038 7.53.01c-.151-.007-.317-.016-.469 0zm6.938 2v.124l.781 1.375c.012-.04.021-.083.031-.125zm0 .343c-.006.106-.02.214-.031.312l.719 1.22c.023-.063.041-.123.062-.188zm-.063.5c-.013.09-.044.166-.062.25l.656 1.125c.03-.061.067-.124.094-.188zm-.093.437c-.024.09-.066.17-.094.25l.594 1.032c.04-.065.088-.119.125-.188z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.727 6.01h5.546c.403 0 .727.323.727.726v6.546a.725.725 0 01-.727.727H2.727A.725.725 0 012 13.282V6.736c0-.403.324-.727.727-.727z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1G = memo(SvgColorimeterColorhugSymbolic);
var colorimeter_colorhug_symbolic_default = Memo$1G;

const SvgComputerAppleIpadSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.469 1C1.648 1 1 1.648 1 2.469V13.53c0 .822.648 1.47 1.469 1.47h9.062c.821 0 1.469-.648 1.469-1.469V2.47C13 1.648 12.352 1 11.531 1zM2 2h10v11H2z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$1H = memo(SvgComputerAppleIpadSymbolic);
var computer_apple_ipad_symbolic_default = Memo$1H;

const SvgComputerFailSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 1C2.338 1 1 2.338 1 4v6c0 1.662 1.338 3 3 3h8c1.662 0 3-1.338 3-3V4c0-1.662-1.338-3-3-3zm2 3c.558 0 1.031.473 1.031 1.031V6c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.969C5 4.473 5.442 4 6 4zm4 0c.558 0 1 .473 1 1.031V6c0 .558-.442 1-1 1s-1-.442-1-1v-.969C9 4.473 9.442 4 10 4zM8 8.031c3.256 0 5 .874 5 1.406v.5c-.997-.636-4.016-.906-5-.906s-3.805-.062-5 .906v-.5c0-.68 1.744-1.406 5-1.406zM8 14c-5 0-5 1-5 1 0 1 1 1 1 1h8c1 0 1-1 1-1s0-1-5-1z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$1I = memo(SvgComputerFailSymbolic);
var computer_fail_symbolic_default = Memo$1I;

const SvgComputerSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1c1.662 0 3 1.338 3 3v6c0 1.662-1.338 3-3 3H4c-1.662 0-3-1.338-3-3V4c0-1.662 1.338-3 3-3zm0 2H4c-.554 0-1 .446-1 1v6c0 .554.446 1 1 1h8c.554 0 1-.446 1-1V4c0-.554-.446-1-1-1zM8 14c-5 0-5 1-5 1 0 1 1 1 1 1h8c1 0 1-1 1-1s0-1-5-1z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$1J = memo(SvgComputerSymbolic);
var computer_symbolic_default = Memo$1J;

const SvgContactNewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.00585 16",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-332,-852)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-332,-788)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-332,-852)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-332,-788)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-332,-788)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-332,-788)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-332,-788)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-332,-788)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-332,-788)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-332,-788)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-332,-788)"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 338,789 c -1.65685,0 -3,1.34315 -3,3 0,1.65685 1.34315,3 3,3 1.65685,0 3,-1.34315 3,-3 0,-1.65685 -1.34315,-3 -3,-3 z m -1.5,7 c -2.493,0 -4.5,2.007 -4.5,4.5 v 1.5 c 0,1 1,1 1,1 h 10 c 0,0 1,0 1,-1 v -1.5 c 0,-2.493 -2.007,-4.5 -4.5,-4.5 z",
    id: "path4144",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 1.84615,
      marker: "none",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "m 344.00584,789.00326 v 1.99673 h -1.99999 v 1.99673 h 1.99999 v 1.99673 h 2.00001 v -1.99673 h 2 v -1.99673 h -2 v -1.99673 z",
    id: "path4360",
    style: {
      display: "inline",
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      enableBackground: "new"
    }
  }))));
  return render(rest, ...restArgs);
};
const Memo$1K = memo(SvgContactNewSymbolic);
var contact_new_symbolic_default = Memo$1K;

const SvgContentLoadingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 8a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2zm5 0a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2zm5 0a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$1L = memo(SvgContentLoadingSymbolic);
var content_loading_symbolic_default = Memo$1L;

const SvgDaytimeSunriseSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M.5 13h2c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-2a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5zm13 0h2c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-2a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5zm-2.318-3.596l1.414-1.415a.499.499 0 01.707 0l.707.708a.499.499 0 010 .707l-1.414 1.414a.499.499 0 01-.707 0l-.707-.707a.499.499 0 010-.707zM9 8.5v-4c0-.277-.223-.5-.5-.5h-1c-.277 0-.5.223-.5.5v4c0 .277.223.5.5.5h1c.277 0 .5-.223.5-.5zm-5.596 2.318L1.989 9.404a.499.499 0 010-.707l.708-.707a.499.499 0 01.707 0l1.414 1.414a.499.499 0 010 .707l-.707.707a.499.499 0 01-.707 0z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 10c-2.197 0-4 1.803-4 4a1 1 0 001 1h6a1 1 0 001-1c0-2.197-1.803-4-4-4zm0 2c.723 0 1.239.436 1.59 1H6.41c.351-.564.867-1 1.59-1zM8 1.586L5.293 4.293l1.414 1.414L8 4.414l1.293 1.293 1.414-1.414z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 5v1h1V5zM5 5v1h1V5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 5c0 .554.446 1 1 1s1-.446 1-1-.446-1-1-1-1 .446-1 1zm4 0c0 .554.446 1 1 1s1-.446 1-1-.446-1-1-1-1 .446-1 1zm-4 9a3 3 0 013-3 3 3 0 013 3H8z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1M = memo(SvgDaytimeSunriseSymbolic);
var daytime_sunrise_symbolic_default = Memo$1M;

const SvgDaytimeSunsetSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M.5 4h2c.277 0 .5-.223.5-.5v-1c0-.277-.223-.5-.5-.5h-2c-.277 0-.5.223-.5.5v1c0 .277.223.5.5.5zm13 0h2c.277 0 .5-.223.5-.5v-1c0-.277-.223-.5-.5-.5h-2c-.277 0-.5.223-.5.5v1c0 .277.223.5.5.5zm-2.318 3.596l1.414 1.415a.499.499 0 00.707 0l.707-.708a.499.499 0 000-.707l-1.414-1.414a.499.499 0 00-.707 0l-.707.707a.499.499 0 000 .707zM9 8.5v4c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-4c0-.277.223-.5.5-.5h1c.277 0 .5.223.5.5zM3.404 6.182L1.989 7.596a.499.499 0 000 .707l.708.707a.499.499 0 00.707 0l1.414-1.414a.499.499 0 000-.707l-.707-.707a.499.499 0 00-.707 0z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 7C5.803 7 4 5.197 4 3a1 1 0 011-1h6a1 1 0 011 1c0 2.197-1.803 4-4 4zm0-2c.723 0 1.239-.436 1.59-1H6.41c.351.564.867 1 1.59 1zm-1.293 6.293l-1.414 1.414L8 15.414l2.707-2.707-1.414-1.414L8 12.586z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 12v-1h1v1zm-5 0v-1h1v1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 12c0-.554.446-1 1-1s1 .446 1 1-.446 1-1 1-1-.446-1-1zm4 0c0-.554.446-1 1-1s1 .446 1 1-.446 1-1 1-1-.446-1-1zM5 3a3 3 0 003 3 3 3 0 003-3H8z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1N = memo(SvgDaytimeSunsetSymbolic);
var daytime_sunset_symbolic_default = Memo$1N;

const SvgDialogErrorSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1C4.13 1 1 4.13 1 8s3.13 7 7 7 7-3.13 7-7-3.13-7-7-7zM4 7h8v2H4z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Andale Mono'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Andale Mono",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$1O = memo(SvgDialogErrorSymbolic);
var dialog_error_symbolic_default = Memo$1O;

const SvgDialogInformationSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.994 0a6.01 6.01 0 00-5.87 4.777c-.528 2.533.69 5.036 2.874 6.327l.002.898A1 1 0 006 13h4a1 1 0 001-.998l.002-.9c2.183-1.293 3.399-3.797 2.87-6.33A6.01 6.01 0 007.993 0zm.002 2c1.9 0 3.529 1.322 3.918 3.182a3.99 3.99 0 01-2.312 4.484 1 1 0 00-.6.914L9 11H6.998v-.418a1 1 0 00-.602-.914 3.992 3.992 0 01-2.314-4.484A3.99 3.99 0 017.996 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 15c0 .554.446 1 1 1h2c.554 0 1-.446 1-1v-1H6z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.992 5.994a.5.5 0 00-.347.86l1 1a.5.5 0 00.707 0l1-1a.5.5 0 10-.707-.707l-.647.646-.646-.646a.5.5 0 00-.36-.153z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.35,
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1P = memo(SvgDialogInformationSymbolic);
var dialog_information_symbolic_default = Memo$1P;

const SvgDialogPasswordSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 4a4 4 0 00-4 4 4 4 0 004 4 4 4 0 003.87-3H13v2h3V7H8.867A4 4 0 005 4zm0 2a2 2 0 012 2 2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$1Q = memo(SvgDialogPasswordSymbolic);
var dialog_password_symbolic_default = Memo$1Q;

const SvgDialogQuestionSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 .031c-.4 0-.815.16-1.125.469L.5 6.875c-.62.62-.62 1.63 0 2.25L6.875 15.5c.62.62 1.63.62 2.25 0L15.5 9.125c.62-.62.62-1.63 0-2.25L9.125.5A1.604 1.604 0 008 .031zm.152 2.975a3.001 3.001 0 011.97.873 3.006 3.006 0 01.65 3.27A2.998 2.998 0 019 8.82V10H7V8a1 1 0 011-1c.407 0 .768-.24.924-.617a.994.994 0 00-.217-1.09.994.994 0 00-1.09-.217A.994.994 0 007 6H5c0-1.21.733-2.308 1.852-2.771a2.98 2.98 0 011.3-.223zM8 11a1 1 0 011 1 1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$1R = memo(SvgDialogQuestionSymbolic);
var dialog_question_symbolic_default = Memo$1R;

const SvgDialogWarningSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.906.094c-.525-.029-1.038.283-1.437.969L.219 12.655C-.315 13.62.267 15 1.313 15h13.156c.982 0 1.903-1.16 1.219-2.344L9.375 1.125C8.976.479 8.432.122 7.906.094zM7.97 4.03c.544-.017 1.048.487 1.031 1.032V9c.007.528-.471 1-1 1-.528 0-1.007-.472-1-1V5.062a1.033 1.033 0 01.813-1 1 1 0 01.156-.03zM8 11a1 1 0 110 2 1 1 0 010-2z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$1S = memo(SvgDialogWarningSymbolic);
var dialog_warning_symbolic_default = Memo$1S;

const SvgDisplayBrightnessSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-51.9998,-192)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-51.9998,-128)"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 52.4998,135 h 2.000203 c 0.276999,0 0.499999,0.223 0.499999,0.5 v 1 c 0,0.277 -0.223,0.5 -0.499999,0.5 H 52.4998 c -0.276999,0 -0.499998,-0.223 -0.499998,-0.5 v -1 c 0,-0.277 0.222999,-0.5 0.499998,-0.5 z",
    id: "rect4906-43-6",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none",
      enableBackground: "new"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "M 65.4998,135 H 67.5 c 0.276889,0 0.4998,0.223 0.4998,0.5 v 1 c 0,0.277 -0.222911,0.5 -0.4998,0.5 H 65.4998 C 65.222911,137 65,136.777 65,136.5 v -1 c 0,-0.277 0.222911,-0.5 0.4998,-0.5 z",
    id: "rect4906-4-6-6",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none",
      enableBackground: "new"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "m -61.240255,137.5928 h 2.000203 c 0.276999,0 0.499999,0.223 0.499999,0.5 v 1 c 0,0.277 -0.223,0.5 -0.499999,0.5 h -2.000203 c -0.276999,0 -0.499998,-0.223 -0.499998,-0.5 v -1 c 0,-0.277 0.222999,-0.5 0.499998,-0.5 z",
    id: "rect8386",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none",
      enableBackground: "new"
    },
    transform: "rotate(-45)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m -48.240255,137.5928 h 2.0002 c 0.276889,0 0.4998,0.223 0.4998,0.5 v 1 c 0,0.277 -0.222911,0.5 -0.4998,0.5 h -2.0002 c -0.276889,0 -0.4998,-0.223 -0.4998,-0.5 v -1 c 0,-0.277 0.222911,-0.5 0.4998,-0.5 z",
    id: "rect8388",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none",
      enableBackground: "new"
    },
    transform: "rotate(-45)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m -143.5,58.999832 h 2.0002 c 0.277,0 0.5,0.223 0.5,0.5 v 1 c 0,0.277 -0.223,0.5 -0.5,0.5 H -143.5 c -0.277,0 -0.5,-0.223 -0.5,-0.5 v -1 c 0,-0.277 0.223,-0.5 0.5,-0.5 z",
    id: "rect8390",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none",
      enableBackground: "new"
    },
    transform: "rotate(-90)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m -130.50002,58.999832 h 2.0002 c 0.27689,0 0.4998,0.223 0.4998,0.5 v 1 c 0,0.277 -0.22291,0.5 -0.4998,0.5 h -2.0002 c -0.27689,0 -0.4998,-0.223 -0.4998,-0.5 v -1 c 0,-0.277 0.22291,-0.5 0.4998,-0.5 z",
    id: "rect8392",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none",
      enableBackground: "new"
    },
    transform: "rotate(-90)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m -146.09281,-54.740238 h 2.00021 c 0.277,0 0.5,0.223 0.5,0.5 v 1 c 0,0.277 -0.223,0.5 -0.5,0.5 h -2.00021 c -0.27699,0 -0.49999,-0.223 -0.49999,-0.5 v -1 c 0,-0.277 0.223,-0.5 0.49999,-0.5 z",
    id: "rect8394",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none",
      enableBackground: "new"
    },
    transform: "rotate(-135)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m -133.09282,-54.740238 h 2.0002 c 0.27689,0 0.4998,0.223 0.4998,0.5 v 1 c 0,0.277 -0.22291,0.5 -0.4998,0.5 h -2.0002 c -0.27689,0 -0.4998,-0.223 -0.4998,-0.5 v -1 c 0,-0.277 0.22291,-0.5 0.4998,-0.5 z",
    id: "rect8396",
    style: {
      color: "#bebebe",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      marker: "none",
      enableBackground: "new"
    },
    transform: "rotate(-135)"
  }), /* @__PURE__ */ createElement("g", {
    id: "g3424",
    style: {
      opacity: 1
    }
  }, /* @__PURE__ */ createElement("path", {
    d: "m 64,136 c 0,2.20914 -1.790861,4 -4,4 -2.209139,0 -4,-1.79086 -4,-4 0,-2.20914 1.790861,-4 4,-4 2.209139,0 4,1.79086 4,4 z",
    id: "path3426",
    style: {
      color: "#000000",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontVariantEastAsian: "normal",
      fontFeatureSettings: "normal",
      fontVariationSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      shapeMargin: 0,
      inlineSize: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      strokeWidth: 0.499999,
      strokeLinecap: "butt",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "new",
      stopColor: "#000000",
      stopOpacity: 1,
      stroke: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "M 60 131.75 C 57.655751 131.75 55.75 133.65575 55.75 136 C 55.75 138.34425 57.655751 140.25 60 140.25 C 62.344249 140.25 64.25 138.34425 64.25 136 C 64.25 133.65575 62.344249 131.75 60 131.75 z M 60 132.25 C 62.074029 132.25 63.75 133.92597 63.75 136 C 63.75 138.07403 62.074029 139.75 60 139.75 C 57.925971 139.75 56.25 138.07403 56.25 136 C 56.25 133.92597 57.925971 132.25 60 132.25 z ",
    id: "path3428",
    style: {
      color: "#000000",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontVariantEastAsian: "normal",
      fontFeatureSettings: "normal",
      fontVariationSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      shapeMargin: 0,
      inlineSize: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fillOpacity: 1,
      fillRule: "nonzero",
      strokeWidth: 0.499999,
      strokeLinecap: "butt",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "new",
      stopColor: "#000000",
      stopOpacity: 1,
      stroke: "none"
    }
  }))), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-51.9998,-192)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-51.9998,-128)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-51.9998,-128)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-51.9998,-128)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-51.9998,-128)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-51.9998,-128)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-51.9998,-128)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-51.9998,-128)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-51.9998,-128)"
  })));
  return render(rest, ...restArgs);
};
const Memo$1T = memo(SvgDisplayBrightnessSymbolic);
var display_brightness_symbolic_default = Memo$1T;

const SvgDisplayProjectorSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.032 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M11 2a4.001 4.001 0 00-3.764 2.654c-.11.414-.431.346-.431.346H1.029C0 5 0 6 0 6v5s0 1 1 1h1v.5c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5V12h6v.5c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5V12h1.002C16 12 16 11 16 11V6c0-1-.998-1-.998-1h.121s-.25.032-.353-.324A4 4 0 0011 2zm0 2a2 2 0 110 4 2 2 0 010-4zm-.744 1.332A1 1 0 0010 6a1 1 0 001 1 1 1 0 001-1 1 1 0 00-.256-.666A.75.75 0 0111 6a.75.75 0 01-.744-.668zM1.5 6A.5 2.5 0 012 8.5a.5 2.5 0 01-.5 2.5.5 2.5 0 01-.5-2.5.5 2.5 0 01.5-2.5zm2 0A.5 2.5 0 014 8.5a.5 2.5 0 01-.5 2.5.5 2.5 0 01-.5-2.5.5 2.5 0 01.5-2.5zm2 0c.276 0 .5 1.12.5 2.5S5.776 11 5.5 11 5 9.88 5 8.5 5.224 6 5.5 6z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$1U = memo(SvgDisplayProjectorSymbolic);
var display_projector_symbolic_default = Memo$1U;

const SvgDocumentEditSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436",
    fillRule: "evenodd"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.01 11.014l6.518-6.572 3 3-6.518 6.572h-3z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.637 1.676c-.2 0-.4.077-.554.23l-1.77 1.768 3.053 3.053 1.77-1.77a.783.783 0 000-1.109l-1.944-1.941a.782.782 0 00-.555-.23z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1V = memo(SvgDocumentEditSymbolic);
var document_edit_symbolic_default = Memo$1V;

const SvgDocumentNewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9 12v2h6v-2h-5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v13a1 1 0 001 1h5v-2H4V3h5.586L12 5.414V9h2V5a1 1 0 00-.293-.707l-3-3A1 1 0 0010 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 10v6h2v-6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1W = memo(SvgDocumentNewSymbolic);
var document_new_symbolic_default = Memo$1W;

const SvgDocumentOpenRecentSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.487.02A7.492 7.492 0 001 7.507a7.492 7.492 0 007.487 7.486 7.492 7.492 0 007.486-7.486A7.492 7.492 0 008.487.02zm0 1.973A5.508 5.508 0 0114 7.507a5.508 5.508 0 01-5.513 5.513 5.508 5.508 0 01-5.514-5.513 5.508 5.508 0 015.514-5.514z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.393 4.007a.5.5 0 00-.25.156L8.487 6.819 6.83 5.163a.5.5 0 10-.687.687l2 2a.5.5 0 00.687 0l3-3a.5.5 0 00-.437-.843z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1X = memo(SvgDocumentOpenRecentSymbolic);
var document_open_recent_symbolic_default = Memo$1X;

const SvgDocumentOpenSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M.985 2.986A1 1 0 000 4v9s-.014.459.23.947C.476 14.436 1.168 15 2 15h1.832a1 1 0 00.326 0H14s.459.014.947-.23C15.436 14.525 16 13.833 16 13v-3a1 1 0 00-1-1H4a1 1 0 00-1 1v3H2V4A1 1 0 00.985 2.986zM5 11h9v2H5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 11h11v3H4zm11-1h1v1h-1zM3 9h1v1H3zM1 3h2v5H1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 0a1 1 0 00-1 1v7h2V2h4.086L13 4.914V8h2V4.5a1 1 0 00-.293-.707l-3.5-3.5A1 1 0 0010.5 0z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 1v4h4z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 9h1v1h-1z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1Y = memo(SvgDocumentOpenSymbolic);
var document_open_symbolic_default = Memo$1Y;

const SvgDocumentPageSetupSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v2a1 1 0 102 0V3h5.586L12 5.414V10a1 1 0 102 0V5a1 1 0 00-.293-.707l-3-3A1 1 0 0010 1zm0 13a1 1 0 100 2h10a1 1 0 100-2zM2 5.734V13h12.11zm2 3.532L6.89 11H4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 14h1v1H2zm11 0h1v1h-1z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1Z = memo(SvgDocumentPageSetupSymbolic);
var document_page_setup_symbolic_default = Memo$1Z;

const SvgDocumentPrintPreviewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 1v2h8V1zM2 4c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h1V8h5.125a3.66 3.66 0 012.531-1.031 3.707 3.707 0 013.625 2.968c.393-.137.72-.53.72-.937V5c0-.5-.5-1-1-1zm2 5v5h5.094a3.709 3.709 0 01-2.125-3.344c0-.595.152-1.156.406-1.656z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10.656 7.938a2.726 2.726 0 00-2.718 2.718 2.726 2.726 0 002.718 2.719c.488 0 .948-.148 1.344-.375a.75.75 0 00.156.219L14 15.03a.751.751 0 101.063-1.062l-1.844-1.813A.75.75 0 0013 12c.227-.396.375-.857.375-1.344a2.726 2.726 0 00-2.719-2.719zm0 1c.956 0 1.72.763 1.72 1.718s-.764 1.719-1.72 1.719a1.711 1.711 0 01-1.718-1.719c0-.955.763-1.719 1.718-1.719z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1_ = memo(SvgDocumentPrintPreviewSymbolic);
var document_print_preview_symbolic_default = Memo$1_;

const SvgDocumentPrintSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 4c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h1V8h10v2h1c.5 0 1-.5 1-1V5c0-.5-.5-1-1-1zm2-3v2h8V1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 9v5h8V9z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$1$ = memo(SvgDocumentPrintSymbolic);
var document_print_symbolic_default = Memo$1$;

const SvgDocumentPropertiesSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.003",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.01 7.848a3.264 3.264 0 00-.994-.003l.976 1.73c.2.354-.024.762-.45 1.008l-.77.445c-.431.24-.91.208-1.111-.148l-.976-1.729a3.22 3.22 0 00-.514.848c-.565 1.47.237 2.892 1.792 3.174.324.06.667.046.994.003.026-.004 1.518 2.765 1.518 2.765l3.505.062-2.667-4.13c.206-.256.37-.543.488-.85.566-1.47-.236-2.892-1.791-3.175z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v13a1 1 0 001 1h4a1 1 0 100-2H4V3h5.586L12 5.414V12a1 1 0 102 0V5a1 1 0 00-.293-.707l-3-3A1 1 0 0010 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$20 = memo(SvgDocumentPropertiesSymbolic);
var document_properties_symbolic_default = Memo$20;

const SvgDocumentRevertSymbolicRtl = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v5h2V3h5.586L12 5.414V14H5v2h8a1 1 0 001-1V5a1 1 0 00-.293-.707l-3-3A1 1 0 0010 1zm2 7c-1.333 0-2.275.814-2.645 1.553C1.986 10.29 2 11 2 11v5h2v-5s.014-.291.145-.553c.13-.261.188-.447.855-.447h4V8H8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.707 6.293L6.293 7.707 7.586 9l-1.293 1.293 1.414 1.414L10.414 9z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 11H6v1h1zm0-5H6v1h1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 6c-.554 0-1 .446-1 1s.446 1 1 1 1-.446 1-1-.446-1-1-1zm0 4c-.554 0-1 .446-1 1s.446 1 1 1 1-.446 1-1-.446-1-1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$21 = memo(SvgDocumentRevertSymbolicRtl);
var document_revert_symbolic_rtl_default = Memo$21;

const SvgDocumentRevertSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v13a1 1 0 001 1h8v-2H4V3h5.586L12 5.414V7h2V5a1 1 0 00-.293-.707l-3-3A1 1 0 0010 1zm5 7v2h3c.667 0 .725.186.855.447.131.262.145.553.145.553v5h2v-5s.014-.709-.355-1.447C13.275 8.814 12.333 8 11 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.293 6.293L5.586 9l2.707 2.707 1.414-1.414L8.414 9l1.293-1.293z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 11h1v1H9zm0-5h1v1H9z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 6c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm0 4c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$22 = memo(SvgDocumentRevertSymbolic);
var document_revert_symbolic_default = Memo$22;

const SvgDocumentSaveAsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 7.028v1c0 .265.093.53.281.718l3 3 .282.282h.875l.28-.282 3-3A1.01 1.01 0 0012 8.028v-1h-1c-.265 0-.53.093-.719.281L8 9.59 5.719 7.31A1.015 1.015 0 005 7.028z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 3.027v7h2v-7z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 13v2h12v-2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.994 1a1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1 1 1 0 011 1zm3 0a1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1 1 1 0 011 1zm3 0a1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1 1 1 0 011 1z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$23 = memo(SvgDocumentSaveAsSymbolic);
var document_save_as_symbolic_default = Memo$23;

const SvgDocumentSaveSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7 1v7.563L5.719 7.28A1.015 1.015 0 005 7H4v1c0 .265.093.53.281.719l3 3 .282.281h.875l.28-.281 3-3A1.01 1.01 0 0012 8V7h-1c-.265 0-.53.093-.719.281L9 8.563V1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.994 13L2 15h12l-.006-2z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$24 = memo(SvgDocumentSaveSymbolic);
var document_save_symbolic_default = Memo$24;

const SvgDocumentSendSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9 10c0 .554.446 1 1 1s1-.446 1-1-.446-1-1-1-1 .446-1 1zm-4 0c0 .554.446 1 1 1s1-.446 1-1-.446-1-1-1-1 .446-1 1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v13a1 1 0 001 1h3v-2H4V3h5.586L12 5.414V14h-2v2h3a1 1 0 001-1V5a1 1 0 00-.293-.707l-3-3A1 1 0 0010 1zm4 7v8h2V8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 6.586L5.293 9.293l1.414 1.414L8 9.414l1.293 1.293 1.414-1.414z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 10v1h1v-1zm-5 0v1h1v-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$25 = memo(SvgDocumentSendSymbolic);
var document_send_symbolic_default = Memo$25;

const SvgDriveHarddiskIeee1394Symbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 3a4 4 0 014 4c0 2.21-1.813 4.312-4 4H4V7a4 4 0 014-4zm0 2a2 2 0 100 4 2 2 0 000-4z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.197 0A2.217 2.217 0 001 2.201V13.8c0 1.199.995 2.2 2.197 2.2h9.607A2.215 2.215 0 0015 13.799V2.2c0-1.199-.994-2.2-2.196-2.2zm0 2h9.607c.124 0 .196.07.196.201V13.8c0 .13-.072.201-.196.201H3.197C3.073 14 3 13.93 3 13.799V2.2c0-.13.073-.201.197-.201z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$26 = memo(SvgDriveHarddiskIeee1394Symbolic);
var drive_harddisk_ieee1394_symbolic_default = Memo$26;

const SvgDriveHarddiskSolidstateSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.197 0A2.217 2.217 0 001 2.201V13.8c0 1.199.995 2.2 2.197 2.2h9.607A2.215 2.215 0 0015 13.799V2.2c0-1.199-.994-2.2-2.196-2.2zm0 2h9.607c.124 0 .196.07.196.201V13.8c0 .13-.072.201-.196.201H3.197C3.073 14 3 13.93 3 13.799V2.2c0-.13.073-.201.197-.201z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 4h6v7H5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4.047 5v1H12V5H4.547zm0 2v1H12V7H4.547zm0 2v1H12V9H4.547z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 3v9h1V3zm2 0v9h1V3zm2 0v9h1V3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$27 = memo(SvgDriveHarddiskSolidstateSymbolic);
var drive_harddisk_solidstate_symbolic_default = Memo$27;

const SvgDriveHarddiskSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 3a4 4 0 014 4c0 2.21-1.813 4.312-4 4H4V7a4 4 0 014-4zm0 2a2 2 0 100 4 2 2 0 000-4z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.197 0A2.217 2.217 0 001 2.201V13.8c0 1.199.995 2.2 2.197 2.2h9.607A2.215 2.215 0 0015 13.799V2.2c0-1.199-.994-2.2-2.196-2.2zm0 2h9.607c.124 0 .196.07.196.201V13.8c0 .13-.072.201-.196.201H3.197C3.073 14 3 13.93 3 13.799V2.2c0-.13.073-.201.197-.201z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$28 = memo(SvgDriveHarddiskSymbolic);
var drive_harddisk_symbolic_default = Memo$28;

const SvgDriveHarddiskSystemSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 3a4 4 0 014 4c0 2.21-1.813 4.312-4 4H4V7a4 4 0 014-4zm0 2a2 2 0 100 4 2 2 0 000-4z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.197 0A2.217 2.217 0 001 2.201V13.8c0 1.199.995 2.2 2.197 2.2h9.607A2.215 2.215 0 0015 13.799V2.2c0-1.199-.994-2.2-2.196-2.2zm0 2h9.607c.124 0 .196.07.196.201V13.8c0 .13-.072.201-.196.201H3.197C3.073 14 3 13.93 3 13.799V2.2c0-.13.073-.201.197-.201z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$29 = memo(SvgDriveHarddiskSystemSymbolic);
var drive_harddisk_system_symbolic_default = Memo$29;

const SvgDriveHarddiskUsbSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.5 0h-1l-2 4H7v5H4V7.729A2 2 0 005 6a2 2 0 10-3 1.73V9c0 2 2 2 2 2h3v1.271A2 2 0 006 14a2 2 0 103-1.73V11h3s2 0 2-2V8s1.125-.188 1-1V5c.125-1.125-1-1-1-1h-2c-1.063 0-1 1-1 1v2c0 1 1 1 1 1v1H9V4h1.5z",
    fill: "#2e3436",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$2a = memo(SvgDriveHarddiskUsbSymbolic);
var drive_harddisk_usb_symbolic_default = Memo$2a;

const SvgDriveMultidiskSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fontWeight: 400,
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.195 0A2.215 2.215 0 001 2.201V9.8c0 1.199.993 2.2 2.195 2.2h6.61A2.215 2.215 0 0012 9.799V2.2C12 1.001 11.006 0 9.804 0zM3.5 2h6c.277 0 .5.223.5.5v7c0 .277-.223.5-.5.5h-6a.499.499 0 01-.5-.5v-7c0-.277.223-.5.5-.5z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M13 4v9.813c0 .13-.064.187-.187.187H6.188C6.064 14 6 13.943 6 13.812V13H4v.813C4 15.012 4.986 16 6.188 16h6.625A2.197 2.197 0 0015 13.812V6.189a2.21 2.21 0 00-2-2.188z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.496 3.004c-1.371 0-2.515 1.127-2.498 2.498L3.994 8h2.502a2.51 2.51 0 002.498-2.498 2.509 2.509 0 00-2.498-2.498zM6.5 4.5a1 1 0 011 1 1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2b = memo(SvgDriveMultidiskSymbolic);
var drive_multidisk_symbolic_default = Memo$2b;

const SvgDriveOpticalSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.5 1A2.495 2.495 0 000 3.5v8C0 12.885 1.115 14 2.5 14v-2a.499.499 0 01-.5-.5V10h12v1.5c0 .277-.223.5-.5.5v2c1.385 0 2.5-1.115 2.5-2.5v-8C16 2.115 14.885 1 13.5 1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.875 11.039c0 2.69 2.299 4.904 5.116 4.904 2.817 0 5.134-2.213 5.134-4.904h-2.017c0 1.652-1.387 2.977-3.117 2.977s-3.099-1.325-3.099-2.977z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 11c0 1.099.902 2 2 2 1.099 0 2-.901 2-2H9c0 .558-.442 1-1 1s-1-.442-1-1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2c = memo(SvgDriveOpticalSymbolic);
var drive_optical_symbolic_default = Memo$2c;

const SvgDriveRemovableMediaSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.5 1A2.495 2.495 0 000 3.5v8C0 12.885 1.115 14 2.5 14h11c1.385 0 2.5-1.115 2.5-2.5v-8C16 2.115 14.885 1 13.5 1zm0 9H14v1.5c0 .277-.223.5-.5.5h-11a.499.499 0 01-.5-.5V10z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2d = memo(SvgDriveRemovableMediaSymbolic);
var drive_removable_media_symbolic_default = Memo$2d;

const SvgEditClearAllSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 14h13v1H3z",
    style: {
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.984 1a1 1 0 00-.691.294l-8.5 8.5a1 1 0 000 1.414L2.586 13h6.828l5.793-5.793a1 1 0 000-1.414l-4.5-4.5a1 1 0 00-.723-.292zM6.401 6.9l3.137 3.095s.5.5 0 1L8.56 12H3.398l-1.584-1.5 3.587-3.601c.5-.5 1 0 1 0z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2e = memo(SvgEditClearAllSymbolic);
var edit_clear_all_symbolic_default = Memo$2e;

const SvgEditClearSymbolicRtl = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.006 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M10.006 2a1 1 0 01.707.293l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-.707.293h-8.5s-.334.014-.697-.168C.445 13.65.006 13.083.006 12.5v-9c0-.583.44-1.15.803-1.332.363-.182.697-.168.697-.168zM9 5H7.969a1.04 1.04 0 00-.688.313L6 6.593l-1.312-1.28C4.422 5.082 4.24 5.006 4 5H3v1c0 .286.034.55.25.75l1.281 1.281-1.25 1.25A1.015 1.015 0 003 10v1h1c.265 0 .53-.093.719-.281L6 9.438l1.281 1.28c.188.189.454.282.719.282h1v-1c0-.265-.093-.53-.281-.719l-1.282-1.25L8.72 6.75A.909.909 0 009 6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$2f = memo(SvgEditClearSymbolicRtl);
var edit_clear_symbolic_rtl_default = Memo$2f;

const SvgEditClearSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.006 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 2a1 1 0 00-.707.293l-5 5a1 1 0 000 1.414l5 5A1 1 0 006 14h8.5s.334.014.697-.168c.364-.182.803-.749.803-1.332v-9c0-.583-.44-1.15-.803-1.332C14.834 1.986 14.5 2 14.5 2zm1.006 3h1.03c.256.011.51.129.688.313l1.282 1.28 1.312-1.28c.266-.231.447-.306.688-.313h1v1c0 .286-.035.55-.25.75l-1.282 1.281 1.25 1.25c.189.188.282.454.282.719v1h-1c-.266 0-.531-.093-.72-.281l-1.28-1.281-1.282 1.28a1.014 1.014 0 01-.718.282h-1v-1c0-.265.093-.53.28-.719l1.282-1.25L7.287 6.75A.909.909 0 017.006 6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$2g = memo(SvgEditClearSymbolic);
var edit_clear_symbolic_default = Memo$2g;

const SvgEditCopySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.994 15h5l2-2V7h-7z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.994 10h4V6h3V2H2z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2h = memo(SvgEditCopySymbolic);
var edit_copy_symbolic_default = Memo$2h;

const SvgEditCutSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.5 2.007a2.5 2.5 0 000 5c.446 0 .856-.14 1.218-.344l1.97 1.844-1.97 1.843a2.473 2.473 0 00-1.218-.343 2.5 2.5 0 102.5 2.5c0-.23-.036-.446-.094-.657L9.03 9.788l4.469 4.219H15v-1L6.906 5.163A2.46 2.46 0 007 4.507a2.5 2.5 0 00-2.5-2.5zm0 1.5a1 1 0 110 2 1 1 0 010-2zm9-.5L9.562 6.725l1.313 1.282 4.125-4v-1zm-9 8.5a1 1 0 110 2 1 1 0 010-2z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2i = memo(SvgEditCutSymbolic);
var edit_cut_symbolic_default = Memo$2i;

const SvgEditDeleteSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1.031A6.963 6.963 0 001.031 8 6.963 6.963 0 008 14.969 6.963 6.963 0 0014.969 8 6.963 6.963 0 008 1.031zM5 5h1.031c.255.011.51.129.688.313L8 6.593l1.312-1.28c.266-.231.447-.306.688-.313h1v1c0 .286-.034.55-.25.75L9.469 8.031l1.25 1.25c.188.188.281.454.281.719v1h-1c-.265 0-.53-.093-.719-.281L8 9.438l-1.281 1.28A1.015 1.015 0 016 11H5v-1c0-.265.093-.53.281-.719l1.281-1.25-1.28-1.281A.909.909 0 015 6z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Andale Mono'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Andale Mono",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2j = memo(SvgEditDeleteSymbolic);
var edit_delete_symbolic_default = Memo$2j;

const SvgEditFindReplaceSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.5 0C2.475 0 0 2.478 0 5.5c0 1.999 1.09 3.75 2.7 4.71l1.363-1.523A3.468 3.468 0 012 5.5C2 3.559 3.556 2 5.5 2a3.48 3.48 0 013.156 1.969L10.125 2.5A5.54 5.54 0 005.5 0zm4.906 8.969L9 10.375l3.281 3.313c.368.376 1.046.384 1.422.015.377-.368.384-1.045.016-1.422z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.002 11L12 2c1 0 2 1 2 2l-9 9H3z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M13 1c1 0 2 1 2 2l1-1c0-1-.752-2-2-2z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2k = memo(SvgEditFindReplaceSymbolic);
var edit_find_replace_symbolic_default = Memo$2k;

const SvgEditFindSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.508 1C3.48 1 1.002 3.474 1.002 6.5S3.48 12 6.508 12s5.505-2.474 5.505-5.5S9.536 1 6.508 1zm0 2a3.488 3.488 0 013.505 3.5c0 1.944-1.557 3.5-3.505 3.5a3.488 3.488 0 01-3.506-3.5c0-1.944 1.557-3.5 3.506-3.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 8.99a1 1 0 00-.696 1.717l4.004 4a1 1 0 101.414-1.414l-4.003-4a1 1 0 00-.72-.303z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2l = memo(SvgEditFindSymbolic);
var edit_find_symbolic_default = Memo$2l;

const SvgEditPasteSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.002",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.031 5.031V12h5l1.991-1.987L11 5.031H4.031zM5.53 0h4.002a.53.53 0 01.53.53v2.94a.53.53 0 01-.53.53H5.53A.53.53 0 015 3.47V.53A.53.53 0 015.53 0z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.5 1c-.293 0-.658.038-1.012.314-.353.277-.52.767-.52 1.124v12.03c0 .385.132.804.442 1.114.31.31.78.453 1.19.412L2.5 16h9.969c.363 0 .746-.122 1.049-.4.302-.279.482-.717.482-1.131V2.375c0-.333-.133-.74-.42-1.01A1.4 1.4 0 0012.625 1h-1.656v2H12v11H2.969V3h.968V1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2m = memo(SvgEditPasteSymbolic);
var edit_paste_symbolic_default = Memo$2m;

const SvgEditRedoSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.5 6A3.515 3.515 0 002 9.5C2 11.421 3.58 13 5.5 13H6v-2h-.5C4.66 11 4 10.34 4 9.5S4.66 8 5.5 8H12V6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#474747"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 3v1c0 .257.13.528.313.719L11.593 7l-2.28 2.281C9.13 9.471 9 9.743 9 10v1h1c.31 0 .552-.09.75-.281L14.406 7 10.75 3.281C10.552 3.091 10.31 3 10 3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2n = memo(SvgEditRedoSymbolic);
var edit_redo_symbolic_default = Memo$2n;

const SvgEditSelectAllSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 15.974",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M1 1h1v1H1zm2 0h1v1H3zm2 0h1v1H5zm2 0h1v1H7zm2 0h1v1H9zm2 0h1v1h-1zm2 0h1v1h-1zm0 2h1v1h-1zm0 2h1v1h-1zm0 2h1v1h-1zm0 2h1v1h-1zm0 2h1v1h-1zm0 2h1v1h-1zm-2 0h1v1h-1zm-2 0h1v1H9zm-2 0h1v1H7zm-2 0h1v1H5zm-2 0h1v1H3zm-2 0h1v1H1zm0-2h1v1H1zm0-2h1v1H1zm0-2h1v1H1zm0-2h1v1H1zm0-2h1v1H1zm2 5.104h4v4H3zm5 0h4v4H8zM3 3h9v4H3z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2o = memo(SvgEditSelectAllSymbolic);
var edit_select_all_symbolic_default = Memo$2o;

const SvgEditSelectSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12.293 5.293L9.586 8l2.707 2.707 1.414-1.414L12.414 8l1.293-1.293z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M13 10h1v1h-1zm0-5h1v1h-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M13 5c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm0 4c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.707 5.293L2.293 6.707 3.586 8 2.293 9.293l1.414 1.414L6.414 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 10H2v1h1zm0-5H2v1h1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 5c-.554 0-1 .446-1 1s.446 1 1 1 1-.446 1-1-.446-1-1-1zm0 4c-.554 0-1 .446-1 1s.446 1 1 1 1-.446 1-1-.446-1-1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2p = memo(SvgEditSelectSymbolic);
var edit_select_symbolic_default = Memo$2p;

const SvgEditUndoSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 6v2h6.5c.84 0 1.5.66 1.5 1.5s-.66 1.5-1.5 1.5H10v2h.5c1.921 0 3.5-1.579 3.5-3.5S12.421 6 10.5 6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#474747"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 3.022v1c0 .257-.13.529-.313.719l-2.28 2.281 2.28 2.281c.183.19.313.462.313.72v1H6c-.31 0-.552-.091-.75-.282L1.594 7.022 5.25 3.303c.198-.19.44-.28.75-.28z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2q = memo(SvgEditUndoSymbolic);
var edit_undo_symbolic_default = Memo$2q;

const SvgEmblemDefaultSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 107 7c0-.741-.118-1.452-.331-2.122l-7.166 7.166-4.5-4.5 2-2 2.5 2.5 5.707-5.707A6.973 6.973 0 008 1z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$2r = memo(SvgEmblemDefaultSymbolic);
var emblem_default_symbolic_default = Memo$2r;

const SvgEmblemDocumentsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 3v2h1v9H6v2h7s.459.014.947-.23C14.436 15.525 15 14.833 15 14V5s.014-.459-.23-.947C14.525 3.564 13.834 3 13 3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 14a2 2 0 002 2v-2zM3.5 3h4a.499.499 0 110 1h-4a.499.499 0 110-1zm0 4h4a.499.499 0 110 1h-4a.499.499 0 110-1zm0-2h3a.499.499 0 110 1h-3a.499.499 0 110-1zm0 4h3a.499.499 0 110 1h-3a.499.499 0 110-1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.5 0C.686 0 0 .686 0 1.5v10c0 .814.686 1.5 1.5 1.5h8c.814 0 1.5-.686 1.5-1.5v-10C11 .686 10.314 0 9.5 0zM2 2h7v9H2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2s = memo(SvgEmblemDocumentsSymbolic);
var emblem_documents_symbolic_default = Memo$2s;

const SvgEmblemFavoriteSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M15 5.766a3.763 3.763 0 00-3.77-3.757c-1.37 0-2.57.73-3.23 1.822a3.77 3.77 0 00-3.23-1.822A3.763 3.763 0 001 5.766a3.74 3.74 0 001.19 2.738h-.001L7.914 14l5.898-5.496h-.002A3.739 3.739 0 0015 5.766",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2t = memo(SvgEmblemFavoriteSymbolic);
var emblem_favorite_symbolic_default = Memo$2t;

const SvgEmblemImportantSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zm-.094 1.969A1 1 0 019 4v5a1 1 0 11-2 0V4a1 1 0 01.781-1 1 1 0 01.125-.031zM8 11a1 1 0 110 2 1 1 0 010-2z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2u = memo(SvgEmblemImportantSymbolic);
var emblem_important_symbolic_default = Memo$2u;

const SvgEmblemMusicSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 8A3.515 3.515 0 000 11.5C0 13.421 1.58 15 3.5 15 5.423 15 7 13.421 7 11.5S5.423 8 3.5 8zm0 2c.841 0 1.5.66 1.5 1.5S4.342 13 3.5 13c-.84 0-1.5-.66-1.5-1.5S2.66 10 3.5 10zm8-2A3.515 3.515 0 008 11.5c0 1.921 1.58 3.5 3.5 3.5 1.922 0 3.5-1.579 3.5-3.5S13.423 8 11.5 8zm0 2c.841 0 1.5.66 1.5 1.5s-.659 1.5-1.5 1.5c-.84 0-1.5-.66-1.5-1.5s.66-1.5 1.5-1.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 2h2v9.516H5zm8 0h2v9.563h-2z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 2h10v2H5z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2v = memo(SvgEmblemMusicSymbolic);
var emblem_music_symbolic_default = Memo$2v;

const SvgEmblemOkSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M13.5 5l-1-1-5 5L5 6.5l-2 2L7.5 13l7-7z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$2w = memo(SvgEmblemOkSymbolic);
var emblem_ok_symbolic_default = Memo$2w;

const SvgEmblemPhotosSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M13 5v2h1v5H4v2h12V5z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M0 2v9h12V2zm2 2h8v5H2z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 7c2.32 1 3.045-1.66 6 0v1H3z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$2x = memo(SvgEmblemPhotosSymbolic);
var emblem_photos_symbolic_default = Memo$2x;

const SvgEmblemSharedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.969 7.969A2.969 2.969 0 013 10.937 2.969 2.969 0 01.031 7.97 2.969 2.969 0 013.001 5a2.969 2.969 0 012.968 2.969zm9.969 5a2.969 2.969 0 01-2.97 2.969A2.969 2.969 0 0110 12.967 2.969 2.969 0 0112.969 10a2.969 2.969 0 012.969 2.969zm0-10a2.969 2.969 0 01-2.97 2.969A2.969 2.969 0 0110 2.967 2.969 2.969 0 0112.969 0a2.969 2.969 0 012.969 2.969z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.614 2.146L.747 7.924l11.855 5.969.899-1.788-8.248-4.15 8.236-4.012z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2y = memo(SvgEmblemSharedSymbolic);
var emblem_shared_symbolic_default = Memo$2y;

const SvgEmblemSynchronizingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fontFamily: "Sans",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M14.902 2a1.047 1.047 0 00-.125.032c-.447.1-.793.542-.782 1v1.687C14 6.032 14 6.032 12.433 6.032h-1.438c-.523 0-1 .476-1 1a1 1 0 000 .218v.782h6v-5a.979.979 0 000-.188v-.812h-.812A1.002 1.002 0 0014.902 2zM.005 8v5a.979.979 0 000 .188V14h.812a.99.99 0 00.281.031c.043-.008.084-.018.125-.031.447-.1.793-.542.782-1v-1.688C2 10 2 10 3.567 10h1.438c.523 0 1-.476 1-1a1 1 0 000-.219V8z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 1C4.847 1 2.18 3.126 1.312 6h2.094A5.013 5.013 0 018 3a5.013 5.013 0 014.594 3h2.094C13.819 3.126 11.152 1 8 1zm-6.688 9c.869 2.874 3.535 5 6.688 5 3.153 0 5.82-2.126 6.688-5h-2.094A5.013 5.013 0 018 13a5.013 5.013 0 01-4.594-3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2z = memo(SvgEmblemSynchronizingSymbolic);
var emblem_synchronizing_symbolic_default = Memo$2z;

const SvgEmblemSystemSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1c-.22 0-.44.011-.656.031l-.406 2.094a5.012 5.012 0 00-.969.312L4.438 1.97c-.389.23-.727.514-1.063.812l.906 1.906a5.057 5.057 0 00-.593.813L1.594 5.22a6.91 6.91 0 00-.406 1.28l1.843 1a4.826 4.826 0 00-.03.5c0 .173.013.332.03.5l-1.843 1c.097.445.228.872.406 1.281l2.094-.281c.17.29.371.563.593.812l-.906 1.907c.336.298.674.582 1.063.812l1.531-1.469c.306.137.634.24.969.313l.406 2.094a7.118 7.118 0 001.312 0l.407-2.094c.334-.073.663-.176.968-.313l1.532 1.47c.388-.23.727-.515 1.062-.813l-.906-1.907a5.11 5.11 0 00.594-.812l2.093.281a6.91 6.91 0 00.407-1.281l-1.844-1c.017-.168.031-.327.031-.5s-.014-.332-.031-.5l1.844-1a6.908 6.908 0 00-.407-1.281l-2.093.281a5.057 5.057 0 00-.594-.813l.906-1.906c-.335-.298-.674-.582-1.062-.812L10.03 3.437a5.015 5.015 0 00-.968-.312l-.407-2.094A7.118 7.118 0 008 1zm0 4a3 3 0 110 6 3 3 0 010-6z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2A = memo(SvgEmblemSystemSymbolic);
var emblem_system_symbolic_default = Memo$2A;

const SvgEmblemVideosSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 4h8c.554 0 1 .446 1 1v7c0 .554-.446 1-1 1H6c-.554 0-1-.446-1-1V5c0-.554.446-1 1-1zM5 8.47L1.53 5H1v7h.5z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    fill: "#474747",
    color: "#bebebe"
  })));
  return render(rest, ...restArgs);
};
const Memo$2B = memo(SvgEmblemVideosSymbolic);
var emblem_videos_symbolic_default = Memo$2B;

const SvgEmojiActivitiesSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 0C3.594 0 0 3.594 0 8c0 4.406 3.594 8 8 8 4.406 0 8-3.594 8-8 0-4.406-3.594-8-8-8zm0 2c.038 0 .075.005.113.006A4.993 4.993 0 009.541 6.61a4.999 4.999 0 004.453 1.283c0 .036.006.07.006.107 0 3.326-2.674 6-6 6-.039 0-.076-.005-.115-.006a4.992 4.992 0 00-1.281-4.46 4.994 4.994 0 00-3.35-1.528 4.992 4.992 0 00-1.248.1C2.006 8.07 2 8.036 2 8c0-3.326 2.674-6 6-6zm1.113.105a5.977 5.977 0 014.782 4.786 3.99 3.99 0 01-3.663-1.002 3.987 3.987 0 01-1.119-3.784zM3.205 9.004a3.99 3.99 0 013.684 4.89 5.976 5.976 0 01-4.784-4.789c.364-.083.734-.12 1.1-.101z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$2C = memo(SvgEmojiActivitiesSymbolic);
var emoji_activities_symbolic_default = Memo$2C;

const SvgEmojiBodySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M1 7v8h11c.439 0 .875-.375 1-1l1-5.969V6c0-.535-.406-1-1-1H9.1l.9-3.5C10.225.66 9.566 0 9 0H8L3.959 7z",
    style: {
      marker: "none"
    },
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$2D = memo(SvgEmojiBodySymbolic);
var emoji_body_symbolic_default = Memo$2D;

const SvgEmojiFlagsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.003 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436",
    fillRule: "evenodd"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.003 1v14h2V1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.003 1a1 1 0 00-1 1v6a1 1 0 001 1h3.383l.722 1.447a1 1 0 00.895.553h5a1 1 0 001-1V4a1 1 0 00-1-1H9.62l-.722-1.447A1 1 0 008.003 1zm1 2h3.383l.722 1.447A1 1 0 009.003 5h3v4H8.62l-.722-1.447A1 1 0 007.003 7h-3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.003 8h4l1 2h5V4h-4l-1-2h-5z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2E = memo(SvgEmojiFlagsSymbolic);
var emoji_flags_symbolic_default = Memo$2E;

const SvgEmojiFoodSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.001 16.014",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M.984 0A1 1 0 000 1.015v4s.007.844.574 1.6C1.022 7.21 1.832 7.734 3 7.928v1.086a1 1 0 00-1 1v5a1 1 0 001 1h2a1 1 0 001-1v-5a1 1 0 00-1-1V7.928c1.168-.195 1.978-.717 2.426-1.314.567-.756.574-1.6.574-1.6v-4a1 1 0 10-2 0v3.5a.5.5 0 01-1 0v-3.5A1 1 0 003.984.001 1 1 0 003 1.014v3.5a.5.5 0 01-1 0v-3.5A1 1 0 00.984.001zM13.97.014a1.002 1.002 0 00-.677.293c-1.736 1.736-2.503 4.161-2.898 6.137C10 8.419 10 10.014 10 10.014a1 1 0 001 1h1v4a1 1 0 001 1h1a1 1 0 001-1v-14a1 1 0 00-1.03-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible",
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$2F = memo(SvgEmojiFoodSymbolic);
var emoji_food_symbolic_default = Memo$2F;

const SvgEmojiNatureSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.003 1s-3 0-3 3v5s.044 1.419.028 2c0 1-.537 1.413-1.404 2.121-.627.49-.774 1.31-.307 1.697.43.356 1.162.304 1.66-.343L4 13c.698-1.014.983-1.876 1-3l.003-6C5.003 3 6 3 6 3v6.574L9.003 6.5V4c0-1 .997-1 .997-1l.003 2.5L12 3.465c.338-.312.503-.465 1-.465l.003 1L9 8h4s.003 1-1 1H8l-2 2c0 .426 0 2.006 2 2.006L12.003 13s3 0 2.997-2.99V1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$2G = memo(SvgEmojiNatureSymbolic);
var emoji_nature_symbolic_default = Memo$2G;

const SvgEmojiObjectsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.995 0a6.01 6.01 0 00-5.87 4.777c-.529 2.534.689 5.036 2.872 6.327l.002.898A1 1 0 006 13h4a1 1 0 001-.998l.002-.9c2.183-1.293 3.4-3.797 2.87-6.33A6.009 6.009 0 007.996 0zm0 2c1.9 0 3.53 1.322 3.918 3.182a3.99 3.99 0 01-2.312 4.484 1 1 0 00-.6.914V11H6.997v-.418a1 1 0 00-.6-.914 3.993 3.993 0 01-2.316-4.484A3.99 3.99 0 017.995 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 15c0 .554.446 1 1 1h2c.554 0 1-.446 1-1v-1H6z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.992 5.994a.5.5 0 00-.348.86l1 1a.5.5 0 00.707 0l1-1a.5.5 0 10-.707-.708l-.647.647-.646-.647a.5.5 0 00-.36-.152z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.35,
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2H = memo(SvgEmojiObjectsSymbolic);
var emoji_objects_symbolic_default = Memo$2H;

const SvgEmojiPeopleSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.558 0 1.031.473 1.031 1.031V7c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.969C5 5.473 5.442 5 6 5zm4 0c.558 0 1 .473 1 1.031V7c0 .558-.442 1-1 1s-1-.442-1-1v-.969C9 5.473 9.442 5 10 5zM3 9.031c2 1.304 7.987 1.304 10.031 0l-.03.531c-.037.43-1 3.376-5 3.407-4 .031-5-2.78-5-3.313z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$2I = memo(SvgEmojiPeopleSymbolic);
var emoji_people_symbolic_default = Memo$2I;

const SvgEmojiRecentSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747",
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.487.02A7.492 7.492 0 001 7.507a7.492 7.492 0 007.487 7.486 7.492 7.492 0 007.486-7.486A7.492 7.492 0 008.487.02zm0 1.973A5.508 5.508 0 0114 7.507a5.508 5.508 0 01-5.513 5.513 5.508 5.508 0 01-5.514-5.513 5.508 5.508 0 015.514-5.514z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.393 4.007a.5.5 0 00-.25.156L8.487 6.819 6.83 5.163a.5.5 0 10-.687.687l2 2a.5.5 0 00.687 0l3-3a.5.5 0 00-.437-.843z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2J = memo(SvgEmojiRecentSymbolic);
var emoji_recent_symbolic_default = Memo$2J;

const SvgEmojiSymbolsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    d: "M5.207 1.294a1 1 0 00-1.414 0l-2.5 2.5a1 1 0 000 1.414l2.5 2.5a1 1 0 001.414 0l2.5-2.5a1 1 0 000-1.415z",
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 12a3 3 0 01-3 3 3 3 0 01-3-3 3 3 0 013-3 3 3 0 013 3z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.945 2.002a1 1 0 00-.81.496l-2.32 4A1 1 0 009.678 8h4.644a1 1 0 00.864-1.502l-2.32-4a1 1 0 00-.92-.496z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2K = memo(SvgEmojiSymbolsSymbolic);
var emoji_symbols_symbolic_default = Memo$2K;

const SvgEmojiTravelSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.003 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.003 1a1 1 0 00-.97.758l-1 4a1 1 0 00-.03.242v.04c-.564.094-1 .561-1 1.153v4.614c0 .592.436 1.059 1 1.154V14.5c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5V13h8v1.5c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5v-1.54c.564-.094 1-.561 1-1.153V7.193c0-.592-.436-1.059-1-1.154V6a1 1 0 00-.03-.242l-1-4a1 1 0 00-.97-.758zm.781 2h8.438l.75 3H3.034zm-.281 5a1.5 1.5 0 011.5 1.5 1.5 1.5 0 01-1.5 1.5 1.5 1.5 0 01-1.5-1.5 1.5 1.5 0 011.5-1.5zm9 0a1.5 1.5 0 011.5 1.5 1.5 1.5 0 01-1.5 1.5 1.5 1.5 0 01-1.5-1.5 1.5 1.5 0 011.5-1.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$2L = memo(SvgEmojiTravelSymbolic);
var emoji_travel_symbolic_default = Memo$2L;

const SvgEmoteLoveSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M15 5.766a3.763 3.763 0 00-3.77-3.757c-1.37 0-2.57.73-3.23 1.822a3.77 3.77 0 00-3.23-1.822A3.763 3.763 0 001 5.766a3.74 3.74 0 001.19 2.738h-.001L7.914 14l5.898-5.496h-.002A3.739 3.739 0 0015 5.766",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2M = memo(SvgEmoteLoveSymbolic);
var emote_love_symbolic_default = Memo$2M;

const SvgErrorCorrectSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.01.014S4.302 0 3.563.37C2.825.739 2.01 1.68 2.01 3.014v3h2v-3c0-.666.186-.724.448-.855.261-.13.552-.145.552-.145h5v-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.717 4.307L.303 5.721 3.01 8.428l2.707-2.707-1.414-1.414L3.01 5.6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.01 5.014v-1h1v1zm-5 0v-1h1v1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M.01 5.014c0-.554.446-1 1-1s1 .446 1 1-.446 1-1 1-1-.446-1-1zm4 0c0-.554.446-1 1-1s1 .446 1 1-.446 1-1 1-1-.446-1-1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.01 11.014l6.518-6.572 3 3-6.518 6.572h-3z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.637 1.676c-.2 0-.4.077-.554.23l-1.77 1.768 3.053 3.053 1.77-1.77a.783.783 0 000-1.109l-1.944-1.941a.782.782 0 00-.555-.23z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2N = memo(SvgErrorCorrectSymbolic);
var error_correct_symbolic_default = Memo$2N;

const SvgEyeNotLookingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M13.98 1.99a1 1 0 0 0-.687.303l-.984.984A8 8 0 0 0 8 2 8 8 0 0 0 .262 8.01a8 8 0 0 0 2.943 4.37l-.912.913a1 1 0 1 0 1.414 1.414l11-11a1 1 0 0 0-.727-1.717zM8 4a4 4 0 0 1 2.611.974l-1.42 1.42A2 2 0 0 0 8 6a2 2 0 0 0-2 2 2 2 0 0 0 .396 1.19l-1.42 1.42A4 4 0 0 1 4 8a4 4 0 0 1 4-4zm7.03 2.209l-3.344 3.343a4 4 0 0 1-2.127 2.127l-2.28 2.28a8 8 0 0 0 .721.04 8 8 0 0 0 7.738-6.01 8 8 0 0 0-.709-1.78zm-7.53.79a.5.5 0 0 1 .5.5.5.5 0 0 1-.5.5.5.5 0 0 1-.5-.5.5.5 0 0 1 .5-.5z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$2O = memo(SvgEyeNotLookingSymbolic);
var eye_not_looking_symbolic_default = Memo$2O;

const SvgEyeOpenNegativeFilledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    id: "svg7384",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title9167"
  }, "Gnome Symbolic Icon Theme"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }, /* @__PURE__ */ createElement("linearGradient", {
    id: "linearGradient7212"
  }, /* @__PURE__ */ createElement("stop", {
    style: {
      stopColor: "#000000",
      stopOpacity: 1
    },
    offset: 0,
    id: "stop7214"
  }))), /* @__PURE__ */ createElement("g", {
    transform: "translate(-341.0002,-13.000323)",
    style: {
      display: "inline"
    },
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-100,-380.00032)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-100,-380.00032)",
    style: {
      display: "inline"
    },
    id: "layer10"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 108,382 a 8,8 0 0 0 -7.73828,6.00977 A 8,8 0 0 0 108,394 8,8 0 0 0 115.73828,387.99023 8,8 0 0 0 108,382 Z m 0,2 a 4,4 0 0 1 4,4 4,4 0 0 1 -4,4 4,4 0 0 1 -4,-4 4,4 0 0 1 4,-4 z",
    id: "path2314",
    style: {
      opacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 1.5,
      strokeLinecap: "butt",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      markerStart: "none",
      markerMid: "none",
      markerEnd: "none",
      paintOrder: "normal"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path2318",
    d: "m 110,388.00003 a 2,2 0 0 1 -2,2 2,2 0 0 1 -2,-2 2,2 0 0 1 2,-2 2,2 0 0 1 2,2 z",
    style: {
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 1,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeOpacity: 1
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-100,-380.00032)",
    id: "g6387"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-100,-380.00032)",
    id: "layer11"
  })));
  return render(rest, ...restArgs);
};
const Memo$2P = memo(SvgEyeOpenNegativeFilledSymbolic);
var eye_open_negative_filled_symbolic_default = Memo$2P;

const SvgFaceAngelSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.188 4.094A6.937 6.937 0 001 8a7 7 0 0014 0c0-1.45-.433-2.789-1.188-3.906a4.48 4.48 0 01-.624.343c-.85.395-1.855.563-2.938.563h-4.5c-1.083 0-2.087-.168-2.938-.563a4.443 4.443 0 01-.624-.343zM6 6c.558 0 1.031.473 1.031 1.031V8c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.969C5 6.473 5.442 6 6 6zm4 0c.558 0 1 .473 1 1.031V8c0 .558-.442 1-1 1s-1-.442-1-1v-.969C9 6.473 9.442 6 10 6zM3 9.063C3.715 10.136 5.235 11 8 11c2.452 0 4.21-.75 5-1.938v.5c0 .681-.838 2.407-5 2.407-3.88 0-5-1.874-5-2.406z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.736 0c-.958 0-1.826.172-2.5.484C2.563.796 2 1.295 2 2s.563 1.204 1.236 1.516c.674.312 1.542.484 2.5.484h4.528c.958 0 1.826-.172 2.5-.484C13.437 3.204 14 2.705 14 2S13.437.796 12.764.484C12.09.172 11.222 0 10.264 0zm0 1h4.528c.834 0 1.583.162 2.08.393.496.23.656.481.656.607s-.16.377-.656.607c-.497.23-1.246.393-2.08.393H5.736c-.834 0-1.583-.162-2.08-.393C3.16 2.377 3 2.126 3 2s.16-.377.656-.607C4.153 1.163 4.902 1 5.736 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2Q = memo(SvgFaceAngelSymbolic);
var face_angel_symbolic_default = Memo$2Q;

const SvgFaceAngrySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM4 5.125s.474.839 1.25.844H7V7c0 .556-.667 1-1.5 1S4 7.556 4 7zm8 0V7c0 .556-.667 1-1.5 1S9 7.556 9 7V5.969h1.719C11.495 5.964 12 5.125 12 5.125zM8.031 9c3.256 0 3 .384 3 .762v.266H5V9.74C5 9.39 4.775 9 8.031 9z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2R = memo(SvgFaceAngrySymbolic);
var face_angry_symbolic_default = Memo$2R;

const SvgFaceConfusedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.558 0 1.031.473 1.031 1.031V7c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.97C5 5.473 5.442 5 6 5zm4 0c.558 0 1 .473 1 1.031V7c0 .558-.442 1-1 1s-1-.442-1-1v-.97C9 5.473 9.442 5 10 5zM4.594 8.812c.064-.009-.28.014-.213.032 4.481-.032 1.45 2.581 6.588 2.643a.506.506 0 01.343.625.474.474 0 01-.593.344C5.77 12.442 7.812 9.75 4.53 9.812a.506.506 0 01-.344-.625.5.5 0 01.407-.375z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2S = memo(SvgFaceConfusedSymbolic);
var face_confused_symbolic_default = Memo$2S;

const SvgFaceCoolSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM2.22 5.031c3.913-.037 7.972 0 11.562 0 0 1.642-1.25 2.969-2.78 2.969-1.276 0-2.333-.93-2.657-2.188h-.688C7.333 7.07 6.276 8 5 8 3.47 8 2.22 6.673 2.22 5.031zM3 9.063C3.716 10.136 5.235 11 8 11c2.452 0 4.211-.75 5-1.938v.5c0 .681-.838 2.407-5 2.407-3.88 0-5-1.874-5-2.406z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2T = memo(SvgFaceCoolSymbolic);
var face_cool_symbolic_default = Memo$2T;

const SvgFaceCryingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.558 0 1.031.41 1.031.875v.781c0 .466-.473.844-1.031.844-.558 0-1-.378-1-.844v-.781C5 5.41 5.442 5 6 5zm4 0c.558 0 1 .378 1 .844v.812c0 .466-.442.844-1 .844s-1-.378-1-.844v-.812C9 5.378 9.442 5 10 5zm1.75 2.281c1.208.449 2.046.937 2.219 1.563a.993.993 0 01-.938 1.25c-.519.007-.768-.216-.937-.875-.167-.66.083-1.293-.344-1.938zM7.969 9.97c2.588 0 3.969.98 3.969 1.562v.531c-.793-.696-3.187-1-3.97-1-.781 0-3.018-.058-3.968 1v-.53c0-.745 1.38-1.563 3.969-1.563z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2U = memo(SvgFaceCryingSymbolic);
var face_crying_symbolic_default = Memo$2U;

const SvgFaceDevilishSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a6.992 6.992 0 00-4.375 1.531C2.491 2.087 1.532 1.582.937 1.062l-.093.594C.81 1.927.947 3.17 2 4.406A6.952 6.952 0 001 8a7 7 0 0014 0c0-1.29-.36-2.493-.969-3.531 1.011-1.218 1.19-2.39 1.157-2.657l-.094-.593c-.579.506-1.499.97-2.594 1.406-.006-.005-.026.005-.031 0A6.925 6.925 0 008 1zM6 5c.558 0 1.031.473 1.031 1.031V7c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.969C5 5.473 5.442 5 6 5zm4 0c.558 0 1 .473 1 1.031V7c0 .558-.442 1-1 1s-1-.442-1-1v-.969C9 5.473 9.442 5 10 5zm2 4.978c-.03.344-.925 3.003-4 3.01-2.789.006-4-2.559-4-2.985z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2V = memo(SvgFaceDevilishSymbolic);
var face_devilish_symbolic_default = Memo$2V;

const SvgFaceEmbarrassedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM5.531 6.177C6.266 6.177 7 6.623 7 7.489c-1.5-.338-3.125 1.733-3 0 .063-.866.797-1.312 1.531-1.312zm4.938 0c.734 0 1.469.446 1.531 1.312.125 1.733-1.5-.338-3 0 0-.866.734-1.312 1.469-1.312zm-6 2.558a.75.75 0 110 1.5.75.75 0 110-1.5zm7.017 0a.75.75 0 110 1.5.75.75 0 110-1.5zm-4.09 2.262h1.172c.206 0 .547.223.547.5s-.34.516-.547.516H7.396c-.206 0-.484-.239-.484-.516s.278-.5.484-.5z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2W = memo(SvgFaceEmbarrassedSymbolic);
var face_embarrassed_symbolic_default = Memo$2W;

const SvgFaceGlassesSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a6.986 6.986 0 00-6.313 4H4.25a2 2 0 011.719-.969c.566 0 1.072.244 1.437.625.2-.132.413-.156.563-.156.165 0 .394.022.593.156A1.985 1.985 0 0110 4.031 2 2 0 0111.719 5h2.594A6.986 6.986 0 008 1zM5.969 5.031c-.563 0-1 .438-1 1V7c0 .563.437 1 1 1 .562 0 1-.437 1-1v-.969c0-.562-.438-1-1-1zm4.031 0c-.563 0-1 .438-1 1V7c0 .563.437 1 1 1s1-.437 1-1v-.969c0-.562-.437-1-1-1zm-2.031.782c0 .009-.032.021-.031.03.006.063.03.124.03.188V7c0 1.1-.9 2-2 2-1.099 0-2-.9-2-2V6H1.282A7.072 7.072 0 001 8a7 7 0 0014 0 7.07 7.07 0 00-.281-2H12v1c0 1.1-.9 2-2 2s-2-.9-2-2v-.969c0-.042-.003-.083 0-.125a.651.651 0 010-.062.51.51 0 01-.031-.031zM3 10.063c.997.636 4.016.937 5 .937s3.805.03 5-.938v.5c0 .681-1.744 1.407-5 1.407-3.256 0-5-.874-5-1.406z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2X = memo(SvgFaceGlassesSymbolic);
var face_glasses_symbolic_default = Memo$2X;

const SvgFaceKissSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM5.531 5C6.266 5 7 5.225 7 6.092c-2.56-.604-2.418 1.688-3 .22C3.68 5.505 4.797 5 5.531 5zm4.938 0c.734 0 1.704.461 1.531 1.313-.317 1.556-.528-.958-3-.221C9 5.225 9.734 5 10.469 5zM7 8c.41-.01.75.134 1.031.344.282-.21.652-.357 1.063-.344.631.02.906.76.906 1.187 0 .775.475.766 1 .829-.634.15-.987 1.224-.984 1.765.005.972-.93 1.256-2.016 1.25-1.085-.004-1.987-.251-1.984-1.234 0-.408-.353-1.59-1.032-1.766.68-.093 1.016-.25 1.016-.86 0-.808.529-1.16 1-1.171z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 10.274c-.17.08-.32.16-.322.272-.018.27-.374.481-.672.48-.298-.001-.594-.21-.594-.48 0-.112-.111-.19-.272-.272.53-.395 1.253-.338 1.86 0z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2Y = memo(SvgFaceKissSymbolic);
var face_kiss_symbolic_default = Memo$2Y;

const SvgFaceLaughSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM5.531 4.719C6.266 4.719 7 5.165 7 6.03c-1.5-.338-3.125 1.733-3 0 .063-.866.797-1.312 1.531-1.312zm4.938 0c.734 0 1.469.446 1.531 1.312.125 1.733-1.5-.338-3 0 0-.866.734-1.312 1.469-1.312zM3 9.03c2 1.304 7.987 1.304 10.031 0l-.03.531c-.037.43-1 3.376-5 3.407-4 .031-5-2.78-5-3.313V9.03z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2Z = memo(SvgFaceLaughSymbolic);
var face_laugh_symbolic_default = Memo$2Z;

const SvgFaceMonkeySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.844.031C6.617.765 6.78 1.664 6.938 2.062c-1.808.269-3.55 1.312-4.125 3.188-.284-.212-.588-.344-.938-.344C.841 4.906 0 5.99 0 7.281c0 1.293.841 2.344 1.875 2.344.467 0 .886-.212 1.219-.563 2.719-1.273 7.092-1.466 9.875.032.32.322.71.531 1.156.531C15.159 9.625 16 8.574 16 7.281c0-1.292-.841-2.375-1.875-2.375-.428 0-.811.193-1.125.5-.507-1.702-1.84-2.91-3.812-3.281-.17-.639-.285-1.916 1.625-1.781-2.17-.793-2.72 1.625-2.72 1.625-.265-.118-.965-.639-.25-1.938zM6.469 5.063c.38 0 .719.646.719 1.468 0 .823-.34 1.5-.72 1.5-.38 0-.655-.677-.655-1.5 0-.822.276-1.468.656-1.468zm3 0c.38 0 .719.646.719 1.468 0 .823-.34 1.5-.72 1.5-.38 0-.655-.677-.655-1.5 0-.822.276-1.468.656-1.468zM2 5.968c.256 0 .474.15.656.343a6.09 6.09 0 00.125 1.75c-.191.294-.452.5-.781.5-.572 0-1.031-.566-1.031-1.28 0-.715.46-1.313 1.031-1.313zm12.031 0c.572 0 1.063.597 1.063 1.312 0 .715-.49 1.282-1.063 1.282-.372 0-.659-.262-.843-.626a6.94 6.94 0 000-1.375c.187-.35.484-.593.843-.593z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.969 8.969c-3.88 0-7.031 1.567-7.031 3.5s3.15 3.5 7.03 3.5c3.88 0 7.032-1.567 7.032-3.5s-3.151-3.5-7.031-3.5zM3 11.03s.367 2.031 4.969 2.031c4.386 0 5.094-2 5.094-2S13.023 14.04 7.969 14C2.82 13.96 3 11.031 3 11.031z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$2_ = memo(SvgFaceMonkeySymbolic);
var face_monkey_symbolic_default = Memo$2_;

const SvgFacePlainSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.558 0 1.031.473 1.031 1.031V7c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.969C5 5.473 5.442 5 6 5zm4 0c.558 0 1 .473 1 1.031V7c0 .558-.442 1-1 1s-1-.442-1-1v-.969C9 5.473 9.442 5 10 5zm-6.5 5h9a.499.499 0 110 1h-9a.499.499 0 110-1z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$2$ = memo(SvgFacePlainSymbolic);
var face_plain_symbolic_default = Memo$2$;

const SvgFaceRaspberrySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.558 0 1.031.473 1.031 1.031V7c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.969C5 5.473 5.442 5 6 5zm4 0c.558 0 1 .473 1 1.031V7c0 .558-.442 1-1 1s-1-.442-1-1v-.969C9 5.473 9.442 5 10 5zM3 9.063c.997.636 4.016.937 5 .937.492 0 1.429.015 2.406-.094.978-.108 1.996-.36 2.594-.843v.5c0 .441-.753.919-2.156 1.187l.25.531c.279.604.083 1.276-.438 1.532l-.25.125c-.52.255-1.175-.03-1.469-.625l-.624-1.282c-.018-.034-.02-.035-.032-.062H8c-3.256 0-5-.874-5-1.406v-.5z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$30 = memo(SvgFaceRaspberrySymbolic);
var face_raspberry_symbolic_default = Memo$30;

const SvgFaceSadSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.559 0 1.031.473 1.031 1.031V7c0 .558-.472 1-1.03 1-.56 0-1-.442-1-1v-.969C5 5.473 5.44 5 6 5zm4 0c.559 0 1 .473 1 1.031V7c0 .558-.441 1-1 1-.558 0-1-.442-1-1v-.969C9 5.473 9.442 5 10 5zm3 5.943c-.996-.637-4.016-.917-5-.917-.983 0-3.804-.051-5 .917v-.5c0-.681 1.744-1.404 5-1.404 3.256 0 5 .871 5 1.404z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$31 = memo(SvgFaceSadSymbolic);
var face_sad_symbolic_default = Memo$31;

const SvgFaceShutmouthSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.558 0 1.031.473 1.031 1.031V7c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.969C5 5.473 5.442 5 6 5zm4 0c.558 0 1 .473 1 1.031V7c0 .558-.442 1-1 1s-1-.442-1-1v-.969C9 5.473 9.442 5 10 5zM4 9l4 1 4-1c.083.59-.16 1.054-.671 1.168L10 10.5l1.309.327c.715.192.691.75.691 1.173l-4-1-4 1c-.065-.631.037-.983.52-1.13L6 10.5l-1.504-.335C4.02 10.037 3.916 9.484 4 9z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$32 = memo(SvgFaceShutmouthSymbolic);
var face_shutmouth_symbolic_default = Memo$32;

const SvgFaceSickSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM4.313 4.688a.27.27 0 01.125.03l1.125.657 1.156-.656c.165-.092.34-.021.406.156a.432.432 0 01-.187.5l-.72.406.72.406a.376.376 0 01.156.47c-.069.176-.242.218-.406.124l-1.125-.625-1.157.625c-.165.092-.34.053-.406-.125a.432.432 0 01.188-.5l.687-.406-.687-.375c-.165-.094-.256-.324-.188-.5a.303.303 0 01.313-.188zm5.156 0a.27.27 0 01.125.03l1.125.657 1.156-.656c.165-.092.34-.021.406.156a.432.432 0 01-.187.5l-.719.406.719.406c.164.094.255.293.187.47-.068.176-.273.218-.437.124l-1.125-.656-1.156.656c-.166.092-.34.053-.407-.125a.432.432 0 01.188-.5l.719-.406-.72-.406c-.163-.094-.255-.293-.187-.47a.303.303 0 01.313-.187zM5.125 9.03A2.75 2.75 0 017 9.562c.35.22.413.274 1 .344.16.056.607-.04 1-.344.28-.204.561-.295.844-.374 1.309-.368 2.574.436 3.156 1.25v.5c-.511-.286-1.06-.598-1.625-.782l.469.938c.328.647.132 1.399-.438 1.687-.57.289-1.297-.009-1.625-.656l-.593-1.156c-.051-.101-.068-.209-.094-.313a.594.594 0 01-.094.031c-.541.314-1.56.197-2 0-.917-.437-.909-.667-1.531-.687-.853.019-1.843.399-2.469.937v-.5c.264-.678 1.119-1.316 2.125-1.406z",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$33 = memo(SvgFaceSickSymbolic);
var face_sick_symbolic_default = Memo$33;

const SvgFaceSmileBigSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.558 0 1.031.473 1.031 1.031V7c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.969C5 5.473 5.442 5 6 5zm4 0c.558 0 1 .473 1 1.031V7c0 .558-.442 1-1 1s-1-.442-1-1v-.969C9 5.473 9.442 5 10 5zM3 9.031c2 1.304 7.987 1.304 10.031 0l-.03.531c-.037.43-1 3.376-5 3.407-4 .031-5-2.78-5-3.313z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$34 = memo(SvgFaceSmileBigSymbolic);
var face_smile_big_symbolic_default = Memo$34;

const SvgFaceSmileSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.559 0 1.031.473 1.031 1.031V7c0 .558-.472 1-1.03 1-.56 0-1-.442-1-1v-.969C5 5.473 5.44 5 6 5zm4 0c.559 0 1 .473 1 1.031V7c0 .558-.441 1-1 1-.558 0-1-.442-1-1v-.969C9 5.473 9.442 5 10 5zM3 9.07c.997.637 4.017.917 5 .917.984 0 3.805.051 5-.917v.5c0 .68-1.744 1.404-5 1.404-3.256 0-5-.872-5-1.404z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$35 = memo(SvgFaceSmileSymbolic);
var face_smile_symbolic_default = Memo$35;

const SvgFaceSmirkSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.015 1a7 7 0 100 14 7 7 0 000-14zm-2 4c.559 0 1.032.473 1.032 1.031V7c0 .558-.473 1-1.032 1-.558 0-1-.442-1-1v-.97c0-.558.442-1.031 1-1.031zm4 0c.559 0 1 .473 1 1.031V7c0 .558-.441 1-1 1-.558 0-1-.442-1-1v-.97c0-.558.442-1.031 1-1.031zM3.603 7.719c.78 3.306 4.693 4.432 7.705 3.287.007.598-.195 1.097-1.154 1.286-2.166.426-5.161-.143-6.68-2.594-.666-1.074-.127-1.685.129-1.98z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$36 = memo(SvgFaceSmirkSymbolic);
var face_smirk_symbolic_default = Memo$36;

const SvgFaceSurpriseSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.558 0 1.031.473 1.031 1.031V7c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.969C5 5.473 5.442 5 6 5zm4 0c.558 0 1 .473 1 1.031V7c0 .558-.442 1-1 1s-1-.442-1-1v-.969C9 5.473 9.442 5 10 5zM8 9.594c1.06 0 1.93.92 1.938 2.031 0 1.116-.873 2.031-1.938 2.031s-1.937-.915-1.937-2.031S6.935 9.594 8 9.594z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$37 = memo(SvgFaceSurpriseSymbolic);
var face_surprise_symbolic_default = Memo$37;

const SvgFaceTiredSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6.625 6.75A.29.29 0 017 7a.412.412 0 01-.281.438l-2.782.812c-.181.053-.349-.031-.374-.219a.412.412 0 01.28-.437zm2.625 0c.042-.006.08-.013.125 0l2.781.844a.41.41 0 01.281.437c-.025.188-.193.272-.374.219L9.28 7.437A.412.412 0 019 7a.287.287 0 01.25-.25zM4.406 10h7.188c.221 0 .406.223.406.5s-.185.5-.406.5H4.406C4.185 11 4 10.777 4 10.5s.185-.5.406-.5z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$38 = memo(SvgFaceTiredSymbolic);
var face_tired_symbolic_default = Memo$38;

const SvgFaceUncertainSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.558 0 1.031.473 1.031 1.031V7c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.969C5 5.473 5.442 5 6 5zm4 0c.558 0 1 .473 1 1.031V7c0 .558-.442 1-1 1s-1-.442-1-1v-.969C9 5.473 9.442 5 10 5zM4 9l8 2v1l-8-2z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$39 = memo(SvgFaceUncertainSymbolic);
var face_uncertain_symbolic_default = Memo$39;

const SvgFaceWinkSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.559 0 1.031.473 1.031 1.031V7c0 .558-.472 1-1.03 1-.56 0-1-.442-1-1v-.969C5 5.473 5.44 5 6 5zm3.438 1h.906c.522 0 .969.216.969.5 0 .284-.447.5-.97.5h-.905c-.523 0-.938-.216-.938-.5 0-.284.415-.5.938-.5zM3 9.063C3.716 10.136 5.235 11 8 11c2.452 0 4.211-.75 5-1.938v.5c0 .681-.838 2.407-5 2.407-3.88 0-5-1.874-5-2.406z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3a = memo(SvgFaceWinkSymbolic);
var face_wink_symbolic_default = Memo$3a;

const SvgFaceWorriedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM6 5c.558 0 1.031.473 1.031 1.031V7c0 .558-.473 1-1.031 1-.558 0-1-.442-1-1v-.969C5 5.473 5.442 5 6 5zm4 0c.558 0 1 .473 1 1.031V7c0 .558-.442 1-1 1s-1-.442-1-1v-.969C9 5.473 9.442 5 10 5zm3 5.943c-.766-.428-1.612-.92-2.476-.94-.652.02-1.239.654-1.524.697-.542.314-1.56.196-2 0-.917-.437-.921-.68-1.543-.7-.853.019-1.832.404-2.457.943v-.5c.422-1.086 2.38-2.045 4-.871.35.22.427.267 1.015.337.16.055.592-.034.985-.337 1.582-1.153 3.292-.119 4 .87z",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3b = memo(SvgFaceWorriedSymbolic);
var face_worried_symbolic_default = Memo$3b;

const SvgFaceYawnSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a7 7 0 100 14A7 7 0 008 1zM5.531 4C6.266 4 7 4.446 7 5.313c-1.5-.339-3.125 1.732-3 0C4.063 4.446 4.797 4 5.531 4zm4.938 0c.734 0 1.469.446 1.531 1.313.125 1.732-1.5-.339-3 0C9 4.446 9.734 4 10.469 4zM8 7c1.38 0 2.5 1.343 2.5 3S9.38 13 8 13s-2.5-1.343-2.5-3S6.62 7 8 7z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3c = memo(SvgFaceYawnSymbolic);
var face_yawn_symbolic_default = Memo$3c;

const SvgFindLocationSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 15.974 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M7 0v1.031A6.514 6.514 0 001.063 7H0v1h1.063A6.513 6.513 0 007 13.969V15h1v-1.031c3.188-.234 5.724-2.78 5.969-5.969H15V7h-1.03C13.724 3.811 11.189 1.233 8 1V0zm.531 2.813A4.665 4.665 0 0112.22 7.5a4.665 4.665 0 01-4.688 4.688c-2.606 0-4.75-2.082-4.75-4.688s2.144-4.688 4.75-4.688zM7.501 4a3.5 3.5 0 100 7 3.5 3.5 0 000-7z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3d = memo(SvgFindLocationSymbolic);
var find_location_symbolic_default = Memo$3d;

const SvgFocusLegacySystraySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.002 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.936 2l-7.934.01L0 13.979h9.969l.027-9.918C9.996 2.936 9.06 2 7.936 2zM3.018 5h1c.31 0 .552.09.75.281L7.424 8l-2.656 2.719c-.198.19-.44.281-.75.281h-1v-1c0-.257.13-.528.312-.719L4.611 8l-1.28-1.281c-.184-.19-.313-.462-.313-.719z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      whiteSpace: "normal",
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.986 2.031s1.032.484 1.032 1.969v10h.984V4c0-1.25-2.016-1.969-2.016-1.969zM11.97 2.031s1.032.484 1.032 1.969v10h1V4c0-1.25-2.031-1.969-2.031-1.969z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3e = memo(SvgFocusLegacySystraySymbolic);
var focus_legacy_systray_symbolic_default = Memo$3e;

const SvgFocusTopBarSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.025 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.06 2C.937 2 0 2.936 0 4.06v7.891h1.037v-1.015H2V6.06C2 6.01 2.01 6 2.06 6h11.905c.05 0 .06.01.06.06v7.981h.934l.045-1.06h1.021V4.06c0-1.125-.936-2.061-2.06-2.061zm7.95 2.074h3.976v.928H10.01z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      whiteSpace: "normal",
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$3f = memo(SvgFocusTopBarSymbolic);
var focus_top_bar_symbolic_default = Memo$3f;

const SvgFocusWindowsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.035 7.008c-.531 0-1.031.421-1.031 1v7.012h8.012v-3.985h-2v1.985H3.004v-2.997H5.02V7.008z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      whiteSpace: "normal",
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.02 1.008c-.532 0-1.032.421-1.032 1V9.02H15V1.977c0-.579-.521-.97-1.021-.97zm.968 3.015H13V7.02H8.988z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      whiteSpace: "normal",
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3g = memo(SvgFocusWindowsSymbolic);
var focus_windows_symbolic_default = Memo$3g;

const SvgFolderDocumentsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747",
    fillRule: "evenodd"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v13a1 1 0 001 1h10a1 1 0 001-1V5.5a1 1 0 00-.293-.707l-3.5-3.5A1 1 0 009.5 1zm1 2h5.086L12 5.914V14H4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 2v4h4z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3h = memo(SvgFolderDocumentsSymbolic);
var folder_documents_symbolic_default = Memo$3h;

const SvgFolderDownloadSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.031 16.01",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.031 1v10.086L4.238 8.293A1 1 0 003.531 8h-1.5v1a1 1 0 00.293.707l5 5a1 1 0 001.414 0l5-5A1 1 0 0014.031 9a1 1 0 000-.016V8h-1.5a1 1 0 00-.707.293l-2.793 2.793V1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$3i = memo(SvgFolderDownloadSymbolic);
var folder_download_symbolic_default = Memo$3i;

const SvgFolderDragAcceptSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.014 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.014 1a1 1 0 00-1 1v5.832a1 1 0 000 .326V13s-.014.459.23.947C.49 14.436 1.182 15 2.015 15h1.832a1 1 0 00.326 0h9.842s.459.014.948-.23c.488-.245 1.052-.937 1.052-1.77v-2a1 1 0 00-1-1h-11a1 1 0 00-1 1v2h-1V9h11a1 1 0 001-1V4a1 1 0 00-1-1H8.428L6.721 1.293A1 1 0 006.014 1zm1 2H5.6l1.707 1.707A1 1 0 008.014 5h4v2h-10zm3 9h9v1h-9z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.014 10h1s0-1 1-1l10-1V4h-5l-2-2h-5z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4.014 11h11v3h-11zm9-3h1v1h-1zm2 2h1v1h-1zm-12 0h1v1h-1z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3j = memo(SvgFolderDragAcceptSymbolic);
var folder_drag_accept_symbolic_default = Memo$3j;

const SvgFolderMusicSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 8A3.515 3.515 0 000 11.5C0 13.421 1.579 15 3.5 15S7 13.421 7 11.5 5.421 8 3.5 8zm0 2c.84 0 1.5.66 1.5 1.5S4.34 13 3.5 13 2 12.34 2 11.5 2.66 10 3.5 10zm8-2A3.515 3.515 0 008 11.5c0 1.921 1.579 3.5 3.5 3.5s3.5-1.579 3.5-3.5S13.421 8 11.5 8zm0 2c.84 0 1.5.66 1.5 1.5s-.66 1.5-1.5 1.5-1.5-.66-1.5-1.5.66-1.5 1.5-1.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 2v9.5h2V4h6v7.5h2V2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3k = memo(SvgFolderMusicSymbolic);
var folder_music_symbolic_default = Memo$3k;

const SvgFolderNewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 10.008v1.997h-2v1.997h2v1.996h2v-1.996h2v-1.997h-2v-1.997z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 1s-.459-.014-.947.23C.564 1.475 0 2.167 0 3v10s-.014.459.23.947C.476 14.436 1.168 15 2 15h7v-2H2V3h4.586l1.707 1.707A1 1 0 009 5h5v4h2V5s.014-.459-.23-.947C15.525 3.564 14.833 3 14 3H9.414L7.707 1.293A1 1 0 007 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3l = memo(SvgFolderNewSymbolic);
var folder_new_symbolic_default = Memo$3l;

const SvgFolderOpenSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1 1a1 1 0 00-1 1v11s-.014.459.23.947C.476 14.436 1.168 15 2 15h1.832a1 1 0 00.326 0H14s.459.014.947-.23C15.436 14.525 16 13.833 16 13V9a1 1 0 00-1-1H4a1 1 0 00-1 1v4H2V3h3.586l1.707 1.707A1 1 0 008 5H7a1 1 0 100 2h6a1 1 0 001-1V4a1 1 0 00-1-1H8.414L6.707 1.293A1 1 0 006 1zm4 9h9v3H5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1 8h1s0-1 1-1h8L6 2H1z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 9h11v5H4zm9-3h1v1h-1zm2 2h1v1h-1zM3 8h1v1H3z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3m = memo(SvgFolderOpenSymbolic);
var folder_open_symbolic_default = Memo$3m;

const SvgFolderPicturesSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.047 16.01",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    style: {
      marker: "none"
    },
    d: "M6.047 2c-.55 0-1 .45-1 1v1h-3c-.552 0-1 .45-1 1v8c0 .55.448 1 1 1h12c.552 0 1-.45 1-1V5c0-.55-.448-1-1-1h-3V3c0-.55-.45-1-1-1zm2 3a4 4 0 110 8 4 4 0 010-8zm0 2a2 2 0 100 4 2 2 0 000-4z",
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3n = memo(SvgFolderPicturesSymbolic);
var folder_pictures_symbolic_default = Memo$3n;

const SvgFolderPublicshareSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 8a3 3 0 01-3 3 3 3 0 01-3-3 3 3 0 013-3 3 3 0 013 3z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.553 2.106L.763 8l11.79 5.895.894-1.79L5.237 8l8.21-4.105z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M16 3a3 3 0 01-3 3 3 3 0 01-3-3 3 3 0 013-3 3 3 0 013 3zm0 10a3 3 0 01-3 3 3 3 0 01-3-3 3 3 0 013-3 3 3 0 013 3z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3o = memo(SvgFolderPublicshareSymbolic);
var folder_publicshare_symbolic_default = Memo$3o;

const SvgFolderRemoteSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 0a1 1 0 00-1 1v9s-.014.459.23.947C1.475 11.436 2.167 12 3 12h1.832a1 1 0 00.326 0H13s.459.014.947-.23C14.436 11.525 15 10.833 15 10V6a1 1 0 00-1-1H5a1 1 0 00-1 1v4H3V2h2.586l1.707 1.707A1 1 0 008 4h5a1 1 0 100-2H8.414L6.707.293A1 1 0 006 0zm4 7h7v3H6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 5h1s0-1 1-1h6L7 1H2z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 6h9v5H5zm8-3h1v1h-1zm1 2h1v1h-1zM4 5h1v1H4zm-2.5 9h13c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-13a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 11h2v4H7z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3p = memo(SvgFolderRemoteSymbolic);
var folder_remote_symbolic_default = Memo$3p;

const SvgFolderSavedSearchSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.508 1C3.48 1 1.002 3.474 1.002 6.5S3.48 12 6.508 12s5.504-2.474 5.504-5.5S9.536 1 6.508 1zm0 2a3.486 3.486 0 013.504 3.5c0 1.944-1.556 3.5-3.504 3.5a3.488 3.488 0 01-3.506-3.5C3.002 4.556 4.56 3 6.508 3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 8.99a1 1 0 00-.695 1.717l4.004 4a1 1 0 101.414-1.414l-4.004-4A1 1 0 0010 8.99z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3q = memo(SvgFolderSavedSearchSymbolic);
var folder_saved_search_symbolic_default = Memo$3q;

const SvgFolderSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M1 1a1 1 0 00-1 1v11s-.014.459.23.947C.476 14.436 1.168 15 2 15h12s.459.014.947-.23C15.436 14.525 16 13.833 16 13V6H3v7H2V6s0-1 1-1h11v-.832A1 1 0 0013 3H8.414L6.707 1.293A1 1 0 006 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$3r = memo(SvgFolderSymbolic);
var folder_symbolic_default = Memo$3r;

const SvgFolderTemplatesSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747",
    fillRule: "evenodd"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 9h1v1H3zm-1 1h1v1H2zm1 1h1v1H3zm-1 1h1v1H2zm1 1h1v1H3zm-1 1h1v1H2zm2 0h1v1H4zm2 0h1v1H6zm2 0h1v1H8zm2 0h1v1h-1zm-7 1h1v1H3zm2 0h1v1H5zm2 0h1v1H7zm2 0h1v1H9zm2 0h1v1h-1zm1-1h1v1h-1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v7h2V3h5.086L12 5.914V14h2V5.5a1 1 0 00-.293-.707l-3.5-3.5A1 1 0 009.5 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 2v4h4z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3s = memo(SvgFolderTemplatesSymbolic);
var folder_templates_symbolic_default = Memo$3s;

const SvgFolderVideosSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 4h8c.554 0 1 .446 1 1v7c0 .554-.446 1-1 1H6c-.554 0-1-.446-1-1V5c0-.554.446-1 1-1zM5 8.47L1.53 5H1v7h.5z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    fill: "#474747",
    color: "#bebebe"
  })));
  return render(rest, ...restArgs);
};
const Memo$3t = memo(SvgFolderVideosSymbolic);
var folder_videos_symbolic_default = Memo$3t;

const SvgFolderVisitingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 1s-.459-.014-.947.23C.564 1.475 0 2.167 0 3v10s-.014.459.23.947C.476 14.436 1.168 15 2 15h12s.459.014.947-.23C15.436 14.525 16 13.833 16 13V5s.014-.459-.23-.947C15.525 3.564 14.833 3 14 3H9.414L7.707 1.293A1 1 0 007 1zm0 2h4.586l1.707 1.707A1 1 0 009 5h5v8H2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#474747",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$3u = memo(SvgFolderVisitingSymbolic);
var folder_visiting_symbolic_default = Memo$3u;

const SvgFontSelectSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M0 5v1c0 .257.13.528.313.719L1.593 8 .314 9.281C.13 9.471 0 9.743 0 10v1h1c.31 0 .552-.09.75-.281L4.406 8 1.75 5.281C1.552 5.091 1.31 5 1 5zm16 0v1c0 .257-.13.528-.312.719L14.406 8l1.282 1.281c.182.19.312.462.312.719v1h-1c-.31 0-.552-.09-.75-.281L11.594 8l2.656-2.719c.198-.19.44-.281.75-.281z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 3.012v2h1.92c-.055 0 .084.159.084.082v.924H8c-1.716 0-3.03 1.125-3.054 2.484-.013.68.305 1.363.86 1.822.556.46 1.316.7 2.194.7h3.004v-5.93c0-1.171-.887-2.082-2.084-2.082zm1 5.006h1.004v1.005H8c-.52 0-.794-.137-.92-.242-.126-.104-.136-.172-.134-.244.003-.144.084-.52 1.054-.52z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3v = memo(SvgFontSelectSymbolic);
var font_select_symbolic_default = Memo$3v;

const SvgFontXGenericSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 5.01v2h1.92c-.055 0 .083.162.083.084v.922H4c-1.716 0-3.032 1.128-3.057 2.487-.012.679.306 1.36.861 1.82.556.46 1.318.7 2.196.7h3.002v-5.93c0-1.17-.886-2.084-2.082-2.084zm1 5.006h1.003v1.006H4c-.52 0-.794-.136-.92-.24-.126-.104-.138-.172-.137-.244.003-.144.087-.522 1.057-.522zM7.997 4v9.022H11c.938 0 1.767-.37 2.297-.957.53-.586.767-1.337.757-2.066a3.084 3.084 0 00-.79-2.045C12.737 7.377 11.921 7 11 7H9.997V4zm2 5H11c.422 0 .625.126.787.303.161.177.264.445.267.721.004.276-.088.531-.24.7-.151.167-.355.298-.814.298H9.997z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3w = memo(SvgFontXGenericSymbolic);
var font_x_generic_symbolic_default = Memo$3w;

const SvgFormatIndentLessSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7 3H2v2h5zm1 4H2v2h6zm6 4H7v2h7z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14 3v1c0 .257-.13.528-.312.719L12.406 6l1.282 1.281c.182.19.312.462.312.719v1h-1c-.31 0-.552-.09-.75-.281L9.594 6l2.656-2.719c.198-.19.44-.281.75-.281z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3x = memo(SvgFormatIndentLessSymbolic);
var format_indent_less_symbolic_default = Memo$3x;

const SvgFormatIndentMoreSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 3h5v2H8zm0 4h6v2H8zm-6 4h7v2H2z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 3v1c0 .257.13.528.312.719L3.594 6 2.312 7.281C2.13 7.471 2 7.743 2 8v1h1c.31 0 .552-.09.75-.281L6.406 6 3.75 3.281C3.552 3.091 3.31 3 3 3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3y = memo(SvgFormatIndentMoreSymbolic);
var format_indent_more_symbolic_default = Memo$3y;

const SvgFormatJustifyCenterSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 3h8v2H4zM3 7h10v2H3zm3 4h4v2H6z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#bebebe",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3z = memo(SvgFormatJustifyCenterSymbolic);
var format_justify_center_symbolic_default = Memo$3z;

const SvgFormatJustifyFillSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 3h10v2H3zm0 4h10v2H3zm0 4h10v2H3z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#bebebe",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3A = memo(SvgFormatJustifyFillSymbolic);
var format_justify_fill_symbolic_default = Memo$3A;

const SvgFormatJustifyLeftSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 3h8v2H3zm0 4h10v2H3zm0 4h4v2H3z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#bebebe",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3B = memo(SvgFormatJustifyLeftSymbolic);
var format_justify_left_symbolic_default = Memo$3B;

const SvgFormatJustifyRightSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 3h8v2H5zM3 7h10v2H3zm6 4h4v2H9z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#bebebe",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3C = memo(SvgFormatJustifyRightSymbolic);
var format_justify_right_symbolic_default = Memo$3C;

const SvgFormatTextBoldSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 3v2h6c.428 0 1 .614 1 1v1H7c-.92 0-1.736.38-2.25.965a3.037 3.037 0 00-.737 2.045c.006.72.246 1.449.758 2.027.513.579 1.32.963 2.229.963h7V6a3 3 0 00-3-3zm2 6h5v2H7c-.398 0-.579-.116-.73-.287a1.138 1.138 0 01-.257-.723c-.002-.28.093-.54.239-.705C6.397 9.12 6.577 9 7 9z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 3v2h5c.428 0 1 .614 1 1v1H5c-.92 0-1.736.38-2.25.965a3.037 3.037 0 00-.737 2.045c.006.72.246 1.449.758 2.027.513.579 1.32.963 2.229.963h7V6a3 3 0 00-3-3zm1 6h5v2H5c-.398 0-.579-.116-.73-.287a1.138 1.138 0 01-.257-.723c-.002-.28.093-.54.239-.705C4.397 9.12 4.577 9 5 9z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3D = memo(SvgFormatTextBoldSymbolic);
var format_text_bold_symbolic_default = Memo$3D;

const SvgFormatTextDirectionSymbolicRtl = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 .05v2h6c.428 0 1 .613 1 1v1H8c-.92 0-1.735.383-2.25.968A3.017 3.017 0 005 7.049c.006.72.27 1.453.781 2.032.513.578 1.31.968 2.22.968h7v-7a3 3 0 00-3-3zm2 6h5v2H8c-.398 0-.567-.11-.719-.282a1.144 1.144 0 01-.28-.719 1.11 1.11 0 01.25-.718c.144-.166.327-.282.75-.282z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontSize: "xx-small",
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 15H3c-.265 0-.53-.093-.719-.281l-2-2L0 12.437v-.874l.281-.282 2-2C2.47 9.093 2.735 9 3 9h1v1c0 .265-.093.53-.281.719L2.438 12l1.28 1.281c.189.188.282.454.282.719v1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 11v2h12.938v-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3E = memo(SvgFormatTextDirectionSymbolicRtl);
var format_text_direction_symbolic_rtl_default = Memo$3E;

const SvgFormatTextDirectionSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 0v2h6c.428 0 1 .614 1 1v1H4c-.92 0-1.735.384-2.25.969A3.017 3.017 0 001 7c.006.72.269 1.453.781 2.031.513.579 1.31.969 2.22.969h7V3a3 3 0 00-3-3zm2 6h5v2H4c-.398 0-.567-.11-.719-.281A1.144 1.144 0 013.001 7c-.003-.28.104-.554.25-.719C3.394 6.116 3.577 6 4 6z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontSize: "xx-small",
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 15h1c.265 0 .53-.093.719-.281l2-2 .281-.282v-.874l-.281-.282-2-2A1.015 1.015 0 0013 9h-1v1c0 .265.093.53.281.719L13.562 12l-1.28 1.281A1.015 1.015 0 0012 14v1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M.938 11v2H14v-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3F = memo(SvgFormatTextDirectionSymbolic);
var format_text_direction_symbolic_default = Memo$3F;

const SvgFormatTextItalicSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.494 3v2h6c.428 0 .607.281.482.732L10.625 7h-5.24C3.546 7 2.254 8.343 1.879 9.74c-.188.7-.174 1.477.238 2.155.412.677 1.252 1.105 2.16 1.105h6.76l1.865-6.732C13.337 4.698 12.174 3 10.494 3zm.89 6h4.686l-.555 2H4.277c-.398 0-.409-.072-.453-.145-.044-.072-.094-.294-.014-.595C3.972 9.657 4.54 9 5.385 9z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3G = memo(SvgFormatTextItalicSymbolic);
var format_text_italic_symbolic_default = Memo$3G;

const SvgFormatTextStrikethroughSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 3v2h6c.428 0 1 .614 1 1h2a3 3 0 00-3-3zm-1 7c.006.72.269 1.453.781 2.031C4.293 12.61 5.091 13 6 13h7v-3h-2v1H6c-.398 0-.567-.11-.719-.281A1.144 1.144 0 015 10z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1 7v2h14V7z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3H = memo(SvgFormatTextStrikethroughSymbolic);
var format_text_strikethrough_symbolic_default = Memo$3H;

const SvgFormatTextUnderlineSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 2v2h6c.428 0 1 .614 1 1v1H6c-.92 0-1.736.38-2.25.965a3.037 3.037 0 00-.737 2.045c.006.72.246 1.449.758 2.027.513.579 1.32.963 2.229.963h7V5a3 3 0 00-3-3zm2 6h5v2H6c-.398 0-.579-.116-.73-.287a1.138 1.138 0 01-.257-.723c-.002-.28.093-.54.239-.705C5.397 8.12 5.577 8 6 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 13v2h12v-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3I = memo(SvgFormatTextUnderlineSymbolic);
var format_text_underline_symbolic_default = Memo$3I;

const SvgGnomePowerManagerSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.469 0c-.49 0-.796.229-1.032.47C2.202.71 2 1.03 2 1.503V2H0v14h7v-2l-4.95.05L2 4h2V2h3v2h2v1h2V2H9v-.403A1.669 1.669 0 008.594.564 1.528 1.528 0 007.437.03V0H3.47z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 10h2c.276-1.103 1.065-3.724 3-4h3v2h2v2h-2v2h2v2h-2v2h-3c-1.935-.276-2.724-2.897-3-4H6z",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3J = memo(SvgGnomePowerManagerSymbolic);
var gnome_power_manager_symbolic_default = Memo$3J;

const SvgGoBottomSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.707 3.293L2.293 4.707 8 10.414l5.707-5.707-1.414-1.414L8 7.586zm-1.705 7.691l-.004 2 1 .002 10 .014 1 .002.004-2-1-.002-10-.014z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 4V3H2v1zm11 0V3h-1v1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14 4c0-.554-.446-1-1-1s-1 .446-1 1 .446 1 1 1 1-.446 1-1zM4 4c0-.554-.446-1-1-1s-1 .446-1 1 .446 1 1 1 1-.446 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3K = memo(SvgGoBottomSymbolic);
var go_bottom_symbolic_default = Memo$3K;

const SvgGoDownSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.707 5.293L2.293 6.707 8 12.414l5.707-5.707-1.414-1.414L8 9.586z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M13 6V5h1v1zM2 6V5h1v1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 6c0-.554.446-1 1-1s1 .446 1 1-.446 1-1 1-1-.446-1-1zm10 0c0-.554.446-1 1-1s1 .446 1 1-.446 1-1 1-1-.446-1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3L = memo(SvgGoDownSymbolic);
var go_down_symbolic_default = Memo$3L;

const SvgGoFirstSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11.293 2.293L5.586 8l5.707 5.707 1.414-1.414L8.414 8l4.293-4.293zm-6.295-.295l-2 .004.002 1 .014 10 .002 1 2-.004-.002-1-.014-10z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 13h1v1h-1zm0-11h1v1h-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 2c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm0 10c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3M = memo(SvgGoFirstSymbolic);
var go_first_symbolic_default = Memo$3M;

const SvgGoHomeSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.023 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.996 4.986A1 1 0 002.012 6v7a1 1 0 001 1h10a1 1 0 001-1V6a1 1 0 10-2 0v6h-8V6a1 1 0 00-1.016-1.014z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.031 1a1 1 0 00-.601.186l-7 5a1 1 0 101.162 1.628l6.42-4.585 6.418 4.585a1 1 0 101.162-1.628l-7-5A1 1 0 008.032 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.012 8h3v6h-3z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15.512 7a.499.499 0 100 1 .499.499 0 100-1zm-15 0a.499.499 0 100 1 .499.499 0 100-1z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3N = memo(SvgGoHomeSymbolic);
var go_home_symbolic_default = Memo$3N;

const SvgGoJumpSymbolicRtl = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747",
    stroke: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 6v-.5a2.5 2.5 0 00-5 0V12",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "none",
    strokeWidth: 2
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 9h1c.257 0 .528.13.719.313L7 11.593l2.281-2.28C9.471 9.13 9.743 9 10 9h1v1c0 .31-.09.552-.281.75L7 14.406 3.281 10.75C3.091 10.552 3 10.31 3 10z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible",
    stroke: "none"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3O = memo(SvgGoJumpSymbolicRtl);
var go_jump_symbolic_rtl_default = Memo$3O;

const SvgGoJumpSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.5 2A3.515 3.515 0 003 5.5V6h2v-.5C5 4.66 5.66 4 6.5 4S8 4.66 8 5.5V12h2V5.5C10 3.579 8.421 2 6.5 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M13 9h-1c-.257 0-.528.13-.719.313L9 11.593l-2.281-2.28C6.529 9.13 6.257 9 6 9H5v1c0 .31.09.552.281.75L9 14.406l3.719-3.656c.19-.198.281-.44.281-.75z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3P = memo(SvgGoJumpSymbolic);
var go_jump_symbolic_default = Memo$3P;

const SvgGoLastSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.707 2.293L3.293 3.707 7.586 8l-4.293 4.293 1.414 1.414L10.414 8zm6.295-.295l-.002 1-.014 10-.002 1 2 .004.002-1 .014-10 .002-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 13H3v1h1zM4 2H3v1h1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 2c-.554 0-1 .446-1 1s.446 1 1 1 1-.446 1-1-.446-1-1-1zm0 10c-.554 0-1 .446-1 1s.446 1 1 1 1-.446 1-1-.446-1-1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3Q = memo(SvgGoLastSymbolic);
var go_last_symbolic_default = Memo$3Q;

const SvgGoNextSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.707 2.293L5.293 3.707 9.586 8l-4.293 4.293 1.414 1.414L12.414 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 13H5v1h1zM6 2H5v1h1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 2c-.554 0-1 .446-1 1s.446 1 1 1 1-.446 1-1-.446-1-1-1zm0 10c-.554 0-1 .446-1 1s.446 1 1 1 1-.446 1-1-.446-1-1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3R = memo(SvgGoNextSymbolic);
var go_next_symbolic_default = Memo$3R;

const SvgGoPreviousSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.293 2.293L3.586 8l5.707 5.707 1.414-1.414L6.414 8l4.293-4.293z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 13h1v1h-1zm0-11h1v1h-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 2c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm0 10c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3S = memo(SvgGoPreviousSymbolic);
var go_previous_symbolic_default = Memo$3S;

const SvgGoTopSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 5.586l-5.707 5.707 1.414 1.414L8 8.414l4.293 4.293 1.414-1.414zm5.998-2.588l-1 .002-10 .014-1 .002.004 2 1-.002 10-.014 1-.002z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 12v1H2v-1zm11 0v1h-1v-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14 12c0 .554-.446 1-1 1s-1-.446-1-1 .446-1 1-1 1 .446 1 1zM4 12c0 .554-.446 1-1 1s-1-.446-1-1 .446-1 1-1 1 .446 1 1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3T = memo(SvgGoTopSymbolic);
var go_top_symbolic_default = Memo$3T;

const SvgGoUpSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 3.586L2.293 9.293l1.414 1.414L8 6.414l4.293 4.293 1.414-1.414z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M13 10v1h1v-1zM2 10v1h1v-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 10c0 .554.446 1 1 1s1-.446 1-1-.446-1-1-1-1 .446-1 1zm10 0c0 .554.446 1 1 1s1-.446 1-1-.446-1-1-1-1 .446-1 1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3U = memo(SvgGoUpSymbolic);
var go_up_symbolic_default = Memo$3U;

const SvgGoaPanelSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    d: "M7.662.008a8.007 8.007 0 00-6.41 3.695 8.009 8.009 0 00.736 9.574 8.006 8.006 0 009.397 1.971 1 1 0 10-.846-1.812 5.993 5.993 0 01-7.049-1.479 5.99 5.99 0 01-.55-7.18A5.99 5.99 0 019.677 2.24 5.991 5.991 0 0114 8a1 1 0 000 .041V9a.994.994 0 01-.5.865.993.993 0 01-1 0A.995.995 0 0112 9V8c0-2.197-1.803-4-4-4S4 5.803 4 8s1.803 4 4 4c1.044 0 1.99-.416 2.705-1.078.222.265.487.498.795.676a3.004 3.004 0 003 0A3.003 3.003 0 0016 9V8A8.008 8.008 0 0010.238.318a7.983 7.983 0 00-2.576-.31zM8 6c1.117 0 2 .884 2 2s-.883 2-2 2c-1.116 0-2-.884-2-2s.884-2 2-2z",
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$3V = memo(SvgGoaPanelSymbolic);
var goa_panel_symbolic_default = Memo$3V;

const SvgHelpAboutSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 15c-.72 0-1.83-4.151-2.34-4.66C5.151 9.83 1 8.72 1 8c0-.72 4.151-1.83 4.66-2.34C6.17 5.151 7.28 1 8 1c.72 0 1.83 4.151 2.34 4.66C10.849 6.17 15 7.28 15 8c0 .72-4.151 1.83-4.66 2.34C9.83 10.849 8.72 15 8 15z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3W = memo(SvgHelpAboutSymbolic);
var help_about_symbolic_default = Memo$3W;

const SvgHelpBrowserSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 0C3.585 0 0 3.585 0 8s3.585 8 8 8 8-3.585 8-8-3.585-8-8-8zm0 2c3.341 0 6 2.659 6 6s-2.659 6-6 6-6-2.659-6-6 2.659-6 6-6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.338 5A2.344 2.344 0 005 7.338v1.324A2.344 2.344 0 007.338 11h1.324A2.344 2.344 0 0011 8.662V7.338A2.344 2.344 0 008.662 5zm0 1h1.324C9.412 6 10 6.588 10 7.338v1.324C10 9.412 9.412 10 8.662 10H7.338C6.588 10 6 9.412 6 8.662V7.338C6 6.588 6.588 6 7.338 6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4.719 1.438A5.881 5.881 0 001.437 4.75l3.75 1.875c.252-.64.743-1.17 1.375-1.438zm6.562 0l-1.844 3.75a2.574 2.574 0 011.376 1.437l3.75-1.875a5.881 5.881 0 00-3.282-3.313zm-6.094 8l-3.75 1.874a5.904 5.904 0 003.282 3.25l1.875-3.75a2.59 2.59 0 01-1.407-1.374zm5.625 0a2.59 2.59 0 01-1.406 1.374l1.875 3.75a5.904 5.904 0 003.281-3.25z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3X = memo(SvgHelpBrowserSymbolic);
var help_browser_symbolic_default = Memo$3X;

const SvgHelpContentsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.025 0l.034.002a2.086 2.086 0 00-.159 0h-.02l-.024.002A1.98 1.98 0 001 2.045v11.914A1.981 1.981 0 003.041 16h9.918A1.98 1.98 0 0015 13.96V5a1.991 1.991 0 00-.617-1.422L11.426.62A1.99 1.99 0 0010.004 0h-.008zm-.017 2c-.002-.002.005 0 .002 0h6.965c-.01 0 .014.011.007.004l.008.008 2.998 3.002.008.006c-.007-.007.004.019.004.01v8.959c-.001-.08-.093.01-.012.012H3.012c.081-.001-.01-.092-.012-.012V2.011c.001.055.027.005.008-.01z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 4.877c-2.24 0-4.06 1.82-4.06 4.06A4.063 4.063 0 008 12.998c2.24 0 4.06-1.82 4.06-4.06A4.063 4.063 0 008 4.877zm0 1a3.043 3.043 0 013.06 3.06A3.043 3.043 0 018 11.999a3.043 3.043 0 01-3.06-3.06A3.043 3.043 0 018 5.877z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 6.938c-1.1 0-2 .9-2 2 0 1.099.9 2 2 2s2-.901 2-2c0-1.1-.9-2-2-2zm0 1c.563 0 1 .437 1 1 0 .562-.437 1-1 1s-1-.438-1-1c0-.563.437-1 1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.331 5.6a2.991 2.991 0 00-1.669 1.684l1.908.954a1.31 1.31 0 01.699-.731zm3.338 0L8.73 7.507c.322.136.571.405.7.731l1.907-.954A2.991 2.991 0 009.668 5.6zm-3.1 4.069l-1.907.953c.309.757.91 1.348 1.67 1.653l.953-1.907a1.318 1.318 0 01-.715-.7zm2.861 0a1.316 1.316 0 01-.715.699l.954 1.907a3.003 3.003 0 001.669-1.653z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3Y = memo(SvgHelpContentsSymbolic);
var help_contents_symbolic_default = Memo$3Y;

const SvgHelpFaqSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 5C.892 5 0 5.892 0 7v7c0 1.108.892 2 2 2h9c1.108 0 2-.892 2-2v-3.8L16 7h-3c0-1.108-.892-2-2-2zm4.438 2C7.75 6.926 8.926 7.936 9 9.25c0 1.121-.308 1.544-1.281 2.281a1.68 1.68 0 00-.281.25c-.04.05-.032.033-.032.031.006.423-.39.782-.812.782a.79.79 0 01-.781-.782c0-.401.179-.754.375-1a3.14 3.14 0 01.562-.562 3.85 3.85 0 00.563-.531c.074-.09.097-.24.093-.344v-.031a.785.785 0 00-.843-.75c-.451.025-.813.362-.851.758a.697.697 0 01-.718.648.816.816 0 01-.781-.594 1.725 1.725 0 01.01-.533c.005-.014.006-.03.012-.043.202-1.024 1.09-1.768 2.203-1.83zm.156 6.406a.82.82 0 01.812.813c0 .442-.37.781-.812.781a.768.768 0 01-.781-.781c0-.442.339-.813.78-.813zM2 1C.892 1 0 1.892 0 3v.568A3.918 3.918 0 012 3h9c1.376 0 2.55.763 3.268 1.848L16 3h-3c0-1.108-.892-2-2-2z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3Z = memo(SvgHelpFaqSymbolic);
var help_faq_symbolic_default = Memo$3Z;

const SvgImageLoadingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 8a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2zm5 0a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2zm5 0a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$3_ = memo(SvgImageLoadingSymbolic);
var image_loading_symbolic_default = Memo$3_;

const SvgImageXGenericSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.032 1.032V15H15V1.03zm2 2H13V13H3.03z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.536 8.3c-.467-.065-1.046-.105-1.532.275-.403.315-.777.713-1.105 1.017-.328.305-.652.44-.586.44H2.47v1h3.844c.582 0 .9-.368 1.264-.705.364-.337.731-.721 1.043-.965.106-.083.406-.124.779-.072.373.051.707.18 1.102.18.146 0 .215.034.324.126.108.092.23.254.365.448.135.193.28.417.498.62.218.204.546.383.922.383h.86v-1h-.86c-.1 0-.14-.02-.238-.113-.099-.092-.22-.26-.36-.46-.14-.202-.3-.436-.539-.64a1.517 1.517 0 00-.972-.365c-.033 0-.499-.105-.965-.17zM5.454 3.885c-.86 0-1.569.708-1.569 1.569 0 .86.708 1.568 1.569 1.568.86 0 1.568-.708 1.568-1.568 0-.86-.708-1.569-1.568-1.569zm0 1c.32 0 .568.249.568.569a.56.56 0 01-.568.568.561.561 0 01-.569-.568c0-.32.249-.569.569-.569z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$3$ = memo(SvgImageXGenericSymbolic);
var image_x_generic_symbolic_default = Memo$3$;

const SvgInodeDirectorySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.001 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    d: "M1 1a1 1 0 00-1 1v11s-.014.459.23.947C.476 14.436 1.168 15 2 15h12s.459.014.947-.23C15.436 14.525 16 13.833 16 13V6H3v7H2V6s0-1 1-1h11v-.832A1 1 0 0013 3H8.414L6.707 1.293A1 1 0 006 1z",
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$40 = memo(SvgInodeDirectorySymbolic);
var inode_directory_symbolic_default = Memo$40;

const SvgInputDialpadSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.5 1c-.277 0-.5.223-.5.5v2c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5v-2c0-.277-.223-.5-.5-.5zm4 0c-.277 0-.5.223-.5.5v2c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5v-2c0-.277-.223-.5-.5-.5zm4 0c-.277 0-.5.223-.5.5v2c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5v-2c0-.277-.223-.5-.5-.5zm-8 4c-.277 0-.5.223-.5.5v2c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5v-2c0-.277-.223-.5-.5-.5zm4 0c-.277 0-.5.223-.5.5v2c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5v-2c0-.277-.223-.5-.5-.5zm4 0c-.277 0-.5.223-.5.5v2c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5v-2c0-.277-.223-.5-.5-.5zm-8 4c-.277 0-.5.223-.5.5v2c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5v-2c0-.277-.223-.5-.5-.5zm4 0c-.277 0-.5.223-.5.5v2c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5v-2c0-.277-.223-.5-.5-.5zm4 0c-.277 0-.5.223-.5.5v2c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5v-2c0-.277-.223-.5-.5-.5zm-4 4c-.277 0-.5.223-.5.5v2c0 .277.223.5.5.5h2c.277 0 .5-.223.5-.5v-2c0-.277-.223-.5-.5-.5z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$41 = memo(SvgInputDialpadSymbolic);
var input_dialpad_symbolic_default = Memo$41;

const SvgInputGamingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.246 3c-.153 0-.256.073-.291.203L.26 11.824C.035 12.67 1.821 13.681 3 13l2.75-4h4.5L13 13c1.178.68 2.965-.33 2.738-1.176l-1.693-8.62c-.035-.131-.14-.204-.291-.204zM4.25 4h.5a.25.25 0 01.25.25V5h.75a.25.25 0 01.25.25v.5a.25.25 0 01-.25.25H5v.75a.25.25 0 01-.25.25h-.5A.25.25 0 014 6.75V6h-.75A.25.25 0 013 5.75v-.5A.25.25 0 013.25 5H4v-.75A.25.25 0 014.25 4zm7.214 0a.5.5 0 01.036 0 .5.5 0 01.5.5.5.5 0 01-.5.5.5.5 0 01-.5-.5.5.5 0 01.464-.5zm-1 1a.5.5 0 01.036 0 .5.5 0 01.5.5.5.5 0 01-.5.5.5.5 0 01-.5-.5.5.5 0 01.464-.5zm2 0a.5.5 0 01.036 0 .5.5 0 01.5.5.5.5 0 01-.5.5.5.5 0 01-.5-.5.5.5 0 01.464-.5zm-1 1a.5.5 0 01.036 0 .5.5 0 01.5.5.5.5 0 01-.5.5.5.5 0 01-.5-.5.5.5 0 01.464-.5z",
    color: "#000",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$42 = memo(SvgInputGamingSymbolic);
var input_gaming_symbolic_default = Memo$42;

const SvgInputKeyboardSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.022 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M1 2c-.554 0-1 .446-1 1v11c0 .554.446 1 1 1h13.006c.554 0 1-.446 1-1V3c0-.554-.446-1-1-1zm1.365 2h1.656v2h-2V4.393c0-.218.154-.393.344-.393zm2.656 0h2v2h-2zm3 0h2v2h-2zm3 0h1.657c.19 0 .343.175.343.393V6h-2zm-8 3h2v2h-2zm3 0h2v2h-2zm3 0h2v2h-2zm-6.656 4h10.313c.19 0 .343.175.343.393v1.214c0 .218-.153.393-.343.393H2.365c-.19 0-.344-.175-.344-.393v-1.214c0-.218.154-.393.344-.393z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$43 = memo(SvgInputKeyboardSymbolic);
var input_keyboard_symbolic_default = Memo$43;

const SvgInputMouseSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.009",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.062.01c-.454.049-.883.22-1.25.5C6.324.88 6 1.463 6 2.196a.52.52 0 00.5.507.52.52 0 00.5-.507c0-.45.172-.704.437-.907.266-.202.664-.3 1.063-.28.399.018.784.153 1.062.405.279.253.47.585.47 1.125 0 2.166 1.463 3.51 3 3.47.856-.023 1.687-.478 2.25-1.313l-.563-1c-.376.915-1.068 1.295-1.719 1.312-.96.025-1.969-.73-1.969-2.469 0-.792-.337-1.443-.812-1.875C9.743.235 9.138.038 8.53.01c-.151-.007-.317-.016-.469 0zM15 1.977v.156l.781 1.375c.012-.04.021-.083.031-.125zm0 .375c-.006.106-.02.214-.031.312l.719 1.22c.023-.063.041-.123.062-.188zm-.063.5c-.013.09-.044.166-.062.25l.656 1.125c.03-.061.067-.124.094-.188zm-.093.437c-.024.09-.066.17-.094.25l.594 1.032c.04-.066.088-.119.125-.188z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 4.01c-1.108 0-2 .891-2 2v2h3v-4zm2 0v4h3v-2c0-1.109-.892-2-2-2zm-4 5v2.25c0 2.215 1.56 3.75 3.5 3.75 1.939 0 3.5-1.535 3.5-3.75V9.01H6z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$44 = memo(SvgInputMouseSymbolic);
var input_mouse_symbolic_default = Memo$44;

const SvgInputTabletSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12.403 4.15L7.45 9.102 7 11l1.87-.39 5-5c.549-.593.63-1.11.13-1.61s-1.17-.278-1.597.15z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    clipRule: "evenodd",
    overflow: "visible",
    fillRule: "evenodd",
    imageRendering: "optimizeQuality",
    shapeRendering: "geometricPrecision",
    textRendering: "geometricPrecision"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.191 6L.263 15h15.473L14 6.897 12.316 8.58l.946 4.42H2.738l1.07-5h3.33l1.999-2zm9.776 0l-2 2h.1l2-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 0v1.5a.506.506 0 01-.147.356.484.484 0 01-.345.144H4.496a1.498 1.498 0 00-1.297 2.248c.266.463.761.752 1.295.752h3.01c.18 0 .34.092.43.248A.506.506 0 018 5.5V6h1v-.5A1.498 1.498 0 007.504 4h-3.01a.491.491 0 01-.428-.248.507.507 0 010-.504.488.488 0 01.43-.248h3.012A1.501 1.501 0 009 1.5V0z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$45 = memo(SvgInputTabletSymbolic);
var input_tablet_symbolic_default = Memo$45;

const SvgInputTouchpadSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.031 1a3.038 3.038 0 00-3.03 3.031v7.938A3.038 3.038 0 003.03 15h8.938A3.038 3.038 0 0015 11.969V4.03A3.038 3.038 0 0011.97 1zm0 2h8.938C12.565 3 13 3.435 13 4.031V10H2V4.031C2 3.435 2.436 3 3.031 3zm-1.03 8h5v2H3.03C2.435 13 2 12.565 2 11.969zm6 0h5v.969c0 .596-.436 1.031-1.032 1.031H8z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 3h11v7H2z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$46 = memo(SvgInputTouchpadSymbolic);
var input_touchpad_symbolic_default = Memo$46;

const SvgInsertImageSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 0v9h12V0zm2 2h8v5H4z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 5c2.32 1 3.045-1.66 6 0v1H5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.003 11.039h-1c-.258 0-.53.13-.72.313L8 12.634l-1.283-1.282c-.19-.183-.462-.313-.72-.313h-1v1.001c0 .31.09.553.281.75L8 15.45l2.722-2.66c.191-.197.281-.44.281-.75v-1.001z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$47 = memo(SvgInsertImageSymbolic);
var insert_image_symbolic_default = Memo$47;

const SvgInsertLinkSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 15.982",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11.001 11.986h-1a1.21 1.21 0 00-.719.261l-1.281 1.07-1.281-1.07a1.202 1.202 0 00-.72-.26H5v.835c0 .258.09.461.282.626l2.741 2.534 2.697-2.534a.78.78 0 00.281-.626v-.836z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.804 4.04a.936 1.01 0 00.185 1.997h4.937a.936 1.01 0 100-1.997H9.989a.936 1.01 0 00-.185 0zm-8.991 0c-.45.102-.789.599-.743 1.088.046.49.47.904.93.91h4.916c.535.085 1.084-.42 1.084-1 0-.578-.549-1.084-1.084-.998H1a.834.834 0 00-.187 0zM6.059.964a2.492 2.492 0 00-1.907 1.468 2.686 2.686 0 00-.156.532H12c-.026-.126-.054-.263-.094-.375A2.467 2.467 0 009.563.964h-3.13c-.126 0-.252-.019-.374 0zm-2.063 6c.236 1.132 1.24 2 2.438 2h3.129c1.197 0 2.202-.868 2.437-2z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$48 = memo(SvgInsertLinkSymbolic);
var insert_link_symbolic_default = Memo$48;

const SvgInsertObjectSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 0L3 3.143v4.714L8 11l5-3.143V3.143zm0 6L4.355 3.824 8 1.532l3.646 2.292z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 12h-1c-.257 0-.528.118-.719.284l-1.28 1.163-1.282-1.163A1.145 1.145 0 006 12H5v.908c0 .28.09.501.281.68L8.001 16l2.718-2.411a.88.88 0 00.281-.681V12z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$49 = memo(SvgInsertObjectSymbolic);
var insert_object_symbolic_default = Memo$49;

const SvgInsertTextSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11 12h-1c-.257 0-.528.118-.719.284l-1.28 1.163-1.282-1.163A1.145 1.145 0 006 12H5v.908c0 .28.09.501.281.68L8.001 16l2.718-2.411a.88.88 0 00.281-.681V12z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 0v2h6c.428 0 1 .614 1 1v1H6c-.92 0-1.736.38-2.25.965a3.037 3.037 0 00-.736 2.045 3.08 3.08 0 00.758 2.027C4.284 9.616 5.092 10 6 10h7V3a3 3 0 00-3-3zm2 6h5v2H6c-.398 0-.579-.116-.73-.287a1.138 1.138 0 01-.256-.723c-.003-.28.093-.54.238-.705C5.397 6.12 5.578 6 6 6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4a = memo(SvgInsertTextSymbolic);
var insert_text_symbolic_default = Memo$4a;

const SvgKeyboardBrightnessSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M.472 10H2.5c.262 0 .472.223.472.5v1c0 .277-.21.5-.472.5H.472A.486.486 0 010 11.5v-1c0-.277.21-.5.472-.5zm13.012 0H15.5c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-2.016a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5zM11.17 6.415l1.426-1.425a.499.499 0 01.707 0l.707.707a.499.499 0 010 .707L12.585 7.83a.499.499 0 01-.708 0l-.707-.707a.499.499 0 010-.708zM3.412 7.828L1.987 6.403a.499.499 0 010-.708l.707-.707a.499.499 0 01.707 0l1.426 1.426a.499.499 0 010 .707l-.707.707a.499.499 0 01-.708 0zM7 5.5v-2c0-.277.223-.5.5-.5h1c.277 0 .5.223.5.5v2c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.245 9a.428.428 0 00-.375.261l-.836 2.217c-.101.234.126.528.404.522a25395.185 25395.185 0 005.134 0c.277.006.505-.288.403-.522l-.836-2.217c-.073-.193-.337-.306-.548-.235-.213.07-.82.261-1.586.261a5.147 5.147 0 01-1.587-.26A.465.465 0 006.245 9z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4b = memo(SvgKeyboardBrightnessSymbolic);
var keyboard_brightness_symbolic_default = Memo$4b;

const SvgListAddSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M7 3v4H3v2h4v4h2V9h4V7H9V3z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$4c = memo(SvgListAddSymbolic);
var list_add_symbolic_default = Memo$4c;

const SvgListDragHandleSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.494 0a1.5 1.5 0 00-1.5 1.5 1.5 1.5 0 001.5 1.5 1.5 1.5 0 001.5-1.5 1.5 1.5 0 00-1.5-1.5zm6 0a1.5 1.5 0 00-1.5 1.5 1.5 1.5 0 001.5 1.5 1.5 1.5 0 001.5-1.5 1.5 1.5 0 00-1.5-1.5zm-6 6a1.5 1.5 0 00-1.5 1.5 1.5 1.5 0 001.5 1.5 1.5 1.5 0 001.5-1.5 1.5 1.5 0 00-1.5-1.5zm6 0a1.5 1.5 0 00-1.5 1.5 1.5 1.5 0 001.5 1.5 1.5 1.5 0 001.5-1.5 1.5 1.5 0 00-1.5-1.5zm-6 6a1.5 1.5 0 00-1.5 1.5 1.5 1.5 0 001.5 1.5 1.5 1.5 0 001.5-1.5 1.5 1.5 0 00-1.5-1.5zm6 0a1.5 1.5 0 00-1.5 1.5 1.5 1.5 0 001.5 1.5 1.5 1.5 0 001.5-1.5 1.5 1.5 0 00-1.5-1.5z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$4d = memo(SvgListDragHandleSymbolic);
var list_drag_handle_symbolic_default = Memo$4d;

const SvgListRemoveAllSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 3h10v2H3zm7 4h3v2h-3zm0 4h3v2h-3z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1 6.063v7.968h8V6.063zm1 1h6v5.968H2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.043 9v2h4.033V9z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4e = memo(SvgListRemoveAllSymbolic);
var list_remove_all_symbolic_default = Memo$4e;

const SvgListRemoveSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 7h10v2H3z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$4f = memo(SvgListRemoveSymbolic);
var list_remove_symbolic_default = Memo$4f;

const SvgLocationServicesActiveSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 .997a5 5 0 00-5 5c0 .172.014.332.031.5.014.167.036.336.063.5C3.666 10.51 6 13 8 15c2-2 4.334-4.489 4.906-8.003.027-.164.05-.333.063-.5.017-.168.031-.328.031-.5a5 5 0 00-5-5zm0 3a2 2 0 110 4 2 2 0 010-4z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$4g = memo(SvgLocationServicesActiveSymbolic);
var location_services_active_symbolic_default = Memo$4g;

const SvgLocationServicesDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.531.469L.47 1.53l14 14 1.062-1.062z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.025 5.498A5.067 5.067 0 003 6c0 .173.014.332.031.5.014.167.036.336.063.5C3.666 10.514 6 13.004 8 15.004c.714-.714 1.47-1.494 2.174-2.358zM8 1C6.103 1 4.472 2.069 3.625 3.625L6 6a2 2 0 112 2l3.213 3.213c.795-1.228 1.432-2.61 1.693-4.213.027-.164.049-.333.063-.5.017-.168.031-.327.031-.5a5 5 0 00-5-5z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4h = memo(SvgLocationServicesDisabledSymbolic);
var location_services_disabled_symbolic_default = Memo$4h;

const SvgMailAttachmentSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M10 4v6.5h2V4zM4 4v8h2V4zm3.985.986A1 1 0 007 6v4.563a1 1 0 102 0V6a1 1 0 00-1.015-1.014z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 10.5a2.502 2.502 0 003.75 2.164A2.502 2.502 0 0012 10.5h-2c0 .18-.094.344-.25.434a.496.496 0 01-.5 0A.497.497 0 019 10.5zM4 4c0-1.427.764-2.75 2-3.465a4.004 4.004 0 014 0c1.236.714 2 2.038 2 3.465h-2c0-.716-.38-1.374-1-1.732a1.996 1.996 0 00-2 0C6.38 2.626 6 3.284 6 4zm0 8a4 4 0 004 4v-2a1.998 1.998 0 01-2-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 14a1 1 0 100 2h2a1 1 0 100-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4i = memo(SvgMailAttachmentSymbolic);
var mail_attachment_symbolic_default = Memo$4i;

const SvgMailForwardSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.006 6s-1.209-.014-2.447.605C3.32 7.225 2.006 8.667 2.006 11v2h2v-2c0-1.667.686-2.225 1.447-2.605A4.045 4.045 0 017.006 8H12V6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 3.022v1c0 .257.13.529.313.719l2.28 2.281-2.28 2.281c-.183.19-.313.462-.313.72v1h1c.31 0 .552-.091.75-.282l3.656-3.719-3.656-3.719c-.198-.19-.44-.28-.75-.28z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4j = memo(SvgMailForwardSymbolic);
var mail_forward_symbolic_default = Memo$4j;

const SvgMailMarkImportantSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.78 1.72a1 1 0 00-.406 1.78l5 4L7 8l.625-.5 5-4a1 1 0 10-1.25-1.562L7 5.438l-4.375-3.5a1 1 0 00-.843-.219z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    overflow: "visible",
    color: "#000",
    fontFamily: "Bitstream Vera Sans",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    d: "M.813 1A1.034 1.034 0 000 2v9c0 .524.477 1 1 1h6v-2H2V3h10v4h2V2c0-.523-.476-1-1-1H1a1.478 1.478 0 00-.094 0 1.478 1.478 0 00-.093 0z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    overflow: "visible",
    color: "#000",
    fontFamily: "Bitstream Vera Sans",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    className: "warning",
    d: "M8.87 8a.863.863 0 00-.876.875v6.25c0 .492.383.875.875.875h6.25a.863.863 0 00.875-.875v-6.25A.863.863 0 0015.12 8zm2.124 1h2v2.5s0 .5-.5.5h-1c-.5 0-.5-.5-.5-.5zm.5 4h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#bebebe",
    fill: "#f57900"
  })));
  return render(rest, ...restArgs);
};
const Memo$4k = memo(SvgMailMarkImportantSymbolic);
var mail_mark_important_symbolic_default = Memo$4k;

const SvgMailMarkJunkSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11.275.074A1 1 0 0010.9 0H5.102a1 1 0 00-.71.295l-4.1 4.1a1 1 0 00-.293.706L0 10.898a1 1 0 00.294.71l4.1 4.1a1 1 0 00.706.293L10.898 16a1 1 0 00.71-.294l4.1-4.1a1 1 0 00.293-.706L16 5.102a1 1 0 00-.294-.71l-4.1-4.1a1 1 0 00-.331-.218zM10.485 2L14 5.515v4.97L10.485 14h-4.97L2 10.485v-4.97L5.515 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.994 4h2v3l-.25 2H7.275l-.28-2zm1 5.75a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4l = memo(SvgMailMarkJunkSymbolic);
var mail_mark_junk_symbolic_default = Memo$4l;

const SvgMailMarkNotjunkSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.1 0a1 1 0 00-.707.293l-4.1 4.1A1 1 0 000 5.1v5.8a1 1 0 00.293.707l4.1 4.1A1 1 0 005.1 16h3.894a1 1 0 100-2H5.516L2 10.484V5.516L5.516 2h4.968L14 5.514l-.006 3.484a1 1 0 102 .004l.006-3.9a1 1 0 00-.293-.71l-4.1-4.099A1 1 0 0010.9 0z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.994 4h2v3l-.25 2H7.275l-.28-2zm1 5.75a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M10.994 11h1.375l1.125 1.094L14.588 11h1.406v1.469L14.9 13.53l1.094 1.063V16h-1.437l-1.063-1.063L12.432 16h-1.438v-1.406l1.063-1.063-1.063-1.062z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4m = memo(SvgMailMarkNotjunkSymbolic);
var mail_mark_notjunk_symbolic_default = Memo$4m;

const SvgMailMessageNewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 10v2h-2v2h2v2h2v-2h2v-2h-2v-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.979 3.99a1 1 0 00-.604 1.791L8 10.281l5.625-4.5a1 1 0 10-1.25-1.562L8 7.719l-4.375-3.5a1 1 0 00-.646-.229z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 3a1 1 0 00-1 1v9a1 1 0 001 1h7v-2H3V5h10v4h2V4a1 1 0 00-1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4n = memo(SvgMailMessageNewSymbolic);
var mail_message_new_symbolic_default = Memo$4n;

const SvgMailReadSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.001",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.875.001a1 1 0 00-.5.25l-4.906 4a1 1 0 00-.062.031s-.326.298-.657.75c-.223.306-.352.832-.5 1.313a1 1 0 00-.031.031A1 1 0 001 6.94v.03a1 1 0 000 .032 1 1 0 000 .156v7.844a1 1 0 001 1h12a1 1 0 001-1V7.157a1 1 0 000-.156 1 1 0 00-.218-.656 1 1 0 00-.032-.031 5.087 5.087 0 00-1.125-2 1 1 0 00-.03-.032L8.624.252a1 1 0 00-.656-.25 1 1 0 00-.094 0zM8 2.282l4.313 3.532.031.03c.021.026.18.25.344.5L8 9.877 3.313 6.345c.026-.04.035-.087.062-.125.191-.262.319-.414.344-.438l.031-.03zM3 7.376l4.688 3.531.312.22.313-.22L13 7.377V14H3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.5,
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$4o = memo(SvgMailReadSymbolic);
var mail_read_symbolic_default = Memo$4o;

const SvgMailRepliedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 5H7c-.265 0-.53.093-.719.281l-3 3L3 8.562v.875l.281.282 3 3c.188.188.454.281.72.281h1v-1c0-.265-.094-.53-.282-.719L5.438 9l2.28-2.281c.189-.188.282-.454.282-.72V5z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 4v2.5c0 .84-.66 1.5-1.5 1.5H5v2h5.5c1.921 0 3.5-1.579 3.5-3.5V4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4p = memo(SvgMailRepliedSymbolic);
var mail_replied_symbolic_default = Memo$4p;

const SvgMailReplyAllSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7 6v2h2.994s.791.014 1.553.395c.761.38 1.447.938 1.447 2.605v2h2v-2c0-2.333-1.314-3.775-2.553-4.395C11.203 5.986 9.994 6 9.994 6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 3.022v1c0 .257-.13.529-.313.719l-2.28 2.281 2.28 2.281c.183.19.313.462.313.72v1H5c-.31 0-.552-.091-.75-.282L.594 7.022 4.25 3.303c.198-.19.44-.28.75-.28z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 3.022v1c0 .257-.13.529-.313.719l-2.28 2.281 2.28 2.281c.183.19.313.462.313.72v1H9c-.31 0-.552-.091-.75-.282L4.594 7.022 8.25 3.303c.198-.19.44-.28.75-.28z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4q = memo(SvgMailReplyAllSymbolic);
var mail_reply_all_symbolic_default = Memo$4q;

const SvgMailReplySenderSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 6v2h4.994s.791.014 1.553.395c.761.38 1.447.938 1.447 2.605v2h2v-2c0-2.333-1.314-3.775-2.553-4.395C10.203 5.986 8.994 6 8.994 6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 3.022v1c0 .257-.13.529-.313.719l-2.28 2.281 2.28 2.281c.183.19.313.462.313.72v1H6c-.31 0-.552-.091-.75-.282L1.594 7.022 5.25 3.303c.198-.19.44-.28.75-.28z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4r = memo(SvgMailReplySenderSymbolic);
var mail_reply_sender_symbolic_default = Memo$4r;

const SvgMailSendReceiveSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M9 7V6c0-.265-.093-.53-.281-.719l-3-3L5.438 2h-.875l-.282.281-3 3a1.015 1.015 0 00-.28.719L1 7h1c.265 0 .53-.093.719-.281L5 4.438l2.281 2.28c.188.189.454.282.72.282h1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible",
    fill: "#474747"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 4v7h2V4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#474747"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 8v1c0 .265-.093.53-.281.719l-3 3-.281.281h-.875l-.282-.281-3-3A1.015 1.015 0 017.001 9L7 8h1c.265 0 .53.093.719.281L11 10.562l2.281-2.28c.188-.189.454-.282.72-.282h1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible",
    fill: "#474747"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 4v7h2V4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$4s = memo(SvgMailSendReceiveSymbolic);
var mail_send_receive_symbolic_default = Memo$4s;

const SvgMailSendSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M16 2L0 7l3.5 2.656L14.563 2.97 5.25 10.656l4.281 3.156z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 8.5v6.102l2.83-2.475-.66-.754L4 12.396V8.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4t = memo(SvgMailSendSymbolic);
var mail_send_symbolic_default = Memo$4t;

const SvgMailUnreadSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.979 3.99a1 1 0 00-.604 1.791L8 10.281l5.625-4.5a1 1 0 10-1.25-1.562L8 7.719l-4.375-3.5a1 1 0 00-.646-.229z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 3a1 1 0 00-1 1v9a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1zm1 2h10v7H3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4u = memo(SvgMailUnreadSymbolic);
var mail_unread_symbolic_default = Memo$4u;

const SvgMarkLocationSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.003",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 0a5 5 0 00-5 5c0 .173.014.332.031.5.014.167.036.336.063.5C3.666 9.514 6 12.003 8 14.003c2-2 4.334-4.489 4.906-8.003.027-.164.05-.333.063-.5.017-.168.031-.327.031-.5a5 5 0 00-5-5zm0 3a2 2 0 110 4 2 2 0 010-4z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$4v = memo(SvgMarkLocationSymbolic);
var mark_location_symbolic_default = Memo$4v;

const SvgMediaEjectSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.987 3a1 1 0 00-.692.293l-4 4A1 1 0 004.002 9h8a1 1 0 00.707-1.707l-4-4A1 1 0 007.987 3zm.015 2.414L9.588 7H6.416zm-5 5.584l-.004 2 1 .002 8 .014 1 .002.004-2-1-.002-8-.014z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 8v1h1V8zM3.002 8v1h1V8zm1 0l4-4 4 4z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4w = memo(SvgMediaEjectSymbolic);
var media_eject_symbolic_default = Memo$4w;

const SvgMediaFlashSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.563 2C3.714 2 3 2.714 3 3.563v8.874C3 13.287 3.714 14 4.563 14h7.875c.848 0 1.562-.714 1.562-1.563V4.532L11.563 2zM5 4h6.125l.875.938V12H5z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "sans-serif",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontSize: "xx-small",
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.938 5A.938.938 0 006 5.938v2.03c0 .518.42.938.938.938H7V6h1v2.906h2.063c.517 0 .937-.42.937-.937V5.937A.938.938 0 0010.063 5H10v3.031H9V5z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4x = memo(SvgMediaFlashSymbolic);
var media_flash_symbolic_default = Memo$4x;

const SvgMediaFloppySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.969 1A1.984 1.984 0 001 2.969v9.469l.313.28L3 14.407V3h10v10h-2v2h2.031A1.984 1.984 0 0015 13.031V2.97A1.984 1.984 0 0013.031 1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "sans-serif",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontSize: "xx-small",
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 9c-.554 0-1 .446-1 1v4c0 .554.446 1 1 1h4c.554 0 1-.446 1-1v-4c0-.554-.446-1-1-1zm0 1h2v4H5z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4y = memo(SvgMediaFloppySymbolic);
var media_floppy_symbolic_default = Memo$4y;

const SvgMediaOpticalBdSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1C4.158 1 1 4.158 1 8s3.158 7 7 7 7-3.158 7-7-3.158-7-7-7zm0 4c1.68 0 3 1.32 3 3s-1.32 3-3 3-3-1.32-3-3 1.32-3 3-3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 6c-1.099 0-2 .901-2 2s.901 2 2 2 2-.901 2-2-.901-2-2-2zm0 1c.558 0 1 .442 1 1s-.442 1-1 1-1-.442-1-1 .442-1 1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4z = memo(SvgMediaOpticalBdSymbolic);
var media_optical_bd_symbolic_default = Memo$4z;

const SvgMediaOpticalCdAudioSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1C4.158 1 1 4.158 1 8s3.158 7 7 7 7-3.158 7-7-3.158-7-7-7zm0 4c1.68 0 3 1.32 3 3s-1.32 3-3 3-3-1.32-3-3 1.32-3 3-3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 6c-1.099 0-2 .901-2 2s.901 2 2 2 2-.901 2-2-.901-2-2-2zm0 1c.558 0 1 .442 1 1s-.442 1-1 1-1-.442-1-1 .442-1 1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4A = memo(SvgMediaOpticalCdAudioSymbolic);
var media_optical_cd_audio_symbolic_default = Memo$4A;

const SvgMediaOpticalDvdSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1C4.158 1 1 4.158 1 8s3.158 7 7 7 7-3.158 7-7-3.158-7-7-7zm0 4c1.68 0 3 1.32 3 3s-1.32 3-3 3-3-1.32-3-3 1.32-3 3-3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 6c-1.099 0-2 .901-2 2s.901 2 2 2 2-.901 2-2-.901-2-2-2zm0 1c.558 0 1 .442 1 1s-.442 1-1 1-1-.442-1-1 .442-1 1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4B = memo(SvgMediaOpticalDvdSymbolic);
var media_optical_dvd_symbolic_default = Memo$4B;

const SvgMediaOpticalSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1C4.157 1 1 4.158 1 8s3.157 7 7 7c3.842 0 7-3.158 7-7s-3.158-7-7-7zm0 4c1.68 0 3 1.32 3 3s-1.32 3-3 3-3-1.32-3-3 1.32-3 3-3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 6c-1.1 0-2 .901-2 2s.901 2 2 2c1.098 0 2-.901 2-2s-.902-2-2-2zm0 1c.558 0 1 .442 1 1s-.442 1-1 1-1-.442-1-1 .442-1 1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4C = memo(SvgMediaOpticalSymbolic);
var media_optical_symbolic_default = Memo$4C;

const SvgMediaPlaybackPauseSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.002 4h3v8h-3zm5 0h3v8h-3z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$4D = memo(SvgMediaPlaybackPauseSymbolic);
var media_playback_pause_symbolic_default = Memo$4D;

const SvgMediaPlaybackStartSymbolicRtl = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M10.967 3a1 1 0 0 0-.467.13l-6.996 4a1 1 0 0 0 0 1.74l6.996 4a1 1 0 0 0 1.498-.87V4a1 1 0 0 0-1.03-1zm-.969 2.725v4.55L6.018 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    "white-space": "normal",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10.998 12h1v1h-1zM10.998 3h1v1h-1zM10.998 4L4 8l6.998 4z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4E = memo(SvgMediaPlaybackStartSymbolicRtl);
var media_playback_start_symbolic_rtl_default = Memo$4E;

const SvgMediaPlaybackStartSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.022 3a1 1 0 00-1.02 1v8a1 1 0 001.496.87l6.999-4a1 1 0 000-1.74l-6.999-4A1 1 0 005.022 3zm.98 2.725L9.982 8l-3.98 2.275z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.002 12h-1v1h1zm0-9h-1v1h1zm0 1L12 8l-6.998 4z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4F = memo(SvgMediaPlaybackStartSymbolic);
var media_playback_start_symbolic_default = Memo$4F;

const SvgMediaPlaybackStopSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.002 4h8v8h-8z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$4G = memo(SvgMediaPlaybackStopSymbolic);
var media_playback_stop_symbolic_default = Memo$4G;

const SvgMediaPlaylistConsecutiveSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.018 7v2H14V7z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.99 4.99a1 1 0 00-.697 1.717L12.586 8l-1.293 1.293a1 1 0 101.414 1.414L15.414 8l-2.707-2.707a1 1 0 00-.717-.303z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 5h1v1h-1zm0 5h1v1h-1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4H = memo(SvgMediaPlaylistConsecutiveSymbolic);
var media_playlist_consecutive_symbolic_default = Memo$4H;

const SvgMediaPlaylistRepeatSongSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.98 8.99a1 1 0 00-.687.303L6.586 12l2.707 2.707a1 1 0 101.414-1.414L9.414 12l1.293-1.293a1 1 0 00-.726-1.717z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1 9.005V10c0 1.645 1.356 3 3 3h1v-2H4c-.571 0-1-.429-1-1v-.983zM9.008 5H12c.572 0 1 .429 1 1v4c0 .571-.428 1-1 1H8v2h4c1.645 0 3-1.355 3-3V6c0-1.645-1.355-3-3-3H9.02z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 9h1v1h-1zm0 5h1v1h-1zM4 0a4 4 0 100 8 4 4 0 000-8zM3 2h2v4H3V4H2V3z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4I = memo(SvgMediaPlaylistRepeatSongSymbolic);
var media_playlist_repeat_song_symbolic_default = Memo$4I;

const SvgMediaPlaylistRepeatSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.98 8.99a1 1 0 00-.687.303L6.586 12l2.707 2.707a1 1 0 101.414-1.414L9.414 12l1.293-1.293a1 1 0 00-.726-1.717z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 3C2.356 3 1 4.355 1 6v4c0 1.645 1.356 3 3 3h1v-2H4c-.571 0-1-.429-1-1V6c0-.571.429-1 1-1h8c.572 0 1 .429 1 1v4c0 .571-.428 1-1 1H8v2h4c1.645 0 3-1.355 3-3V6c0-1.645-1.355-3-3-3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 9h1v1h-1zm0 5h1v1h-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4J = memo(SvgMediaPlaylistRepeatSymbolic);
var media_playlist_repeat_symbolic_default = Memo$4J;

const SvgMediaPlaylistShuffleSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1 3v2h3c.572 0 1 .429 1 1v4c0 1.645 1.356 3 3 3h6v-2H8c-.571 0-1-.429-1-1V6c0-1.645-1.355-3-3-3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.99 8.99a1 1 0 00-.697 1.717L12.586 12l-1.293 1.293a1 1 0 101.414 1.414L15.414 12l-2.707-2.707a1 1 0 00-.717-.303zm0-8a1 1 0 00-.697 1.717L12.586 4l-1.293 1.293a1 1 0 101.414 1.414L15.414 4l-2.707-2.707A1 1 0 0011.99.99z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 3c-.23 0-.44.044-.656.094.481.55.861 1.177 1.031 1.906H14V3H8zm-7 8v2h3c.23 0 .44-.044.656-.094-.481-.55-.861-1.177-1.031-1.906z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Andale Mono",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 9h1v1h-1zm0 5h1v1h-1zm0-13h1v1h-1zm0 5h1v1h-1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4K = memo(SvgMediaPlaylistShuffleSymbolic);
var media_playlist_shuffle_symbolic_default = Memo$4K;

const SvgMediaRecordSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M13 8c0-2.77-2.23-5-5-5S3 5.23 3 8s2.23 5 5 5 5-2.23 5-5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$4L = memo(SvgMediaRecordSymbolic);
var media_record_symbolic_default = Memo$4L;

const SvgMediaRemovableSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 6v5.062C12 13.798 10.216 16 8 16s-4-2.202-4-4.938V6zM5 1v4h6V1zm1 1h1v1H6zm3 0h1v1H9z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$4M = memo(SvgMediaRemovableSymbolic);
var media_removable_symbolic_default = Memo$4M;

const SvgMediaSeekBackwardSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.97 4a1 1 0 00-.484.143l-5 3a1 1 0 000 1.714l5 3A1 1 0 008 11V5a1 1 0 00-1.03-1zM6 6.766v2.468L3.943 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 11h1v1H7zm0-7h1v1H7z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M13.97 4a1 1 0 00-.484.143l-5 3a1 1 0 000 1.714l5 3A1 1 0 0015 11V5a1 1 0 00-1.03-1zM13 6.766v2.468L10.943 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14 11h1v1h-1zm0-7h1v1h-1zM7 5L2 8l5 3zm7 0L9 8l5 3z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4N = memo(SvgMediaSeekBackwardSymbolic);
var media_seek_backward_symbolic_default = Memo$4N;

const SvgMediaSeekForwardSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.04 4A1 1 0 008 5v6a1 1 0 001.514.857l5-3a1 1 0 000-1.714l-5-3A1 1 0 009.04 4zM10 6.768L12.055 8 10 9.232z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 11H8v1h1zm0-7H8v1h1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.04 4A1 1 0 001 5v6a1 1 0 001.514.857l5-3a1 1 0 000-1.714l-5-3A1 1 0 002.04 4zM3 6.768L5.055 8 3 9.232z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 11H1v1h1zm0-7H1v1h1zm7 1l5 3-5 3zM2 5l5 3-5 3z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4O = memo(SvgMediaSeekForwardSymbolic);
var media_seek_forward_symbolic_default = Memo$4O;

const SvgMediaSkipBackwardSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.002 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.002 5l-5 3 5 3zm7 0l-5 3 5 3z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.973 4a1 1 0 00-.484.143l-5 3a1 1 0 000 1.714l5 3A1 1 0 009.002 11V5a1 1 0 00-1.029-1zm-.97 2.766v2.468L4.945 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 3.998l-2 .004.002 1 .014 6 .004 1 2-.004-.004-1-.014-6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.002 11h1v1h-1zm0-7h1v1h-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14.973 4a1 1 0 00-.484.143l-5 3a1 1 0 000 1.714l5 3A1 1 0 0016.002 11V5a1 1 0 00-1.029-1zm-.97 2.766v2.468L11.945 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15.002 11h1v1h-1zm0-7h1v1h-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4P = memo(SvgMediaSkipBackwardSymbolic);
var media_skip_backward_symbolic_default = Memo$4P;

const SvgMediaSkipForwardSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.002 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.04 4A1 1 0 007 5v6a1 1 0 001.514.857l5-3a1 1 0 000-1.714l-5-3A1 1 0 008.04 4zM9 6.768L11.055 8 9 9.232z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14.002 3.998l-.002 1-.013 6-.004 1 2 .004.004-1 .013-6 .002-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 11H7v1h1zm0-7H7v1h1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.04 4A1 1 0 000 5v6a1 1 0 001.514.857l5-3a1 1 0 000-1.714l-5-3A1 1 0 001.04 4zM2 6.768L4.055 8 2 9.232z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1 11H0v1h1zm0-7H0v1h1zm7 1l5 3-5 3zM1 5l5 3-5 3z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4Q = memo(SvgMediaSkipForwardSymbolic);
var media_skip_forward_symbolic_default = Memo$4Q;

const SvgMediaTapeSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.5 3A2.495 2.495 0 000 5.5v6C0 12.885 1.115 14 2.5 14h11c1.385 0 2.5-1.115 2.5-2.5v-6C16 4.115 14.885 3 13.5 3zm2 3C5.875 6 7 7.125 7 8.5c0 .565-.212 1.08-.531 1.5h3.062c-.318-.42-.53-.935-.53-1.5A2.505 2.505 0 0111.5 6C12.874 6 14 7.125 14 8.5S12.874 11 11.5 11h-7A2.508 2.508 0 012 8.5C2 7.125 3.124 6 4.5 6zm0 1C3.666 7 3 7.666 3 8.5S3.666 10 4.5 10C5.335 10 6 9.334 6 8.5S5.335 7 4.5 7zm7 0c-.834 0-1.5.666-1.5 1.5s.666 1.5 1.5 1.5c.835 0 1.5-.666 1.5-1.5S12.335 7 11.5 7z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$4R = memo(SvgMediaTapeSymbolic);
var media_tape_symbolic_default = Memo$4R;

const SvgMediaViewSubtitlesSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 2A2.495 2.495 0 001 4.5v5c0 1.385 1.115 2.52 2.5 2.5h6.375L13 15v-3.063A2.486 2.486 0 0015 9.5v-5C15 3.115 13.885 2 12.5 2zM3 7h4v1H3zm5 0h5v1H8zM3 9h2v1H3zm3 0h5v1H6zm6 0h1v1h-1z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$4S = memo(SvgMediaViewSubtitlesSymbolic);
var media_view_subtitles_symbolic_default = Memo$4S;

const SvgMediaZipSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1S1 1 1 3v11c0 .554.446 1 1 1h12c.554 0 1-.446 1-1V3s0-2-2-2h-1v2h1v10H3V3h1V1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.5 1h5c.277 0 .5.223.5.5v3c0 .277-.223.5-.5.5h-5a.499.499 0 01-.5-.5v-3c0-.277.223-.5.5-.5z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4T = memo(SvgMediaZipSymbolic);
var media_zip_symbolic_default = Memo$4T;

const SvgMicrophoneDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 213.531,228.469 -1.061,1.061 14,14 1.062,-1.062 z",
    transform: "translate(-212 -228)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 220,228 c -1.662,0 -3,1.338 -3,3 v 1.64453 l 5.2832,5.2832 C 222.72383,237.4058 223,236.73965 223,236 v -5 c 0,-1.662 -1.338,-3 -3,-3 z m -6,6 v 2.00977 c 0,2.96574 2.16538,5.4238 5,5.90039 V 244 h 2 v -2.08984 c 0.64598,-0.10861 1.24984,-0.33194 1.80859,-0.62891 l -1.11132,-1.11133 C 221.17391,240.38 220.60353,240.5 220,240.5 c -2.50669,0 -4.5,-1.99014 -4.5,-4.49023 V 234 Z m 10.5,0 v 2.00977 c 0,1.15729 -0.44099,2.19439 -1.14844,2.98632 l 1.05274,1.05274 C 225.38802,238.9836 226,237.57264 226,236.00977 V 234 Z m -7.5,1.47266 V 236 c 0,1.662 1.338,3 3,3 0.16422,0 0.3216,-0.0237 0.47852,-0.0488 z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    transform: "translate(-212 -228)"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4U = memo(SvgMicrophoneDisabledSymbolic);
var microphone_disabled_symbolic_default = Memo$4U;

const SvgMicrophoneHardwareDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 220,248 c -1.662,0 -3,1.338 -3,3 v 4 h 6 v -4 c 0,-1.662 -1.338,-3 -3,-3 z m -6,6 v 1 h 1.5 v -1 z m 10.5,0 v 1 h 1.5 v -1 z m -8.95312,6 c 0.88748,0.98341 2.08853,1.68073 3.45312,1.91016 V 264 h 2 v -2.08984 c 1.36459,-0.22943 2.56564,-0.92675 3.45312,-1.91016 h -2.41406 c -0.61304,0.30957 -1.29807,0.5 -2.03906,0.5 -0.74099,0 -1.42602,-0.19043 -2.03906,-0.5 z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.35,
    transform: "translate(-212 -248)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 212,256.00012 h 16.00001 V 259 H 212 Z",
    transform: "translate(-212 -248)"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4V = memo(SvgMicrophoneHardwareDisabledSymbolic);
var microphone_hardware_disabled_symbolic_default = Memo$4V;

const SvgMicrophoneSensitivityHighSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 119,-19 v 3 h 2 v -3 z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    transform: "translate(-112 32)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 119.9998,-32 c 1.662,0 3,1.338 3,3 v 5 c 0,1.662 -1.338,3 -3,3 -1.662,0 -3,-1.338 -3,-3 v -5 c 0,-1.662 1.338,-3 3,-3 z",
    transform: "translate(-112 32)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 114,-26 v 2.009766 c 0,3.306582 2.68969,5.990234 6,5.990234 3.31031,0 6,-2.683652 6,-5.990234 V -26 h -1.5 v 2.009766 c 0,2.500097 -1.99331,4.490234 -4.5,4.490234 -2.50669,0 -4.5,-1.990137 -4.5,-4.490234 V -26 Z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    transform: "translate(-112 32)"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4W = memo(SvgMicrophoneSensitivityHighSymbolic);
var microphone_sensitivity_high_symbolic_default = Memo$4W;

const SvgMicrophoneSensitivityLowSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 159,-19 v 3 h 2 v -3 z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    transform: "translate(-152 32)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 160,-32 c -1.662,0 -3,1.338 -3,3 v 5 c 0,1.662 1.338,3 3,3 1.662,0 3,-1.338 3,-3 v -5 c 0,-1.662 -1.338,-3 -3,-3 z m 0,2 c 0.554,0 1,0.446 1,1 v 5 c 0,0.554 -0.446,1 -1,1 -0.554,0 -1,-0.446 -1,-1 v -5 c 0,-0.554 0.446,-1 1,-1 z",
    opacity: 0.35,
    transform: "translate(-152 32)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 154,-26 v 2.009766 c 0,3.306582 2.68969,5.990234 6,5.990234 3.31031,0 6,-2.683652 6,-5.990234 V -26 h -1.5 v 2.009766 c 0,2.500097 -1.99331,4.490234 -4.5,4.490234 -2.50669,0 -4.5,-1.990137 -4.5,-4.490234 V -26 Z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    transform: "translate(-152 32)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 157,-25 v 1 c 0,1.662 1.338,3 3,3 1.662,0 3,-1.338 3,-3 v -1 z",
    transform: "translate(-152 32)"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4X = memo(SvgMicrophoneSensitivityLowSymbolic);
var microphone_sensitivity_low_symbolic_default = Memo$4X;

const SvgMicrophoneSensitivityMediumSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 139,-19 v 3 h 2 v -3 z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    transform: "translate(-132 32)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 140,-32 c -1.662,0 -3,1.338 -3,3 v 5 c 0,1.662 1.338,3 3,3 1.662,0 3,-1.338 3,-3 v -5 c 0,-1.662 -1.338,-3 -3,-3 z m 0,2 c 0.554,0 1,0.446 1,1 v 5 c 0,0.554 -0.446,1 -1,1 -0.554,0 -1,-0.446 -1,-1 v -5 c 0,-0.554 0.446,-1 1,-1 z",
    opacity: 0.35,
    transform: "translate(-132 32)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 134,-26 v 2.009766 c 0,3.306582 2.68969,5.990234 6,5.990234 3.31031,0 6,-2.683652 6,-5.990234 V -26 h -1.5 v 2.009766 c 0,2.500097 -1.99331,4.490234 -4.5,4.490234 -2.50669,0 -4.5,-1.990137 -4.5,-4.490234 V -26 Z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    transform: "translate(-132 32)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 137,-27 v 3 c 0,1.662 1.338,3 3,3 1.662,0 3,-1.338 3,-3 v -3 z",
    transform: "translate(-132 32)"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4Y = memo(SvgMicrophoneSensitivityMediumSymbolic);
var microphone_sensitivity_medium_symbolic_default = Memo$4Y;

const SvgMicrophoneSensitivityMutedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 180,-32 c -1.662,0 -3,1.338 -3,3 v 5 c 0,1.662 1.338,3 3,3 0.7733,0 1.46912,-0.29821 2,-0.775391 V -22 h 0.22461 C 182.70179,-22.530877 183,-23.226703 183,-24 v -5 c 0,-1.662 -1.338,-3 -3,-3 z m 0,2 c 0.554,0 1,0.446 1,1 v 5 c 0,0.554 -0.446,1 -1,1 -0.554,0 -1,-0.446 -1,-1 v -5 c 0,-0.554 0.446,-1 1,-1 z m -6,4 v 2.009766 c 0,2.965746 2.16538,5.423806 5,5.90039 V -16 h 2 v -2.089844 c 0.34423,-0.05788 0.67819,-0.14804 1,-0.261718 v -1.626954 c -0.60326,0.297084 -1.27508,0.478516 -2,0.478516 -2.50669,0 -4.5,-1.990137 -4.5,-4.490234 V -26 Z m 10.5,0 v 2.009766 c 0,0.721017 -0.18244,1.38955 -0.47852,1.990234 h 1.62891 C 185.87165,-22.623635 186,-23.290791 186,-23.990234 V -26 Z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.35,
    transform: "translate(-172 32)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 183,-21 h 1.375 L 185.5,-19.90625 186.59375,-21 H 188 v 1.46875 l -1.09375,1.0625 1.09375,1.0625 V -16 h -1.4375 L 185.5,-17.0625 184.4375,-16 H 183 v -1.40625 l 1.0625,-1.0625 -1.0625,-1.0625 z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    transform: "translate(-172 32)"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4Z = memo(SvgMicrophoneSensitivityMutedSymbolic);
var microphone_sensitivity_muted_symbolic_default = Memo$4Z;

const SvgModemSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11.105 10c-.781.648-1.68 1.518-3.065 2.01L1 12v3h14v-3l-2-2zm-.605 1.797a.7.7 0 01.703.703c0 .39-.314.703-.703.703a.702.702 0 01-.703-.703.7.7 0 01.703-.703zm2 .023a.679.679 0 110 1.36.678.678 0 01-.68-.68c0-.377.303-.68.68-.68z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.446 3.054c.328 0 .595.263.595.595v.039a7.37 7.37 0 01-7.37 7.35h-.019a.6.6 0 01-.595-.614V8.582c0-.34.274-.614.614-.614H5.9c.34 0 .614.274.614.614v.288a5.507 5.507 0 003.358-3.36h-.287a.613.613 0 01-.615-.614V3.669c0-.34.274-.615.615-.615h1.862z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$4_ = memo(SvgModemSymbolic);
var modem_symbolic_default = Memo$4_;

const SvgMultimediaPlayerAppleIpodTouchSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469 1C4.648 1 4 1.648 4 2.469V13.53c0 .822.648 1.47 1.469 1.47h5.125c.82 0 1.469-.648 1.469-1.469V2.47c0-.821-.648-1.469-1.47-1.469zM5 2h6.063v11H5z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$4$ = memo(SvgMultimediaPlayerAppleIpodTouchSymbolic);
var multimedia_player_apple_ipod_touch_symbolic_default = Memo$4$;

const SvgMultimediaPlayerSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.469 1C3.648 1 3 1.648 3 2.469V13.53c0 .822.648 1.47 1.469 1.47h7.062c.821 0 1.469-.648 1.469-1.469V2.47C13 1.648 12.352 1 11.531 1zM4 2h8v5H4zm4 6a3 3 0 110 6 3 3 0 010-6z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.5 11A1.5 1.5 0 018 12.5 1.5 1.5 0 016.5 11 1.5 1.5 0 018 9.5 1.5 1.5 0 019.5 11z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$50 = memo(SvgMultimediaPlayerSymbolic);
var multimedia_player_symbolic_default = Memo$50;

const SvgMultimediaVolumeControlSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 5h2.484l2.97-3H8v12h-.475l-3.04-3H2z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14 8c0-2.166-.739-4.02-2-5h-1v2c.607.789 1 1.76 1 3 0 1.241-.393 2.22-1 3v2h1c1.223-.995 2-2.873 2-5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 8c0-1.257-.312-2.216-1-3H9v6h1c.672-.837 1-1.742 1-3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$51 = memo(SvgMultimediaVolumeControlSymbolic);
var multimedia_volume_control_symbolic_default = Memo$51;

const SvgNetworkCellular2GSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.063 0A2.048 2.048 0 000 2.063v11.874C0 15.088.912 16 2.063 16h11.874A2.048 2.048 0 0016 13.937V2.063A2.048 2.048 0 0013.937 0zM4 3h1s.459-.014.947.23C6.436 3.475 7 4.167 7 5v2a1 1 0 01-.2.6L4.25 11H7v2H2v-2a1 1 0 01.2-.6L5 6.666V5H4v2H2V5c0-.833.564-1.525 1.053-1.77C3.54 2.986 4 3 4 3zm6 0h2c.833 0 1.525.564 1.77 1.053.244.488.23.947.23.947v1h-2V5h-2v6h2V9h-1V7h3v4s.014.459-.23.947C13.525 12.436 12.833 13 12 13h-2s-.459.014-.947-.23C8.564 12.525 8 11.833 8 11V5s-.014-.459.23-.947C8.475 3.564 9.167 3 10 3z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$52 = memo(SvgNetworkCellular2GSymbolic);
var network_cellular_2g_symbolic_default = Memo$52;

const SvgNetworkCellular3GSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.063 0A2.048 2.048 0 000 2.063v11.874C0 15.088.912 16 2.063 16h11.874A2.048 2.048 0 0016 13.937V2.063A2.048 2.048 0 0013.937 0zM2 3h4a1 1 0 01.875 1.438L5.5 7.217c.355.116.75.196.969.438C6.8 8.022 7 8.466 7 9v2c0 1.112-.907 2-2 2H2v-2h3V9H4a1 1 0 01-.875-1.438L4.375 5H2zm8 0h2c.833 0 1.525.564 1.77 1.053.244.488.23.947.23.947v1h-2V5h-2v6h2V9h-1V7h3v4s.014.459-.23.947C13.525 12.436 12.833 13 12 13h-2s-.459.014-.947-.23C8.564 12.525 8 11.833 8 11V5s-.014-.459.23-.947C8.475 3.564 9.167 3 10 3z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$53 = memo(SvgNetworkCellular3GSymbolic);
var network_cellular_3g_symbolic_default = Memo$53;

const SvgNetworkCellular4GSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.063 0A2.048 2.048 0 000 2.063v11.874C0 15.088.912 16 2.063 16h11.874A2.048 2.048 0 0016 13.937V2.063A2.048 2.048 0 0013.937 0zM2 3h2v4h1V3h2v10H5V9H4c-1 0-2-.842-2-2zm8 0h2c.833 0 1.525.564 1.77 1.053.244.488.23.947.23.947v1h-2V5h-2v6h2V9h-1V7h3v4s.014.459-.23.947C13.525 12.436 12.833 13 12 13h-2s-.459.014-.947-.23C8.564 12.525 8 11.833 8 11V5s-.014-.459.23-.947C8.475 3.564 9.167 3 10 3z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$54 = memo(SvgNetworkCellular4GSymbolic);
var network_cellular_4g_symbolic_default = Memo$54;

const SvgNetworkCellularAcquiringSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1.01v6h2v5h-2v3h3V.99zM8 3.99v3h3v-3zm-4 2v1h3v-1zm-3.979 4l-.021 5h3.021v-3h-2v-2zm3.979 2v3h3v-3zm4 0v3h3v-3z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 9.5A1.5 1.5 0 013.5 11 1.5 1.5 0 012 9.5 1.5 1.5 0 013.5 8 1.5 1.5 0 015 9.5zm4 0A1.5 1.5 0 017.5 11 1.5 1.5 0 016 9.5 1.5 1.5 0 017.5 8 1.5 1.5 0 019 9.5zm4 0a1.5 1.5 0 01-1.5 1.5A1.5 1.5 0 0110 9.5 1.5 1.5 0 0111.5 8 1.5 1.5 0 0113 9.5z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$55 = memo(SvgNetworkCellularAcquiringSymbolic);
var network_cellular_acquiring_symbolic_default = Memo$55;

const SvgNetworkCellularConnectedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 1c-1.01.005-1 1-1 1v11c0 1 1 1 1 1h4c1 0 1-1 1-1V5c0-.554-.446-1-1-1H7V2s-.009-.994-1-1zm0 4h4v3.031L6 8zm0 4h1v1h1V9h1v1h1v1H9v1h1v1H9v-1H8v1H7v-1H6v-1h1v-1H6zm1 2v1h1v-1zm1 0h1v-1H8z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M16 5v1c0 .257-.13.528-.313.719L14.408 8l1.28 1.281c.183.19.313.462.313.719v1h-1c-.31 0-.552-.09-.75-.281L11.594 8l2.656-2.719c.198-.19.44-.281.75-.281zM0 5v1c0 .257.13.528.313.719L1.593 8 .314 9.281C.13 9.471 0 9.743 0 10v1h1c.31 0 .552-.09.75-.281L4.406 8 1.75 5.281C1.552 5.091 1.31 5 1 5z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$56 = memo(SvgNetworkCellularConnectedSymbolic);
var network_cellular_connected_symbolic_default = Memo$56;

const SvgNetworkCellularDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12.016 1v10.586l3 3V1zm-4 3v3.586l3 3V4zm-4 3v8h3V9.414L4.6 7zm-4 3v5h3v-5zm8 .414V15h3v-1.586zm4 4V15h.585z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.53.47L.469 1.53l14 14 1.062-1.061z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$57 = memo(SvgNetworkCellularDisabledSymbolic);
var network_cellular_disabled_symbolic_default = Memo$57;

const SvgNetworkCellularEdgeSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.062 0C.912 0 0 .912 0 2.063v11.874C0 15.088.912 16 2.062 16h11.875A2.048 2.048 0 0016 13.937V2.063A2.048 2.048 0 0013.937 0zM6 3h6v2H6v2h6v2H6v2h6v2H6c-.625 0-.994-.241-1.344-.563-.33-.304-.644-.79-.625-1.437H4V5h.031c-.013-.475.11-1 .469-1.406.354-.401.934-.583 1.5-.563z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$58 = memo(SvgNetworkCellularEdgeSymbolic);
var network_cellular_edge_symbolic_default = Memo$58;

const SvgNetworkCellularGprsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.063 0A2.048 2.048 0 000 2.063v11.874C0 15.088.912 16 2.063 16h11.874A2.048 2.048 0 0016 13.937V2.063A2.048 2.048 0 0013.937 0zm4 3.031h4c.833 0 1.525.564 1.769 1.053s.23.947.23.947v1h-2v-1h-4v6h4v-2H8v-2h4.063v4s.013.459-.231.948c-.244.488-.936 1.052-1.77 1.052h-4s-.458.014-.947-.23c-.488-.244-1.053-.936-1.053-1.77v-6s-.013-.459.231-.947c.244-.489.936-1.053 1.77-1.053z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$59 = memo(SvgNetworkCellularGprsSymbolic);
var network_cellular_gprs_symbolic_default = Memo$59;

const SvgNetworkCellularHardwareDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 164,249 v 1.5 4.5 h 3 v -4.5 -1.5 z m -4,3 v 1.5 1.5 h 3 v -1.5 -1.5 z m -8,8 v 1.5 1.5 h 3 v -1.5 -1.5 z m 4,0 v 1.5 1.5 h 3 v -1.5 -1.5 z m 4,0 v 1.5 1.5 h 3 v -1.5 -1.5 z m 4,0 v 1.5 1.5 h 3 v -1.5 -1.5 z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.35,
    fillRule: "evenodd",
    transform: "translate(-152 -248)"
  }), /* @__PURE__ */ createElement("path", {
    d: "M 151.99995,256.00012 H 168 V 259 h -16.00005 z",
    transform: "translate(-152 -248)"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5a = memo(SvgNetworkCellularHardwareDisabledSymbolic);
var network_cellular_hardware_disabled_symbolic_default = Memo$5a;

const SvgNetworkCellularHspaSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.063 0A2.048 2.048 0 000 2.063v11.874C0 15.088.912 16 2.063 16h11.874A2.048 2.048 0 0016 13.937V2.063A2.048 2.048 0 0013.937 0zm2 3h2v4H10V3h2v10h-2V9H6.062v4h-2z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$5b = memo(SvgNetworkCellularHspaSymbolic);
var network_cellular_hspa_symbolic_default = Memo$5b;

const SvgNetworkCellularNoRouteSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1v14h3V1zM8 4v.018c.068 0 .137-.016.205-.012a4 4 0 012.623 1.166c.063.063.114.133.172.2V4zm.102 2.004c-.034-.002-.068.006-.102.006v.039c.074.003.15 0 .223.008-.045-.005-.077-.05-.121-.053zM4 7v1c0-.343.053-.677.137-1zm5.959.61zM4 9v6h2.281A1.962 1.962 0 016 14c0-.387.222-.691.418-1H6v-3c0-.387.222-.691.418-1zm4.793.758C8.539 9.873 8.286 10 8 10v.113l.666-.236c.057-.02.073-.094.127-.12zM0 10v5h3v-5zm11 .578a4.693 4.693 0 01-1 .78V13h-.418c.196.309.418.613.418 1 0 .364-.106.704-.281 1H11v-1.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    overflow: "visible",
    opacity: 0.35,
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.153 5.005A2.992 2.992 0 005 7.999h2c0-.407.24-.768.617-.924a.994.994 0 011.09.217.994.994 0 01.216 1.09.994.994 0 01-.923.617 1 1 0 00-1 1v2h2v-1.18a2.998 2.998 0 001.771-1.671 3.006 3.006 0 00-.65-3.27 3.001 3.001 0 00-1.97-.873zM8 12.999a1 1 0 00-1 1 1 1 0 001 1 1 1 0 001-1 1 1 0 00-1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5c = memo(SvgNetworkCellularNoRouteSymbolic);
var network_cellular_no_route_symbolic_default = Memo$5c;

const SvgNetworkCellularOfflineSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1v8.938h3V1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.35,
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 4v11h2l.014-5.063H11V4z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35,
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 7v8h3V7zm-4 3v5h3v-5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.35,
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 11h1.375l1.125 1.094L14.594 11H16v1.469l-1.094 1.062L16 14.594V16h-1.438L13.5 14.937 12.437 16H11v-1.406l1.063-1.063L11 12.47z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5d = memo(SvgNetworkCellularOfflineSymbolic);
var network_cellular_offline_symbolic_default = Memo$5d;

const SvgNetworkCellularSignalExcellentSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1v14h3V1zM8 4v11h3V4zM4 7v8h3V7zm-4 3v5h3v-5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible",
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$5e = memo(SvgNetworkCellularSignalExcellentSymbolic);
var network_cellular_signal_excellent_symbolic_default = Memo$5e;

const SvgNetworkCellularSignalGoodSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747",
    fillRule: "evenodd"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1v14h3V1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 3.992V15h3V3.992zM4 7v8h3V7zm-4 3v5h3v-5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5f = memo(SvgNetworkCellularSignalGoodSymbolic);
var network_cellular_signal_good_symbolic_default = Memo$5f;

const SvgNetworkCellularSignalNoneSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 4v11h3V4zm4-3v14h3V1zM4 7v8h3V7zm-4 3v5h3v-5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible",
    opacity: 0.35,
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$5g = memo(SvgNetworkCellularSignalNoneSymbolic);
var network_cellular_signal_none_symbolic_default = Memo$5g;

const SvgNetworkCellularSignalOkSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747",
    fillRule: "evenodd"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1v14h3V1zM8 4v11h3V4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 7v8h3V7zm-4 3v5h3v-5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5h = memo(SvgNetworkCellularSignalOkSymbolic);
var network_cellular_signal_ok_symbolic_default = Memo$5h;

const SvgNetworkCellularSignalWeakSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747",
    fillRule: "evenodd"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1v14h3V1zM8 4v11h3V4zM4 7v8h3V7z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M0 10v5h3v-5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5i = memo(SvgNetworkCellularSignalWeakSymbolic);
var network_cellular_signal_weak_symbolic_default = Memo$5i;

const SvgNetworkCellularSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 1c-1.261.98-2 2.833-2 5 0 2.127.777 4.005 2 5h1V9c-.607-.78-1-1.759-1-3s.393-2.211 1-3V1zm11 0v2c.607.789 1 1.759 1 3s-.393 2.22-1 3v2h1c1.223-.995 2-2.873 2-5 0-2.167-.739-4.02-2-5zM4 3c-.688.784-1 1.743-1 3s.328 2.163 1 3h1V3zm7 0v6h1c.672-.837 1-1.743 1-3s-.312-2.216-1-3zM8 4a2 2 0 100 4 2 2 0 000-4zm0 5a1 1 0 00-1 1v6h2v-6a1 1 0 00-1-1z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$5j = memo(SvgNetworkCellularSymbolic);
var network_cellular_symbolic_default = Memo$5j;

const SvgNetworkErrorSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M10 1v1c0 .257.13.529.313.719L11.593 4H7c-.528-.007-1 .472-1 1s.472 1.007 1 1h4.625l-1.219 1.281c-.182.19-.406.462-.406.719v.426c.62-.377 1.909-.507 2.48-.395L15.406 5 11.75 1.281C11.552 1.091 11.31 1 11 1zM5 7c-.31 0-.615.09-.812.281L.594 11l3.656 3.719c.198.19.44.281.75.281h1v-1c0-.257-.13-.529-.312-.719L4.406 12h3.625c.022-.277.113-1 .723-2H4.375l1.219-1.281C5.776 8.529 6 8.257 6 8V7z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35,
    fill: "#474747"
  }), /* @__PURE__ */ createElement("path", {
    className: "error",
    d: "M12.5 9a3.5 3.5 0 100 7 3.5 3.5 0 000-7zM10 11.969h5V13h-5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#ef2929"
  })));
  return render(rest, ...restArgs);
};
const Memo$5k = memo(SvgNetworkErrorSymbolic);
var network_error_symbolic_default = Memo$5k;

const SvgNetworkIdleSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M11 9c.31 0 .615-.09.813-.281L15.406 5 11.75 1.281C11.552 1.091 11.31 1 11 1h-1v1c0 .257.13.529.313.719L11.593 4H7c-.528-.007-1 .472-1 1s.472 1.007 1 1h4.625l-1.219 1.281c-.182.19-.406.462-.406.719v1zM5 7c-.31 0-.615.09-.812.281L.594 11l3.656 3.719c.198.19.44.281.75.281h1v-1c0-.257-.13-.529-.312-.719L4.406 12H9c.528.007 1-.472 1-1s-.472-1.007-1-1H4.375l1.219-1.281C5.777 8.529 6 8.257 6 8V7z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35,
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$5l = memo(SvgNetworkIdleSymbolic);
var network_idle_symbolic_default = Memo$5l;

const SvgNetworkNoRouteSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M10 1v1c0 .257.13.529.313.719L11.593 4H8.23a4.034 4.034 0 013.273 2h.123l-.074.078c.27.495.449 1.047.482 1.647l.002.029v.027c0 .265-.021.516-.052.762L15.406 5 11.75 1.281C11.552 1.091 11.31 1 11 1zM7 4c-.294-.004-.559.15-.746.371.416-.2.871-.321 1.348-.371zM4.068 7.406L.594 11l3.656 3.719c.198.19.44.281.75.281h1v-1c0-.257-.13-.529-.312-.719L4.406 12h1.971a1.723 1.723 0 01-.34-1.04 2.77 2.77 0 01.18-.96H4.375l.98-1.031H4.09l-.053-.944a3.717 3.717 0 01.031-.619z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.848 4.969c1.642-.092 3.096 1.17 3.188 2.812 0 1.402-.378 1.922-1.594 2.844-.191.144-.326.25-.375.313-.05.062-.031.033-.031.03.007.529-.472 1-1 1-.529 0-1.007-.471-1-1 0-.502.224-.943.468-1.25a3.82 3.82 0 01.72-.687c.203-.16.46-.384.687-.656.093-.112.129-.308.125-.438v-.03a.988.988 0 00-1.063-.938c-.563.031-.969.437-.937 1h-2c-.092-1.643 1.17-2.908 2.812-3zm.188 8a1 1 0 110 2 1 1 0 010-2z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5m = memo(SvgNetworkNoRouteSymbolic);
var network_no_route_symbolic_default = Memo$5m;

const SvgNetworkOfflineSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 7c-.31 0-.615.09-.812.281L.594 11l3.656 3.719c.198.19.44.281.75.281h1v-1c0-.257-.13-.529-.312-.719L4.406 12H9s1 0 1-1c0 0 0-1-1-1H4.375l1.219-1.281C5.776 8.529 6 8.257 6 8V7z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 11h1.375l1.125 1.094L14.594 11H16v1.469l-1.094 1.062L16 14.594V16h-1.438L13.5 14.937 12.437 16H11v-1.406l1.063-1.063L11 12.47z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 9c.31 0 .615-.09.813-.281L15.406 5 11.75 1.281C11.552 1.091 11.31 1 11 1h-1v1c0 .257.13.529.313.719L11.593 4H7c-.528-.007-1 .472-1 1s.472 1.007 1 1h4.625l-1.219 1.281c-.182.19-.406.462-.406.719v1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$5n = memo(SvgNetworkOfflineSymbolic);
var network_offline_symbolic_default = Memo$5n;

const SvgNetworkReceiveSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 7c-.31 0-.615.09-.813.281L.594 11l3.656 3.719c.198.19.44.281.75.281h1v-1c0-.257-.13-.529-.313-.719L4.407 12H9c.528.007 1-.472 1-1s-.472-1.007-1-1H4.375l1.219-1.281C5.776 8.529 6 8.257 6 8V7z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 9c.31 0 .615-.09.812-.281L15.406 5 11.75 1.281C11.552 1.091 11.31 1 11 1h-1v1c0 .257.13.529.312.719L11.594 4H7c-.528-.007-1 .472-1 1s.472 1.007 1 1h4.625l-1.219 1.281c-.182.19-.406.462-.406.719v1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$5o = memo(SvgNetworkReceiveSymbolic);
var network_receive_symbolic_default = Memo$5o;

const SvgNetworkServerSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.5 14h13c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-13a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 0C3.91 0 3 .91 3 2v8c0 1.09.91 2 2 2h6c1.09 0 2-.91 2-2V2c0-1.09-.91-2-2-2zm0 2h6v8H5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 3h4v1H6zm3 2h1v1H9zm-2 6h2v4H7z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5p = memo(SvgNetworkServerSymbolic);
var network_server_symbolic_default = Memo$5p;

const SvgNetworkTransmitReceiveSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 7c-.31 0-.615.09-.813.281L.594 11l3.656 3.719c.198.19.44.281.75.281h1v-1c0-.257-.13-.529-.313-.719L4.407 12H9c.528.007 1-.472 1-1s-.472-1.007-1-1H4.375l1.219-1.281C5.776 8.529 6 8.257 6 8V7zm6 2c.31 0 .615-.09.812-.281L15.406 5 11.75 1.281C11.552 1.091 11.31 1 11 1h-1v1c0 .257.13.529.312.719L11.594 4H7c-.528-.007-1 .472-1 1s.472 1.007 1 1h4.625l-1.219 1.281c-.182.19-.406.462-.406.719v1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$5q = memo(SvgNetworkTransmitReceiveSymbolic);
var network_transmit_receive_symbolic_default = Memo$5q;

const SvgNetworkTransmitSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11 9c.31 0 .615-.09.813-.281L15.406 5 11.75 1.281C11.552 1.091 11.31 1 11 1h-1v1c0 .257.13.529.313.719L11.593 4H7c-.528-.007-1 .472-1 1s.472 1.007 1 1h4.625l-1.219 1.281c-.182.19-.406.462-.406.719v1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 7c-.31 0-.615.09-.812.281L.594 11l3.656 3.719c.198.19.44.281.75.281h1v-1c0-.257-.13-.529-.312-.719L4.406 12H9c.528.007 1-.472 1-1s-.472-1.007-1-1H4.375l1.219-1.281C5.777 8.529 6 8.257 6 8V7z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$5r = memo(SvgNetworkTransmitSymbolic);
var network_transmit_symbolic_default = Memo$5r;

const SvgNetworkVpnAcquiringSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1C6.355 1 5 2.355 5 4v1H4v1.01h8V5h-1V4c0-1.645-1.355-3-3-3zm0 2c.564 0 1 .436 1 1v1H7V4c0-.564.436-1 1-1zm-4 8v1.01h3V13H2v2h12v-2H9v-.99h3V11z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.5
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 8.5A1.5 1.5 0 013.5 10 1.5 1.5 0 012 8.5 1.5 1.5 0 013.5 7 1.5 1.5 0 015 8.5zm4 0A1.5 1.5 0 017.5 10 1.5 1.5 0 016 8.5 1.5 1.5 0 017.5 7 1.5 1.5 0 019 8.5zm4 0a1.5 1.5 0 01-1.5 1.5A1.5 1.5 0 0110 8.5 1.5 1.5 0 0111.5 7 1.5 1.5 0 0113 8.5z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5s = memo(SvgNetworkVpnAcquiringSymbolic);
var network_vpn_acquiring_symbolic_default = Memo$5s;

const SvgNetworkVpnNoRouteSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1a3 3 0 00-3 3v.361c.396-.45.893-.818 1.469-1.056a3.925 3.925 0 011.271-.27A.988.988 0 018 3c.035 0 .069.01.104.014.033 0 .066-.008.1-.006.968.05 1.91.45 2.624 1.164.063.063.114.133.172.199V4a3.003 3.003 0 00-3-3zM4 5v2c0-.72.204-1.402.55-2zm7.453 0a4.002 4.002 0 01.242 3.531c-.337.815-.97 1.397-1.695 1.826V11h2V5zm-3.351.004a1.993 1.993 0 00-.868.148c.317-.13.656-.133.987-.095-.044-.005-.075-.05-.12-.053zm-1.405.498A2.227 2.227 0 006.305 6h.002c.108-.184.238-.353.392-.498h-.002zm3.069.56zM4 8v3h2V9c0-.387.222-.691.418-1zm4.793.756C8.539 8.87 8.287 9 8 9v.115l.664-.236c.058-.02.073-.098.129-.123zM2 13v2h6c-1.093 0-2-.907-2-2zm6 2h6v-2h-4c0 1.093-.907 2-2 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.152 4.006A2.992 2.992 0 005 7h2c0-.408.24-.768.617-.924a.994.994 0 011.09.217.994.994 0 01.217 1.09A.994.994 0 018 8a1 1 0 00-1 1v2h2V9.82a2.998 2.998 0 001.771-1.672 3.006 3.006 0 00-.65-3.27 3.001 3.001 0 00-1.969-.872zM8 12a1 1 0 00-1 1 1 1 0 001 1 1 1 0 001-1 1 1 0 00-1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5t = memo(SvgNetworkVpnNoRouteSymbolic);
var network_vpn_no_route_symbolic_default = Memo$5t;

const SvgNetworkVpnSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7 10v3h2v-3zm-5 3v2h12v-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 5h8v6H4z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 1s-.709-.014-1.447.355C5.814 1.725 5 2.667 5 4v3h2V4c0-.667.186-.725.447-.855C7.71 3.014 8 3 8 3s.291.014.553.145c.261.13.447.188.447.855v3h2V4c0-1.333-.814-2.275-1.553-2.645C8.71.986 8 1 8 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5u = memo(SvgNetworkVpnSymbolic);
var network_vpn_symbolic_default = Memo$5u;

const SvgNetworkWiredAcquiringSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.04 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M0 10.988h5.016v4.972H0zm5.024-9.96h5.016V6H5.024zm6 10h5.016V16h-5.016z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.542 7.04c.829 0 1.496.668 1.496 1.497v.005c0 .829-.667 1.496-1.496 1.496a1.493 1.493 0 01-1.496-1.496v-.005c0-.829.667-1.496 1.496-1.496zm4 0c.829 0 1.496.668 1.496 1.497v.005c0 .829-.667 1.496-1.496 1.496a1.493 1.493 0 01-1.496-1.496v-.005c0-.829.667-1.496 1.496-1.496z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    display: "block",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.542 7.04c.829 0 1.496.668 1.496 1.497v.005c0 .829-.667 1.496-1.496 1.496a1.493 1.493 0 01-1.496-1.496v-.005c0-.829.667-1.496 1.496-1.496zm4 0c.829 0 1.496.668 1.496 1.497v.005c0 .829-.667 1.496-1.496 1.496a1.493 1.493 0 01-1.496-1.496v-.005c0-.829.667-1.496 1.496-1.496z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    display: "block",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5v = memo(SvgNetworkWiredAcquiringSymbolic);
var network_wired_acquiring_symbolic_default = Memo$5v;

const SvgNetworkWiredDisconnectedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#bebebe"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 1v5h2v2H2.031v3H0v4.938h5V11H3.031V9H12v.984h1V8H8V6h2V1z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 11h1.375l1.125 1.094L14.594 11H16v1.469l-1.094 1.062L16 14.594V16h-1.438L13.5 14.937 12.437 16H11v-1.406l1.063-1.063L11 12.47V11z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5w = memo(SvgNetworkWiredDisconnectedSymbolic);
var network_wired_disconnected_symbolic_default = Memo$5w;

const SvgNetworkWiredNoRouteSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 1v4.361c.396-.45.893-.818 1.469-1.056a3.99 3.99 0 011.734-.297c.63.032 1.244.227 1.797.547V1zm3 5.01c-.26 0-.52.04-.766.142.247-.102.507-.115.766-.103zM2.031 8v3H0v4.938h5V11H3.031V9H4V8zM9.98 8a1.96 1.96 0 01.001 0zm2.011 0c0 .334-.034.67-.119 1h1.098v2H11v4.938h5V11h-2.031V9.984H14V8z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.152 5.006A2.992 2.992 0 005 8h2c0-.408.24-.768.617-.924a.994.994 0 011.09.217.994.994 0 01.217 1.09A.994.994 0 018 9a1 1 0 00-1 1v2h2v-1.18a2.998 2.998 0 001.771-1.672 3.006 3.006 0 00-.65-3.27 3.001 3.001 0 00-1.969-.872zM8 13a1 1 0 00-1 1 1 1 0 001 1 1 1 0 001-1 1 1 0 00-1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5x = memo(SvgNetworkWiredNoRouteSymbolic);
var network_wired_no_route_symbolic_default = Memo$5x;

const SvgNetworkWiredOfflineSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 1v5h2v2H2.031v3H0v4.938h5V11H3.031V9H12v.984h1V8H8V6h2V1z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 11h1.375l1.125 1.094L14.594 11H16v1.469l-1.094 1.062L16 14.594V16h-1.438L13.5 14.937 12.437 16H11v-1.406l1.063-1.063L11 12.47z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5y = memo(SvgNetworkWiredOfflineSymbolic);
var network_wired_offline_symbolic_default = Memo$5y;

const SvgNetworkWiredSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M0 11h5v4.938H0zm10 0h5v5h-5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.03 8v3.531h1V9H12v2.531h1V8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 5v3.5h1V5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 1h5v5H5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5z = memo(SvgNetworkWiredSymbolic);
var network_wired_symbolic_default = Memo$5z;

const SvgNetworkWirelessAcquiringSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M10 13a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.32
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 2C5.186 2 2.828 3 1 4.586V6h1.48C4 4.736 5.7 4 8 4c2.3 0 4 .78 5.52 2H15V4.62C13.36 3.153 10.814 2 8 2z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.32
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 5c-1.504 0-2.86.36-3.875 1h7.688C10.791 5.373 9.462 5 8 5z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.32
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.496 6.996h.016c.829 0 1.496.667 1.496 1.496v.016c0 .829-.667 1.496-1.496 1.496h-.016A1.493 1.493 0 012 8.508v-.016c0-.829.667-1.496 1.496-1.496zm4 0h.016c.829 0 1.496.667 1.496 1.496v.016c0 .829-.667 1.496-1.496 1.496h-.016A1.493 1.493 0 016 8.508v-.016c0-.829.667-1.496 1.496-1.496zm4.008 0c.833 0 1.504.667 1.504 1.496v.016c0 .829-.67 1.496-1.504 1.496A1.497 1.497 0 0110 8.508v-.016c0-.829.67-1.496 1.504-1.496z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    display: "block",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5A = memo(SvgNetworkWirelessAcquiringSymbolic);
var network_wireless_acquiring_symbolic_default = Memo$5A;

const SvgNetworkWirelessConnectedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("defs", null, /* @__PURE__ */ createElement("clipPath", {
    id: "a"
  }, /* @__PURE__ */ createElement("path", {
    d: "M-73-30l-7-7v-4.5h16.5v4.5l-7.5 7z",
    fill: "none",
    stroke: "#000"
  }))), /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    clipPath: "url(#a)",
    d: "M-72-38v1h1v-.969A12.13 12.13 0 00-72-38zm1 1v1h1v-1zm1 0h1v-.594a9.508 9.508 0 00-1-.218zm1 0v1h1v-1zm1 0h.5c-.165-.084-.327-.145-.5-.219zm0 1v1h1v-1zm1 0h1v1h1a7.865 7.865 0 00-2-1.719zm2 1v1h-1v1h-1v1h-1v1h-1v1h-1v-1h-1v1h-1v-1h-1v1h-1v-1h-1v-1h-1v-1h-1v-1h-1v-1h-.563c-1.565 1.851-.437 4.376-.437 7 0 5.215 1.39 6 7 6s7-.784 7-6c0-2.374 1.296-5.441 0-7zm-13 0h1v-1h-.563c-.144.124-.3.242-.437.375zm1-1h1v-1h-.063a8.017 8.017 0 00-.937.563zm1-1h1v-.5c-.346.125-.68.303-1 .469zm1 0v1h1v-1zm1 0h1v-.938a8.79 8.79 0 00-1 .157zm1 0v1h1v-1zm1 1v1h1v-1zm1 1v1h1v-1zm1 0h1v-1h-1zm1 0v1h1v-1zm1 1v1h1v-1zm1 0h1v-1h-1zm-1 1h-1v1h1zm-1 1h-1v1h1zm-1 0v-1h-1v1zm-1 0h-1v1h1zm-1 0v-1h-1v1zm-1 0h-1v1h1zm-1 0v-1h-1v1zm-1-1v-1h-1v1zm-1-1v-1h-1v1zm0-1h1v-1h-1zm1 0v1h1v-1zm1 0h1v-1h-1zm1 0v1h1v-1zm1 1v1h1v-1zm-1 0h-1v1h1zm3 1h1v-1h-1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    transform: "translate(80 40)",
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 13a2 2 0 11-4 0 2 2 0 014 0z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5B = memo(SvgNetworkWirelessConnectedSymbolic);
var network_wireless_connected_symbolic_default = Memo$5B;

const SvgNetworkWirelessDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 2c-1.817 0-3.44.42-4.857 1.143l1.51 1.51C5.632 4.232 6.72 4 8 4c2.3 0 4 .78 5.52 2H15V4.62C13.36 3.152 10.814 2 8 2zM1.62 4.092c-.212.158-.42.321-.62.494V6h1.48c.194-.161.39-.313.59-.457zM8 5c-.94 0-1.815.148-2.592.408L7.08 7.08C7.37 7.03 7.674 7 8 7c1.241 0 2.22.394 3 1h2V7c-.995-1.223-2.873-2-5-2zM3.777 6.25A4.196 4.196 0 003 7v1h2c.1-.077.212-.14.318-.209zM8 8l2 2h1V9c-.837-.672-1.743-1-3-1zm-2.06.412A3.773 3.773 0 005 9v1h2.527zM8 11a2 2 0 101.896 1.37l-1.263-1.265A2 2 0 008 11z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.531.469L.47 1.53l14 14 1.062-1.062z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5C = memo(SvgNetworkWirelessDisabledSymbolic);
var network_wireless_disabled_symbolic_default = Memo$5C;

const SvgNetworkWirelessEncryptedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 7h10c.554 0 1 .446 1 1v3c0 .554-.446 1-1 1H3c-.554 0-1-.446-1-1V8c0-.554.446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 10h12v4H2z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 1C5.355 1 4 2.355 4 4v6c0 1.645 1.355 3 3 3h2c1.645 0 3-1.355 3-3V4c0-1.645-1.355-3-3-3zm0 2h2c.571 0 1 .429 1 1v6c0 .571-.429 1-1 1H7c-.571 0-1-.429-1-1V4c0-.571.429-1 1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5D = memo(SvgNetworkWirelessEncryptedSymbolic);
var network_wireless_encrypted_symbolic_default = Memo$5D;

const SvgNetworkWirelessHardwareDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M 178.26953,260 A 1.9999995,1.9999995 0 0 0 178,261 a 1.9999995,1.9999995 0 0 0 2,2 1.9999995,1.9999995 0 0 0 2,-2 1.9999995,1.9999995 0 0 0 -0.27148,-1 z",
    opacity: 0.35,
    transform: "translate(-172 -248)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 179.99999,250.00027 c -2.81422,0 -5.17173,1 -7,2.58557 v 1.41443 h 1.48072 c 1.51928,-1.26466 3.21936,-2 5.51928,-2 2.29992,0 4,0.77953 5.51928,2 h 1.48072 v -1.38128 c -1.64044,-1.46575 -4.18578,-2.61872 -7,-2.61872 z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35,
    transform: "translate(-172 -248)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 180,253 c -2.16664,0 -4.01982,0.73878 -5,2 h 5 5 c -0.99478,-1.2229 -2.8734,-2 -5,-2 z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35,
    transform: "translate(-172 -248)"
  }), /* @__PURE__ */ createElement("path", {
    d: "m 172,256 h 16 v 3 h -16 z",
    transform: "translate(-172 -248)"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5E = memo(SvgNetworkWirelessHardwareDisabledSymbolic);
var network_wireless_hardware_disabled_symbolic_default = Memo$5E;

const SvgNetworkWirelessHotspotSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    className: "warning",
    d: "M3 1C1 1 1 3 1 3v10c0 2 2 2 2 2l10-.094C15 14.888 15 13 15 13V3c0-2-2-2-2-2zm5 2.031c1.814 0 3.629.618 5 1.875V6h-1.813c-1.842-1.41-4.53-1.41-6.373 0H3V4.906C4.371 3.65 6.186 3.031 8 3.031zm0 3.063c1.044 0 2.08.337 2.875 1 .043.018.085.04.125.062V8H5v-.813c.039-.033.08-.065.125-.093.795-.663 1.831-1 2.875-1zM8 9a2 2 0 110 4 2 2 0 010-4z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#f57900"
  })));
  return render(rest, ...restArgs);
};
const Memo$5F = memo(SvgNetworkWirelessHotspotSymbolic);
var network_wireless_hotspot_symbolic_default = Memo$5F;

const SvgNetworkWirelessNoRouteSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.152 4.006A2.992 2.992 0 005 7h2c0-.408.24-.768.617-.924a.994.994 0 011.09.217.994.994 0 01.217 1.09A.994.994 0 018 8a1 1 0 00-1 1v2h2V9.82a2.998 2.998 0 001.771-1.672 3.006 3.006 0 00-.65-3.27 3.001 3.001 0 00-1.969-.872zM8 12a1 1 0 00-1 1 1 1 0 001 1 1 1 0 001-1 1 1 0 00-1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 2C5.186 2 2.828 3 1 4.586V6h1.48a8.659 8.659 0 012.354-1.426 3.983 3.983 0 011.635-1.27 4.004 4.004 0 014.736 1.305c.84.344 1.599.816 2.315 1.391H15V4.62C13.36 3.152 10.814 2 8 2zm.096 3.004a1.994 1.994 0 00-.862.148c.317-.13.656-.133.987-.095-.043-.005-.074-.05-.117-.053h-.008zm-1.399.498A2.227 2.227 0 006.305 6h.002c.108-.184.238-.353.392-.498h-.002zm-2.56.502A4.38 4.38 0 003 7v1h1V7c0-.342.054-.674.137-.996zm7.732.027c.16.64.17 1.316.002 1.969H13V7c-.3-.369-.688-.69-1.13-.969zm-2.103.031c.213.407.263.878.173 1.33a1.994 1.994 0 00-.173-1.33zM6.254 8.273c-.465.164-.881.4-1.254.727v1h1V9c0-.275.119-.504.254-.727zm2.539.483C8.539 8.87 8.287 9 8 9v.115l.664-.236c.058-.02.073-.098.129-.123zM11 9.578a4.233 4.233 0 01-.47.422H11z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$5G = memo(SvgNetworkWirelessNoRouteSymbolic);
var network_wireless_no_route_symbolic_default = Memo$5G;

const SvgNetworkWirelessOfflineSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11 11h1.375l1.125 1.094L14.594 11H16v1.469l-1.094 1.062L16 14.594V16h-1.438L13.5 14.937 12.437 16H11v-1.406l1.062-1.063L11 12.47z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 13a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 2C5.186 2 2.828 3 1 4.586V6h1.48C4 4.736 5.7 4 8 4c2.3 0 4 .78 5.52 2H15V4.62C13.36 3.153 10.814 2 8 2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 5c-2.167 0-4.02.739-5 2v1h2c.789-.606 1.759-1 3-1s2.22.394 3 1h2V7c-.995-1.223-2.873-2-5-2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 8c-1.257 0-2.216.312-3 1v1h6V9c-.837-.672-1.743-1-3-1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$5H = memo(SvgNetworkWirelessOfflineSymbolic);
var network_wireless_offline_symbolic_default = Memo$5H;

const SvgNetworkWirelessSignalExcellentSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M10 13a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 2C5.186 2 2.828 3 1 4.586V6h1.48C4 4.736 5.7 4 8 4c2.3 0 4 .78 5.52 2H15V4.62C13.36 3.153 10.814 2 8 2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 5c-2.167 0-4.02.739-5 2v1h2c.789-.606 1.759-1 3-1s2.22.394 3 1h2V7c-.995-1.223-2.873-2-5-2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 8c-1.257 0-2.216.312-3 1v1h6V9c-.837-.672-1.743-1-3-1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5I = memo(SvgNetworkWirelessSignalExcellentSymbolic);
var network_wireless_signal_excellent_symbolic_default = Memo$5I;

const SvgNetworkWirelessSignalGoodSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M10 13a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 2C5.186 2 2.828 3 1 4.586V6h1.48C4 4.736 5.7 4 8 4c2.3 0 4 .78 5.52 2H15V4.62C13.36 3.153 10.814 2 8 2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 5c-2.167 0-4.02.739-5 2v1h2c.789-.606 1.759-1 3-1s2.22.394 3 1h2V7c-.995-1.223-2.873-2-5-2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 8c-1.257 0-2.216.312-3 1v1h6V9c-.837-.672-1.743-1-3-1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5J = memo(SvgNetworkWirelessSignalGoodSymbolic);
var network_wireless_signal_good_symbolic_default = Memo$5J;

const SvgNetworkWirelessSignalNoneSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M10 13a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 2C5.186 2 2.828 3 1 4.586V6h1.48C4 4.736 5.7 4 8 4c2.3 0 4 .78 5.52 2H15V4.62C13.36 3.153 10.814 2 8 2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 5c-2.167 0-4.02.739-5 2v1h2c.789-.606 1.759-1 3-1s2.22.394 3 1h2V7c-.995-1.223-2.873-2-5-2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 8c-1.257 0-2.216.312-3 1v1h6V9c-.837-.672-1.743-1-3-1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$5K = memo(SvgNetworkWirelessSignalNoneSymbolic);
var network_wireless_signal_none_symbolic_default = Memo$5K;

const SvgNetworkWirelessSignalOkSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M10 13a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 2C5.186 2 2.828 3 1 4.586V6h1.48C4 4.736 5.7 4 8 4c2.3 0 4 .78 5.52 2H15V4.62C13.36 3.153 10.814 2 8 2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 5c-2.167 0-4.02.739-5 2v1h2c.789-.606 1.759-1 3-1s2.22.394 3 1h2V7c-.995-1.223-2.873-2-5-2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 8c-1.257 0-2.216.312-3 1v1h6V9c-.837-.672-1.743-1-3-1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5L = memo(SvgNetworkWirelessSignalOkSymbolic);
var network_wireless_signal_ok_symbolic_default = Memo$5L;

const SvgNetworkWirelessSignalWeakSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M10 13a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 2C5.186 2 2.828 3 1 4.586V6h1.48C4 4.736 5.7 4 8 4c2.3 0 4 .78 5.52 2H15V4.62C13.36 3.153 10.814 2 8 2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 5c-2.167 0-4.02.739-5 2v1h2c.789-.606 1.759-1 3-1s2.22.394 3 1h2V7c-.995-1.223-2.873-2-5-2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 8c-1.257 0-2.216.312-3 1v1h6V9c-.837-.672-1.743-1-3-1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$5M = memo(SvgNetworkWirelessSignalWeakSymbolic);
var network_wireless_signal_weak_symbolic_default = Memo$5M;

const SvgNetworkWirelessSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("defs", null, /* @__PURE__ */ createElement("clipPath", {
    id: "a"
  }, /* @__PURE__ */ createElement("path", {
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#bebebe",
    strokeWidth: 2,
    d: "M26.85 220.75h3.825v6.375H26.85z"
  })), /* @__PURE__ */ createElement("clipPath", {
    id: "b"
  }, /* @__PURE__ */ createElement("path", {
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#bebebe",
    strokeWidth: 2,
    d: "M26.966 221.282h2.898v5.313h-2.898z"
  })), /* @__PURE__ */ createElement("clipPath", {
    id: "c"
  }, /* @__PURE__ */ createElement("path", {
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#bebebe",
    strokeWidth: 2,
    d: "M26.999 221.502h1.876v4.878h-1.876z"
  }))), /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    transform: "matrix(0 -.78431 .94118 0 -202.765 31.059)",
    clipPath: "url(#a)",
    d: "M27.18 220.508a1.164 1.164 0 00-.81 1.998c.379.38.59.894.59 1.432 0 .537-.211 1.051-.59 1.431a1.164 1.164 0 101.644 1.645 4.352 4.352 0 001.275-3.077c0-1.153-.46-2.26-1.275-3.076a1.164 1.164 0 00-.834-.353z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    transform: "matrix(0 -1.72549 1.88219 0 -413.493 54.529)",
    clipPath: "url(#b)",
    d: "M27.186 221.123a.555.555 0 00-.387.953 2.632 2.632 0 010 3.723.555.555 0 10.785.785 3.743 3.743 0 000-5.293.555.555 0 00-.398-.168z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    transform: "matrix(0 -2.66667 2.86852 0 -634.374 78)",
    clipPath: "url(#c)",
    d: "M27.188 221.318a.362.362 0 00-.252.621 2.825 2.825 0 010 3.997.362.362 0 10.511.511 3.55 3.55 0 000-5.02.362.362 0 00-.26-.109z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 13a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5N = memo(SvgNetworkWirelessSymbolic);
var network_wireless_symbolic_default = Memo$5N;

const SvgNetworkWorkgroupSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.75 4C.798 4 0 4.798 0 5.75v4.5C0 11.202.798 12 1.75 12h.125l-.781 1.563L.375 15h9.25l-.719-1.437L8.125 12h.125c.952 0 1.75-.798 1.75-1.75v-4.5C10 4.798 9.202 4 8.25 4zM2 6h6v4H2z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.75 1C6.798 1 6 1.798 6 2.75V3h8v4h-3v3.25c0 .66-.252 1.27-.656 1.75h5.28l-1.5-3h.126C15.202 9 16 8.202 16 7.25v-4.5C16 1.798 15.202 1 14.25 1z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Andale Mono",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5O = memo(SvgNetworkWorkgroupSymbolic);
var network_workgroup_symbolic_default = Memo$5O;

const SvgNightLightSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.002937 16.005859",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-171.99974,-171.99414)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-171.99974,-107.99414)"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 180,111 c -2.74958,0 -5,2.25042 -5,5 0,2.74958 2.25042,5 5,5 2.74958,0 5,-2.25042 5,-5 0,-2.74958 -2.25042,-5 -5,-5 z m 0,2 c 0.18647,0 0.36631,0.0228 0.54297,0.0547 A 2,2 0 0 0 179,115 a 2,2 0 0 0 2,2 2,2 0 0 0 1.94531,-1.54688 C 182.97762,115.63096 183,115.8122 183,116 c 0,0.1965 -0.0213,0.38674 -0.0566,0.57227 a 3,3 0 0 1 -0.0215,0.0918 c -0.0342,0.15351 -0.0802,0.30197 -0.13672,0.44532 a 3,3 0 0 1 -0.0566,0.13281 c -0.0546,0.12079 -0.11806,0.23623 -0.1875,0.34765 a 3,3 0 0 1 -0.10937,0.16211 c -0.0731,0.10167 -0.15326,0.19763 -0.23829,0.28907 a 3,3 0 0 1 -0.10351,0.11132 3,3 0 0 1 -0.0293,0.0254 c -0.0914,0.0864 -0.18918,0.16588 -0.29102,0.24024 a 3,3 0 0 1 -0.14648,0.10351 3,3 0 0 1 -0.002,0.002 c -0.1198,0.0767 -0.24607,0.14385 -0.37695,0.20312 a 3,3 0 0 1 -0.11915,0.0527 c -0.14805,0.0593 -0.30193,0.1071 -0.46093,0.14258 a 3,3 0 0 1 -0.0918,0.0215 C 180.38674,118.97866 180.1965,119 180,119 c -0.1965,0 -0.38675,-0.0213 -0.57227,-0.0566 a 3,3 0 0 1 -0.0918,-0.0215 c -0.15351,-0.0343 -0.30197,-0.0802 -0.44531,-0.13672 a 3,3 0 0 1 -0.13281,-0.0566 c -0.1208,-0.0546 -0.23623,-0.11807 -0.34766,-0.1875 a 3,3 0 0 1 -0.16211,-0.10938 c -0.10167,-0.0731 -0.19763,-0.15326 -0.28906,-0.23828 a 3,3 0 0 1 -0.11133,-0.10352 3,3 0 0 1 -0.0254,-0.0293 c -0.0864,-0.0914 -0.16587,-0.18918 -0.24023,-0.29102 a 3,3 0 0 1 -0.10352,-0.14648 3,3 0 0 1 -0.002,-0.002 c -0.0767,-0.1198 -0.14385,-0.24607 -0.20312,-0.37695 a 3,3 0 0 1 -0.0527,-0.11914 c -0.0593,-0.14806 -0.1071,-0.30194 -0.14258,-0.46094 a 3,3 0 0 1 -0.0215,-0.0918 C 177.02134,116.38674 177,116.1965 177,116 c 0,-0.1965 0.0213,-0.38674 0.0566,-0.57227 a 3,3 0 0 1 0.0215,-0.0918 c 0.0342,-0.15351 0.0802,-0.30197 0.13672,-0.44532 a 3,3 0 0 1 0.0566,-0.13281 c 0.0546,-0.12079 0.11806,-0.23623 0.1875,-0.34765 a 3,3 0 0 1 0.10937,-0.16211 c 0.0731,-0.10167 0.15326,-0.19763 0.23829,-0.28907 a 3,3 0 0 1 0.10351,-0.11132 3,3 0 0 1 0.0293,-0.0254 c 0.0914,-0.0864 0.18918,-0.16588 0.29102,-0.24024 a 3,3 0 0 1 0.14648,-0.10351 3,3 0 0 1 0.002,-0.002 c 0.1198,-0.0767 0.24607,-0.14385 0.37695,-0.20312 a 3,3 0 0 1 0.11914,-0.0527 c 0.14806,-0.0593 0.30194,-0.1071 0.46094,-0.14258 a 3,3 0 0 1 0.0918,-0.0215 C 179.61325,113.02134 179.8035,113 180,113 Z",
    id: "circle5503",
    style: {
      color: "#000000",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "nonzero",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 56,
      strokeOpacity: 1,
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "M 179.49974,121.99414 H 180.5 c 0.277,0 0.5,0.223 0.5,0.5 V 123.5 c 0,0.277 -0.223,0.5 -0.5,0.5 h -1.00026 c -0.277,0 -0.5,-0.223 -0.5,-0.5 v -1.00586 c 0,-0.277 0.223,-0.5 0.5,-0.5 z m 6.50268,-5.50122 v -0.99414 c 0,-0.277 0.223,-0.5 0.5,-0.5 h 1.00026 c 0.277,0 0.5,0.223 0.5,0.5 v 0.99414 c 0,0.277 -0.223,0.5 -0.5,0.5 h -1.00026 c -0.277,0 -0.5,-0.223 -0.5,-0.5 z m -13.99974,0.006 v -1.00586 c 0,-0.277 0.223,-0.5 0.5,-0.5 h 0.99974 c 0.277,0 0.5,0.223 0.5,0.5 v 1.00586 c 0,0.277 -0.223,0.5 -0.5,0.5 h -0.99974 c -0.277,0 -0.5,-0.223 -0.5,-0.5 z m 11.89012,4.09309 0.70296,-0.70296 c 0.19587,-0.19587 0.51124,-0.19587 0.70711,0 l 0.70729,0.70729 c 0.19587,0.19586 0.19587,0.51123 0,0.7071 l -0.70296,0.70297 c -0.19587,0.19586 -0.51124,0.19586 -0.70711,0 l -0.70729,-0.70729 c -0.19587,-0.19587 -0.19587,-0.51124 0,-0.70711 z m -9.90346,-9.89517 0.71125,-0.71125 c 0.19587,-0.19587 0.51124,-0.19587 0.70711,0 l 0.70692,0.70692 c 0.19587,0.19587 0.19587,0.51124 0,0.70711 l -0.71125,0.71125 c -0.19586,0.19587 -0.51123,0.19587 -0.7071,0 l -0.70693,-0.70692 c -0.19587,-0.19587 -0.19587,-0.51124 0,-0.70711 z m 1.41646,9.19135 0.70296,0.70296 c 0.19587,0.19587 0.19587,0.51124 0,0.70711 l -0.70729,0.70729 c -0.19587,0.19587 -0.51124,0.19587 -0.7071,0 l -0.70297,-0.70296 c -0.19587,-0.19587 -0.19587,-0.51124 0,-0.70711 l 0.70729,-0.70729 c 0.19587,-0.19587 0.51124,-0.19587 0.70711,0 z m 9.89517,-9.90345 0.71125,0.71125 c 0.19587,0.19586 0.19587,0.51123 0,0.7071 l -0.70693,0.70693 c -0.19586,0.19586 -0.51123,0.19586 -0.7071,0 l -0.71125,-0.71126 c -0.19587,-0.19586 -0.19587,-0.51123 0,-0.7071 l 0.70692,-0.70692 c 0.19587,-0.19587 0.51124,-0.19587 0.70711,0 z m -5.80123,-1.99046 H 180.5 c 0.277,0 0.5,0.223 0.5,0.5 V 109.5 c 0,0.277 -0.223,0.5 -0.5,0.5 h -1.00026 c -0.277,0 -0.5,-0.223 -0.5,-0.5 v -1.00586 c 0,-0.277 0.223,-0.5 0.5,-0.5 z",
    id: "rect5521",
    style: {
      fill: "#2e3436",
      fillOpacity: 0.35,
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 56,
      strokeOpacity: 1
    }
  })), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-171.99974,-171.99414)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-171.99974,-107.99414)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-171.99974,-107.99414)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-171.99974,-107.99414)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-171.99974,-107.99414)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-171.99974,-107.99414)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-171.99974,-107.99414)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-171.99974,-107.99414)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-171.99974,-107.99414)"
  })));
  return render(rest, ...restArgs);
};
const Memo$5P = memo(SvgNightLightSymbolic);
var night_light_symbolic_default = Memo$5P;

const SvgNonStarredSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.974.126c-.477.01-.848.268-1.06.495a2.588 2.588 0 00-.447.683c-.225.464-.384.97-.543 1.452-.158.482-.318.941-.45 1.2-.02.041-.017.033-.035.062H1.842a.982 1.018 90 00-.975.698c-.233.743.1 1.226.37 1.647.27.422.609.817.952 1.203.343.385.688.756.949 1.061.26.306.422.608.392.52-.081-.244-.015.043-.116.392-.1.35-.27.807-.432 1.276-.163.468-.324.941-.4 1.427a2.255 2.255 0 00-.009.788c.053.296.227.69.592.934.36.242.772.27 1.074.235.303-.036.547-.124.786-.226.478-.203.928-.483 1.373-.764.444-.281.876-.565 1.217-.76.34-.193.665-.234.443-.235-.25 0 .072.036.403.233.331.196.751.483 1.183.767.432.284.868.566 1.335.773.233.104.475.195.78.232.305.037.735 0 1.091-.263a.982 1.018 90 00.117-.1c.513-.514.556-1.215.473-1.73-.082-.514-.266-.973-.442-1.414-.176-.44-.348-.86-.442-1.185-.093-.324-.073-.53-.076-.522-.053.159.088-.112.36-.377.275-.268.652-.598 1.026-.957.374-.36.75-.743 1.045-1.202.295-.46.56-1.098.31-1.79a.982 1.018 90 00-.962-.66h-3.595c-.02-.032-.02-.024-.043-.067-.141-.275-.317-.742-.495-1.23-.179-.488-.36-.997-.6-1.456-.12-.229-.25-.45-.466-.67-.215-.22-.593-.479-1.086-.469zm.049 2.798c.063.165.116.27.182.45.178.487.357.995.594 1.454.118.229.246.449.456.669.21.22.576.485 1.071.485h2.366c-.1.105-.148.184-.263.294-.33.317-.702.642-1.035.966-.333.324-.654.57-.852 1.153a.982 1.018 90 00-.002 0c-.207.618-.087 1.164.054 1.654s.338.95.504 1.365c.072.18.09.283.144.439-.16-.097-.275-.15-.453-.267-.408-.268-.839-.566-1.263-.818-.424-.251-.76-.522-1.465-.523-.693 0-1.048.26-1.482.509-.435.247-.879.541-1.299.807-.188.12-.314.176-.484.274.046-.147.06-.24.116-.4.154-.443.332-.916.463-1.375.132-.46.314-.859.093-1.52-.174-.521-.45-.805-.758-1.166-.307-.36-.658-.735-.977-1.094-.102-.114-.151-.194-.243-.303h2.26a.982 1.018 90 00.02 0c.463-.01.84-.252 1.063-.477a2.58 2.58 0 00.473-.689c.236-.469.4-.979.56-1.465.056-.171.102-.27.157-.427z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$5Q = memo(SvgNonStarredSymbolic);
var non_starred_symbolic_default = Memo$5Q;

const SvgNotificationsDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.97 1.975c-1.724 0-2.78.923-3.482 2.513l8.486 8.487h.996v-1c-.552 0-.891-.459-1-1l-1-5c-.53-2.5-1.79-4-4-4zm-4.078 4.39l-.922 4.61c-.108.541-.447 1-1 1v1h8.532zm4.254 7.61a1.5 1.5 0 001.412 1 1.5 1.5 0 001.412-1z",
    style: {
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.53.469L.47 1.53l14 14 1.062-1.062z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5R = memo(SvgNotificationsDisabledSymbolic);
var notifications_disabled_symbolic_default = Memo$5R;

const SvgObjectFlipHorizontalSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 7v2h10V7z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 4v1c0 .257.13.528.313.719L12.593 8l-2.28 2.281c-.183.19-.313.462-.313.719v1h1c.31 0 .552-.09.75-.281L15.406 8 11.75 4.281C11.552 4.091 11.31 4 11 4zM6 4v1c0 .257-.13.528-.312.719L3.406 8l2.282 2.281c.182.19.312.462.312.719v1H5c-.31 0-.552-.09-.75-.281L.594 8 4.25 4.281C4.448 4.091 4.69 4 5 4z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5S = memo(SvgObjectFlipHorizontalSymbolic);
var object_flip_horizontal_symbolic_default = Memo$5S;

const SvgObjectFlipVerticalSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7 3v10h2V3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 10v1c0 .265.093.53.281.719l3.72 3.719 3.718-3.72c.188-.187.281-.453.281-.718v-1h-1c-.265 0-.53.093-.719.281l-2.28 2.281-2.282-2.28A1.015 1.015 0 005 10zm0-4V5c0-.265.093-.53.282-.719L8 .562l3.719 3.72c.188.187.281.453.281.718v1h-1c-.265 0-.53-.093-.718-.281L8 3.437 5.72 5.72A1.015 1.015 0 015 6z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5T = memo(SvgObjectFlipVerticalSymbolic);
var object_flip_vertical_symbolic_default = Memo$5T;

const SvgObjectRotateLeftSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 9v1c0 .265.093.53.281.719l3.72 3.719 3.718-3.72c.188-.187.281-.453.281-.718V9H9c-.265 0-.53.093-.719.281l-2.28 2.281-2.282-2.28A1.015 1.015 0 003 9z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.5 3A3.515 3.515 0 005 6.5V12h2V6.5C7 5.66 7.66 5 8.5 5H13V3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5U = memo(SvgObjectRotateLeftSymbolic);
var object_rotate_left_symbolic_default = Memo$5U;

const SvgObjectRotateRightSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 3v2h4.5C8.34 5 9 5.66 9 6.5V12h2V6.5C11 4.579 9.421 3 7.5 3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 9h1c.257 0 .529.13.719.313L10 11.592l2.281-2.28C12.471 9.13 12.743 9 13 9h1v1c0 .31-.09.552-.281.75L10 14.406 6.281 10.75C6.091 10.552 6 10.31 6 10z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$5V = memo(SvgObjectRotateRightSymbolic);
var object_rotate_right_symbolic_default = Memo$5V;

const SvgObjectSelectSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M13.5 5l-1-1-5 5L5 6.5l-2 2L7.5 13l7-7z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$5W = memo(SvgObjectSelectSymbolic);
var object_select_symbolic_default = Memo$5W;

const SvgOpenMenuSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 3h10v2H3zm0 4h10v2H3zm0 4h10v2H3z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#bebebe",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$5X = memo(SvgOpenMenuSymbolic);
var open_menu_symbolic_default = Memo$5X;

const SvgOrientationLandscapeInverseSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.127 13.08a1.11 1.11 0 01-1.113-1.113V4.122a1.11 1.11 0 011.113-1.114h11.738a1.11 1.11 0 011.113 1.114v7.845a1.11 1.11 0 01-1.113 1.114zm5.842-3l4-4.04h-8z",
    style: {
      marker: "none"
    },
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$5Y = memo(SvgOrientationLandscapeInverseSymbolic);
var orientation_landscape_inverse_symbolic_default = Memo$5Y;

const SvgOrientationLandscapeSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.127 3.04a1.11 1.11 0 00-1.113 1.113v7.846a1.11 1.11 0 001.113 1.113h11.738a1.11 1.11 0 001.113-1.113V4.153a1.11 1.11 0 00-1.113-1.113zm5.842 3l4 4h-8z",
    style: {
      marker: "none"
    },
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$5Z = memo(SvgOrientationLandscapeSymbolic);
var orientation_landscape_symbolic_default = Memo$5Z;

const SvgOrientationPortraitInverseSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 15.959",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.96 2.166a1.11 1.11 0 0 1 1.113-1.113h7.846a1.11 1.11 0 0 1 1.113 1.113v11.738a1.11 1.11 0 0 1-1.113 1.113H4.073a1.11 1.11 0 0 1-1.113-1.113zm3 5.842l4.009 3.99v-8z",
    style: {
      marker: "none"
    },
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$5_ = memo(SvgOrientationPortraitInverseSymbolic);
var orientation_portrait_inverse_symbolic_default = Memo$5_;

const SvgOrientationPortraitLeftSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 15.959",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.96 2.166a1.11 1.11 0 011.113-1.113h7.846a1.11 1.11 0 011.113 1.113v11.738a1.11 1.11 0 01-1.113 1.113H4.073a1.11 1.11 0 01-1.113-1.113zm3 5.842l4.009 3.99v-8z",
    style: {
      marker: "none"
    },
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$5$ = memo(SvgOrientationPortraitLeftSymbolic);
var orientation_portrait_left_symbolic_default = Memo$5$;

const SvgOrientationPortraitRightSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 15.959",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M13.032 2.166a1.11 1.11 0 00-1.113-1.113H4.073A1.11 1.11 0 002.96 2.166v11.738a1.11 1.11 0 001.113 1.113h7.846a1.11 1.11 0 001.113-1.113zm-3 5.842l-4.063 3.99v-8z",
    style: {
      marker: "none"
    },
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$60 = memo(SvgOrientationPortraitRightSymbolic);
var orientation_portrait_right_symbolic_default = Memo$60;

const SvgOrientationPortraitSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 15.959",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M13.032 2.166a1.11 1.11 0 0 0-1.113-1.113H4.073A1.11 1.11 0 0 0 2.96 2.166v11.738a1.11 1.11 0 0 0 1.113 1.113h7.846a1.11 1.11 0 0 0 1.113-1.113zm-3 5.842l-4.063 3.99v-8z",
    style: {
      marker: "none"
    },
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$61 = memo(SvgOrientationPortraitSymbolic);
var orientation_portrait_symbolic_default = Memo$61;

const SvgPackageXGenericSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 8h10v7.059c0 .492-.472.937-.996.937H4c-.539 0-1-.43-1-1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.794 2.97a1 1 0 00-.754.378L3.225 6.805a1 1 0 00-.224.633v1a1 1 0 102 0v-.645l2.592-3.181a1 1 0 00-.8-1.643zm2.213 3.003a1 1 0 00-.145 1.988l2.17.38v.16a1 1 0 102 0v-1a1 1 0 00-.828-.987l-2.998-.523a1 1 0 00-.2-.018z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$62 = memo(SvgPackageXGenericSymbolic);
var package_x_generic_symbolic_default = Memo$62;

const SvgPanDownSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-152.00586,-952)"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 166,957 -5.99414,5.99999 L 154,957 Z",
    id: "path6424",
    style: {
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-152.00586,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-152.00586,-952)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-152.00586,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-152.00586,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-152.00586,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-152.00586,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-152.00586,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-152.00586,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-152.00586,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-152.00586,-888)"
  })));
  return render(rest, ...restArgs);
};
const Memo$63 = memo(SvgPanDownSymbolic);
var pan_down_symbolic_default = Memo$63;

const SvgPanEndSymbolicRtl = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M10 13L5 8l5-5z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$64 = memo(SvgPanEndSymbolicRtl);
var pan_end_symbolic_rtl_default = Memo$64;

const SvgPanEndSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-112.00585,-951.99999)"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 117,966 6.00585,-6.00001 L 117,954 Z",
    id: "path6412",
    style: {
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-112.00585,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-112.00585,-951.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-112.00585,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-112.00585,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-112.00585,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-112.00585,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-112.00585,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-112.00585,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-112.00585,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-112.00585,-887.99999)"
  })));
  return render(rest, ...restArgs);
};
const Memo$65 = memo(SvgPanEndSymbolic);
var pan_end_symbolic_default = Memo$65;

const SvgPanStartSymbolicRtl = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 13l5-5-5-5z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$66 = memo(SvgPanStartSymbolicRtl);
var pan_start_symbolic_rtl_default = Memo$66;

const SvgPanStartSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-92.005848,-951.99999)"
  }, /* @__PURE__ */ createElement("path", {
    d: "M 103,966 97.00585,959.99999 103,954 Z",
    id: "path6400",
    style: {
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-92.005848,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-92.005848,-951.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-92.005848,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-92.005848,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-92.005848,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-92.005848,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-92.005848,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-92.005848,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-92.005848,-887.99999)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-92.005848,-887.99999)"
  })));
  return render(rest, ...restArgs);
};
const Memo$67 = memo(SvgPanStartSymbolic);
var pan_start_symbolic_default = Memo$67;

const SvgPanUpSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-132.00585,-952)"
  }, /* @__PURE__ */ createElement("path", {
    d: "M 146,963 140.00585,956.99999 134,963 Z",
    id: "path6418",
    style: {
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-132.00585,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-132.00585,-952)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-132.00585,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-132.00585,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-132.00585,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-132.00585,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-132.00585,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-132.00585,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-132.00585,-888)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-132.00585,-888)"
  })));
  return render(rest, ...restArgs);
};
const Memo$68 = memo(SvgPanUpSymbolic);
var pan_up_symbolic_default = Memo$68;

const SvgPdaSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.183 0C2.385 0 1.03 1.338 1.03 3v10c0 1.662 1.354 3 3.152 3h7.572C13.553 16 15 14.662 15 13V6.41l-1.976 2.878V13c0 .554-.482 1-1.082 1H4.026c-.599 0-1.019-.446-1.019-1V3c0-.554.42-1 1.02-1h7.66L13.006.25A3.577 3.577 0 0011.755 0z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14.04 1.031S11.521 4.537 10 7L8.594 8.167l.038 1.574-.764 1.245h.696l.74-.584 1.675-.462.595-1.481 4.185-6.365z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$69 = memo(SvgPdaSymbolic);
var pda_symbolic_default = Memo$69;

const SvgPhoneAppleIphoneSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.469 1C4.648 1 4 1.648 4 2.469V13.53c0 .822.648 1.47 1.469 1.47h5.125c.82 0 1.469-.648 1.469-1.469V2.47c0-.821-.648-1.469-1.47-1.469zM5 2h6.063v11H5z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$6a = memo(SvgPhoneAppleIphoneSymbolic);
var phone_apple_iphone_symbolic_default = Memo$6a;

const SvgPhoneOldSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.001 0c-1.01.005-1 1-1 1v12l.002.016v.136c0 1.024.857 1.848 1.92 1.848h5.158c1.063 0 1.92-.824 1.92-1.848V5c0-1.023-.937-2-2-2h-5V1s-.009-.994-1-1zm1.754 5H9.25a.75.75 0 01.752.752v1.496A.75.75 0 019.251 8H5.755a.75.75 0 01-.752-.752V5.752A.75.75 0 015.755 5zm-.252 5h1.143a.499.499 0 110 1H5.503a.499.499 0 110-1zm2.857 0h1.143a.499.499 0 110 1H8.36a.499.499 0 110-1zm-2.857 2h1.143a.499.499 0 110 1H5.503a.499.499 0 110-1zm2.857 0h1.143a.499.499 0 110 1H8.36a.499.499 0 110-1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$6b = memo(SvgPhoneOldSymbolic);
var phone_old_symbolic_default = Memo$6b;

const SvgPhoneSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 0C2.993.005 3 1 3 1v13c0 2 2.003 2 2.003 2h7c2 0 2-2 2-2V4s0-2-2-2h-6.75c-.25 0-.25-.25-.25-.25L5 1S4.99.006 4 0zm1.003 4.25c0-.25.25-.25.25-.25h6.5s.25 0 .25.25v9.5c0 .25-.25.25-.25.25h-6.5c-.25 0-.252-.277-.252-.277z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.003 5.25c0-.25.25-.25.25-.25h4.5s.25 0 .25.25v2.5c0 .25-.25.25-.25.25h-4.5C6.003 8 6 7.723 6 7.723zM6.253 9h1.5a.25.25 0 01.25.25v.5a.25.25 0 01-.25.25h-1.5a.25.25 0 01-.25-.25v-.5a.25.25 0 01.25-.25zm3 0h1.5a.25.25 0 01.25.25v.5a.25.25 0 01-.25.25h-1.5a.25.25 0 01-.25-.25v-.5a.25.25 0 01.25-.25zm-3 2h1.5a.25.25 0 01.25.25v.5a.25.25 0 01-.25.25h-1.5a.25.25 0 01-.25-.25v-.5a.25.25 0 01.25-.25zm3 0h1.5a.25.25 0 01.25.25v.5a.25.25 0 01-.25.25h-1.5a.25.25 0 01-.25-.25v-.5a.25.25 0 01.25-.25z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6c = memo(SvgPhoneSymbolic);
var phone_symbolic_default = Memo$6c;

const SvgPowerProfileBalancedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-272,-72)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-272,-8)"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 280,9 c -2.049,0 -4.09825,0.779891 -5.65625,2.337891 -3.116,3.116 -3.116,8.1965 0,11.3125 a 1,1 0 0 0 1.67969,-0.972657 l 0.79492,-0.794922 -0.70703,-0.707031 -0.69336,0.69336 a 5.984,5.984 0 0 1 -1.40235,-3.375 H 275 v -1 h -0.98438 a 5.984,5.984 0 0 1 1.40235,-3.375 l 0.69336,0.693359 0.70703,-0.707031 -0.69141,-0.691407 a 5.984,5.984 0 0 1 3.3086,-1.398437 c -0.0581,0.105552 -0.0984,0.225263 -0.0977,0.363281 l -0.041,3.744141 A 2,2 0 0 0 278,16.994141 a 2,2 0 0 0 2,2 2,2 0 0 0 2,-2 2,2 0 0 0 -1.19922,-1.833985 l 0.041,-3.765625 c 0.003,-0.12843 -0.037,-0.247738 -0.0957,-0.359375 a 5.984,5.984 0 0 1 3.12891,1.376953 l -0.69141,0.69336 0.70703,0.707031 0.69141,-0.693359 a 5.984,5.984 0 0 1 1.40235,3.375 H 285 v 1 h 0.98438 a 5.984,5.984 0 0 1 -1.40235,3.375 l -0.69336,-0.69336 -0.70703,0.707031 0.79688,0.796876 a 1,1 0 0 0 1.67773,0.970703 c 3.116,-3.116 3.116,-8.1965 0,-11.3125 A 7.975,7.975 0 0 0 280,9 Z",
    id: "path2-36",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      display: "inline",
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000000",
      solidOpacity: 1,
      fill: "#2e3436",
      stroke: "none",
      marker: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-272,-72)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-272,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-272,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-272,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-272,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-272,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-272,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-272,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-272,-8)"
  })));
  return render(rest, ...restArgs);
};
const Memo$6d = memo(SvgPowerProfileBalancedSymbolic);
var power_profile_balanced_symbolic_default = Memo$6d;

const SvgPowerProfilePerformanceSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-252,-72)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-252,-8)"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 260,9.005859 c -1.86785,0 -3.73066,0.656334 -5.22656,1.951172 -0.14508,0.12558 -0.29195,0.248976 -0.42969,0.386719 -3.116,3.116 -3.116,8.1965 0,11.3125 a 1,1 0 0 0 1.67969,-0.972656 l 0.79492,-0.794922 -0.70703,-0.707031 -0.69336,0.693359 A 5.984,5.984 0 0 1 254.01562,17.5 H 255 v -1 h -0.98438 a 5.984,5.984 0 0 1 1.40235,-3.375 l 0.69336,0.693359 0.70703,-0.707031 -0.69141,-0.691406 A 5.984,5.984 0 0 1 259.5,11.015625 V 12 h 1 v -0.984375 a 5.984,5.984 0 0 1 3.375,1.402344 l -0.69141,0.693359 0.70703,0.707031 0.69141,-0.693359 a 5.984,5.984 0 0 1 1.40235,3.375 H 265 v 1 h 0.98438 a 5.984,5.984 0 0 1 -1.19532,3.117188 c -0.042,-0.09189 -0.0959,-0.180515 -0.18164,-0.25586 l -2.78711,-2.533203 A 2,2 0 0 0 262,17 a 2,2 0 0 0 -2,-2 2,2 0 0 0 -2,2 2,2 0 0 0 2,2 2,2 0 0 0 0.72266,-0.136719 l 2.87304,2.611328 c 0.096,0.08935 0.21456,0.138289 0.33985,0.167969 l 0.043,0.04297 a 1,1 0 0 0 1.67773,0.970703 c 3.116,-3.116 3.116,-8.1965 0,-11.3125 A 7.975,7.975 0 0 0 260,9.005859 Z",
    id: "path2-35",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      display: "inline",
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000000",
      solidOpacity: 1,
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      marker: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-252,-72)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-252,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-252,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-252,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-252,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-252,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-252,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-252,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-252,-8)"
  })));
  return render(rest, ...restArgs);
};
const Memo$6e = memo(SvgPowerProfilePerformanceSymbolic);
var power_profile_performance_symbolic_default = Memo$6e;

const SvgPowerProfilePowerSaverSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    id: "svg7384",
    style: {
      enableBackground: "new"
    },
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer10",
    transform: "translate(-292,-72)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(-292,-8)"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 300,9.005859 c -2.049,0 -4.09825,0.779891 -5.65625,2.337891 -3.116,3.116 -3.116,8.1965 0,11.3125 a 1,1 0 0 0 1.69922,-0.890625 c 0.1415,-0.02719 0.28041,-0.09646 0.39648,-0.216797 l 2.72461,-2.732422 A 2,2 0 0 0 300,19 a 2,2 0 0 0 2,-2 2,2 0 0 0 -2,-2 2,2 0 0 0 -2,2 2,2 0 0 0 0.13477,0.716797 l -2.75977,2.769531 c -0.0532,0.05206 -0.0879,0.117606 -0.12305,0.181641 A 5.984,5.984 0 0 1 294.01562,17.5 H 295 v -1 h -0.98438 a 5.984,5.984 0 0 1 1.40235,-3.375 l 0.69336,0.693359 0.70703,-0.707031 -0.69141,-0.691406 A 5.984,5.984 0 0 1 299.5,11.015625 V 12 h 1 v -0.984375 a 5.984,5.984 0 0 1 3.375,1.402344 l -0.69141,0.693359 0.70703,0.707031 0.69141,-0.693359 a 5.984,5.984 0 0 1 1.40235,3.375 H 305 v 1 h 0.98438 a 5.984,5.984 0 0 1 -1.40235,3.375 l -0.69336,-0.693359 -0.70703,0.707031 0.79688,0.796875 a 1,1 0 0 0 1.67773,0.970703 c 3.116,-3.116 3.116,-8.1965 0,-11.3125 A 7.975,7.975 0 0 0 300,9.005859 Z",
    id: "path2-1",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      display: "inline",
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000000",
      solidOpacity: 1,
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      marker: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    id: "layer11",
    transform: "translate(-292,-72)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer7",
    transform: "translate(-292,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer6",
    transform: "translate(-292,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer5",
    transform: "translate(-292,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer9",
    transform: "translate(-292,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer2",
    transform: "translate(-292,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer8",
    transform: "translate(-292,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer3",
    transform: "translate(-292,-8)"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer4",
    transform: "translate(-292,-8)"
  })));
  return render(rest, ...restArgs);
};
const Memo$6f = memo(SvgPowerProfilePowerSaverSymbolic);
var power_profile_power_saver_symbolic_default = Memo$6f;

const SvgPreferencesColorSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1C5.797 1 4 2.797 4 5c0 2.203 1.797 4 4 4 2.203 0 4-1.797 4-4 0-2.203-1.797-4-4-4zm0 1.066A2.926 2.926 0 0110.934 5 2.926 2.926 0 018 7.934 2.926 2.926 0 015.067 5 2.926 2.926 0 018 2.066z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 8c-2.203 0-4 1.797-4 4 0 2.203 1.797 4 4 4 2.203 0 4-1.797 4-4 0-2.203-1.797-4-4-4zm0 1.066A2.926 2.926 0 016.934 12 2.926 2.926 0 014 14.934 2.926 2.926 0 011.067 12 2.926 2.926 0 014 9.066z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15.998 12A4 4 0 0112 16a4 4 0 01-4-4 4 4 0 014-4 4 4 0 013.998 4z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.467 12A3.467 3.467 0 014 15.467 3.467 3.467 0 01.534 12 3.467 3.467 0 014 8.533 3.467 3.467 0 017.467 12z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.5
  }))));
  return render(rest, ...restArgs);
};
const Memo$6g = memo(SvgPreferencesColorSymbolic);
var preferences_color_symbolic_default = Memo$6g;

const SvgPreferencesDesktopAccessibilitySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.017 16.005",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.017 0a8 8 0 100 16 8 8 0 000-16zm0 2a2 2 0 110 4 2 2 0 010-4zM3.51 6c.016 0 .032 0 .048.002 0 0 3.015.248 4.46.248 1.444 0 4.458-.248 4.458-.248a.5.5 0 01.395.852c-.193.193-.293.182-.426.22a16.18 16.18 0 01-2.428.426c.05 1.877.084 3.307.354 4.2.15.492.297.853.41 1.113.057.13.104.233.143.326.039.092.093.121.093.361a.5.5 0 01-.853.354c-.228-.229-.4-.527-.64-.936a37.549 37.549 0 01-.76-1.371c-.399-.747-.614-1.18-.747-1.443-.132.262-.347.696-.746 1.443-.252.472-.519.962-.76 1.371-.24.409-.412.707-.64.936a.5.5 0 01-.854-.354c0-.24.055-.269.094-.361l.143-.327c.113-.26.26-.62.41-1.113.27-.892.304-2.322.353-4.199-.9-.07-1.517-.235-2.427-.426-.133-.038-.233-.027-.426-.22A.5.5 0 013.51 6z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$6h = memo(SvgPreferencesDesktopAccessibilitySymbolic);
var preferences_desktop_accessibility_symbolic_default = Memo$6h;

const SvgPreferencesDesktopAppsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.006 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M1 0C.446 0 0 .446 0 1v5c0 .554.446 1 1 1h5c.554 0 1-.446 1-1V1c0-.554-.446-1-1-1zm1 3h3v2H2zm7-3c-.554 0-1 .446-1 1v5c0 .554.446 1 1 1h5c.554 0 1-.446 1-1V1c0-.554-.446-1-1-1zm1 3h3v2h-3zM1 8c-.554 0-1 .446-1 1v5c0 .554.446 1 1 1h5c.554 0 1-.446 1-1V9c0-.554-.446-1-1-1zm1 3h3v2H2zm7-3c-.554 0-1 .446-1 1v5c0 .554.446 1 1 1h5c.554 0 1-.446 1-1V9c0-.554-.446-1-1-1zm1 3h3v2h-3z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$6i = memo(SvgPreferencesDesktopAppsSymbolic);
var preferences_desktop_apps_symbolic_default = Memo$6i;

const SvgPreferencesDesktopDisplaySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1c1.662 0 3 1.338 3 3v6c0 1.662-1.338 3-3 3H4c-1.662 0-3-1.338-3-3V4c0-1.662 1.338-3 3-3zm0 2H4c-.554 0-1 .446-1 1v6c0 .554.446 1 1 1h8c.554 0 1-.446 1-1V4c0-.554-.446-1-1-1zM8 14c-5 0-5 1-5 1 0 1 1 1 1 1h8c1 0 1-1 1-1s0-1-5-1z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#bebebe",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$6j = memo(SvgPreferencesDesktopDisplaySymbolic);
var preferences_desktop_display_symbolic_default = Memo$6j;

const SvgPreferencesDesktopFontSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 5.012v2h1.92c-.055 0 .084.159.084.082v.924H4c-1.716 0-3.03 1.125-3.055 2.484-.012.68.306 1.363.862 1.822.555.46 1.315.7 2.193.7h3.004v-5.93c0-1.171-.887-2.082-2.084-2.082zm1 5.006h1.004v1.005H4c-.52 0-.794-.137-.92-.242-.126-.104-.136-.172-.135-.244.003-.144.085-.52 1.055-.52zM7.996 4v9.023H11c.939 0 1.769-.372 2.299-.959.53-.586.766-1.336.756-2.066a3.079 3.079 0 00-.791-2.043C12.737 7.378 11.92 7 11 7H9.996V4zm2 5H11c.422 0 .626.126.787.303.162.177.264.447.268.722.004.276-.089.53-.24.698-.152.167-.356.3-.815.3H9.996z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$6k = memo(SvgPreferencesDesktopFontSymbolic);
var preferences_desktop_font_symbolic_default = Memo$6k;

const SvgPreferencesDesktopKeyboardShortcutsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.502 8C.67 8 0 8.669 0 9.5v4c0 .831.67 1.5 1.502 1.5h9.01c.832 0 1.502-.669 1.502-1.5v-4c0-.831-.67-1.5-1.502-1.5zm.062 1c3.186.269 6.116.23 8.885 0 .303-.025.564.26.564.563v2.874c0 .303-.262.529-.564.563-3.004.34-5.964.327-8.885 0-.301-.034-.563-.26-.563-.563V9.563c0-.303.261-.588.563-.563zM9.51 0c-.831 0-1.5.669-1.5 1.5v4c0 .831.669 1.5 1.5 1.5h4.005c.832 0 1.502-.669 1.502-1.5v-4c0-.831-.67-1.5-1.502-1.5zm.063 1a20.12 20.12 0 003.88 0c.302-.029.563.26.563.563v2.875c0 .302-.262.525-.563.562-1.255.154-2.542.18-3.88 0-.3-.04-.563-.26-.563-.563V1.563c0-.302.262-.592.563-.562zM1.502 1C.67 1 0 1.669 0 2.5v3C0 6.331.67 7 1.502 7h4.004c.832 0 1.502-.669 1.502-1.5v-3c0-.831-.67-1.5-1.502-1.5zm.062 1c1.692.2 2.848.13 3.88 0 .3-.038.563.26.563.563v2.874c0 .303-.262.524-.563.563a15.109 15.109 0 01-3.88 0c-.3-.038-.563-.26-.563-.563V2.563c0-.302.262-.597.563-.562z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$6l = memo(SvgPreferencesDesktopKeyboardShortcutsSymbolic);
var preferences_desktop_keyboard_shortcuts_symbolic_default = Memo$6l;

const SvgPreferencesDesktopKeyboardSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.022 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M1 2c-.554 0-1 .446-1 1v11c0 .554.446 1 1 1h13.006c.554 0 1-.446 1-1V3c0-.554-.446-1-1-1zm1.365 2h1.656v2h-2V4.393c0-.218.154-.393.344-.393zm2.656 0h2v2h-2zm3 0h2v2h-2zm3 0h1.657c.19 0 .343.175.343.393V6h-2zm-8 3h2v2h-2zm3 0h2v2h-2zm3 0h2v2h-2zm-6.656 4h10.313c.19 0 .343.175.343.393v1.214c0 .218-.153.393-.343.393H2.365c-.19 0-.344-.175-.344-.393v-1.214c0-.218.154-.393.344-.393z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$6m = memo(SvgPreferencesDesktopKeyboardSymbolic);
var preferences_desktop_keyboard_symbolic_default = Memo$6m;

const SvgPreferencesDesktopLocaleSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436",
    fillRule: "evenodd"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 1v14h2V1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v6a1 1 0 001 1h3.383l.722 1.447A1 1 0 008 11h5a1 1 0 001-1V4a1 1 0 00-1-1H9.617l-.722-1.447A1 1 0 008 1zm1 2h3.383l.722 1.447A1 1 0 009 5h3v4H8.617l-.722-1.447A1 1 0 007 7H4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 8h4l1 2h5V4H9L8 2H3z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6n = memo(SvgPreferencesDesktopLocaleSymbolic);
var preferences_desktop_locale_symbolic_default = Memo$6n;

const SvgPreferencesDesktopRemoteDesktopSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1c1.662 0 3 1.338 3 3v6c0 1.662-1.338 3-3 3H4c-1.662 0-3-1.338-3-3V4c0-1.662 1.338-3 3-3zm0 2H4c-.554 0-1 .446-1 1v6c0 .554.446 1 1 1h8c.554 0 1-.446 1-1V4c0-.554-.446-1-1-1zM8 14c-5 0-5 1-5 1 0 1 1 1 1 1h8c1 0 1-1 1-1s0-1-5-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4.5 5S4 5 4 5.5v4c0 .5.5.5.5.5h4c.5 0 .5-.5.5-.5v-4C9 5 8.563 5 8.5 5zM5 6.998h3v2H5zM10.5 4s-.5 0-.5.5v.984s0 .5.5.5l1 .001s.5 0 .5-.5v-.984s0-.5-.5-.5z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6o = memo(SvgPreferencesDesktopRemoteDesktopSymbolic);
var preferences_desktop_remote_desktop_symbolic_default = Memo$6o;

const SvgPreferencesDesktopScreensaverSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12.109 5c.62.75.995 1.71.995 2.76a4.344 4.344 0 01-4.344 4.344c-1.05 0-2.01-.376-2.76-.995A5.055 5.055 0 0010.932 15 5.068 5.068 0 0016 9.932 5.055 5.055 0 0012.109 5zM6.511 1.79c.4 0 .721.322.721.721a.72.72 0 01-.72.721.72.72 0 01-.722-.72c0-.4.322-.722.721-.722zm4 1.023a.697.697 0 110 1.398.697.697 0 01-.699-.7c0-.387.312-.698.7-.698zm-3 1.977c.4 0 .721.322.721.721a.72.72 0 01-.72.721.72.72 0 01-.722-.72c0-.4.322-.722.721-.722z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.505 7.505L2.76 5.25.505 4.505 2.76 3.76l.745-2.255.745 2.255 2.255.745-2.255.745z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6p = memo(SvgPreferencesDesktopScreensaverSymbolic);
var preferences_desktop_screensaver_symbolic_default = Memo$6p;

const SvgPreferencesDesktopWallpaperSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.031 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.063 1.031a1 1 0 00-1 1v12a1 1 0 001 1H15.03a1 1 0 001-1v-12a1 1 0 00-1-1zm1 2H14.03v10H2.062z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.406 7.969a1.919 1.919 0 00-1.474.676c-.2.234-.315.474-.418.664-.102.187-.2.342-.305.449a.87.87 0 01-.363.222h-.002c-.133.04-.313.051-.532.051h-5.28v1h5.28c.236 0 .518-.002.82-.093.303-.092.575-.258.792-.479a2.88 2.88 0 00.469-.672c.114-.21.205-.382.3-.494a.966.966 0 01.71-.324c.262 0 .546.131.724.332.105.118.205.296.33.51.127.215.278.455.502.671.226.22.503.384.81.473.308.09.596.092.84.092l2.422-.016v-1l-2.422.016a2.091 2.091 0 01-.56-.053.96.96 0 01-.395-.23 2.205 2.205 0 01-.334-.461c-.113-.192-.24-.433-.447-.666a1.979 1.979 0 00-1.467-.668zM5.531 5.031c-.822 0-1.5.678-1.5 1.5 0 .823.678 1.5 1.5 1.5.823 0 1.5-.677 1.5-1.5 0-.822-.677-1.5-1.5-1.5zm0 1c.282 0 .5.218.5.5 0 .282-.218.5-.5.5a.493.493 0 01-.5-.5c0-.282.218-.5.5-.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6q = memo(SvgPreferencesDesktopWallpaperSymbolic);
var preferences_desktop_wallpaper_symbolic_default = Memo$6q;

const SvgPreferencesOtherSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M.002 12c.004-.224.112-.53.304-.704l2.161-2.117c.233-.243.787-.292 1.011-.157.081.002 1.136.632 1.289.866.616.946-.344 1.827-1.174 1.547l-.35-.212-1.602 1.572C1.004 13.32-.051 12.887 0 12zM11.62.118c.389-.101.79-.11 1.17-.08l-1.36 2.305a.975.975 0 00.354 1.348l.874.508a.99.99 0 001.357-.353l1.36-2.306c.212.314.4.666.502 1.053.486 1.853-.632 3.748-2.497 4.234-.39.101-.79.11-1.17.08l-.803 1.116L7.997 8s1.52-2.577 1.628-2.595a3.483 3.483 0 01-.502-1.053C8.636 2.5 9.754.604 11.619.118z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.599.719a3.5 3.5 0 00-.655.219c-.017.624.086 1.441-.157 1.656-.238.21-1.036.034-1.653-.031a3.63 3.63 0 00-.312.75c.477.395 1.138.839 1.154 1.156.016.32-.625.805-1.06 1.25.102.258.249.493.405.719.607-.127 1.364-.374 1.623-.188.262.19.264 1.005.343 1.625.249.075.512.105.78.125.28-.555.566-1.32.874-1.406.315-.089.962.458 1.497.781.219-.152.413-.337.593-.531-.253-.573-.72-1.292-.593-1.594.128-.302.974-.47 1.56-.687.005-.074.032-.145.032-.22 0-.19-.035-.378-.063-.562-.605-.16-1.465-.241-1.622-.531-.157-.288.241-1.061.437-1.656a3.682 3.682 0 00-.656-.469c-.5.375-1.082.994-1.404.938-.316-.056-.662-.82-.998-1.344-.04.007-.085-.008-.125 0zm.624 1.875a1.686 1.686 0 11-1.685 1.688c0-.933.754-1.688 1.685-1.688z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.997 9h9.985l.008 6.063c0 .492-.472.937-.994.937H4.004a.996.996 0 01-.999-1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15.96 11.977c-.003-.224-.112-.53-.303-.704l-2.162-2.117c-.232-.243-.786-.292-1.01-.156-.081.002-1.136.63-1.289.865-.616.946.344 1.827 1.174 1.547l.35-.212 1.602 1.572c.637.526 1.691.092 1.639-.795z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6r = memo(SvgPreferencesOtherSymbolic);
var preferences_other_symbolic_default = Memo$6r;

const SvgPreferencesSystemDetailsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.288 1.969c-.742 0-1.32.577-1.32 1.32v9.423c0 .742.578 1.32 1.32 1.32h9.424c.742 0 1.32-.578 1.32-1.32V3.288c0-.742-.578-1.32-1.32-1.32zM7 4h2v2H7zm0 3h2v5H7z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$6s = memo(SvgPreferencesSystemDetailsSymbolic);
var preferences_system_details_symbolic_default = Memo$6s;

const SvgPreferencesSystemDevicesSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9 6c-1.09 0-2 .91-2 2v3c0 1.09.91 2 2 2h5c1.09 0 2-.91 2-2V8c0-1.09-.91-2-2-2zm0 2h5v3H9z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.5 15C9 15 9 14.5 9 14.5c0-.5.5-.5.5-.5h4c.5 0 .5.5.5.5s0 .5-2.5.5zM3 1v1h5V1zM2 3c-.554 0-1 .446-1 1v2c0 .554.446 1 1 1V6h4.775A2.98 2.98 0 019 5h1V4c0-.554-.446-1-1-1H3zm1 4v3h3V8c0-.353.07-.686.182-1z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6t = memo(SvgPreferencesSystemDevicesSymbolic);
var preferences_system_devices_symbolic_default = Memo$6t;

const SvgPreferencesSystemNetworkProxySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.96 8.635V11H1.367c-.206 0-.368.205-.368.467v1.058c0 .262.162.467.368.467h10.264c.206 0 .368-.205.368-.467v-1.058c0-.262-.162-.467-.368-.467H7.977V8.635z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.8 0C2.849 0 2 .793 2 1.746v6.613c0 .953.849 1.746 1.868 1.746h5.264c1.02 0 1.868-.793 1.868-1.746V1.746C11 .793 10.151 0 9.132 0zM4 2h5c0 .317 0-.316 0 0v6H4s0 .044 0 0V2c0-.044 0 0 0 0z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 2.971h3v1.003H5zm2 2.005h1v1.002H7z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.229 3c.07 0 0 .209 0 .476v1.078c0 .267.07.476.16.476h4.451c.09 0 .16-.209.16-.476V3.476c0-.267-.07-.476-.16-.476-.16 0-4.585.063-4.611 0zm-3.256 8.624c.08-.06.253.039.394.223l.573.747c.142.184.191.375.112.435l-3.935 2.954c-.08.059-.253-.039-.395-.224l-.573-.746c-.141-.184-.19-.376-.111-.435 0 0 3.946-2.893 3.935-2.954z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.027 11.624c-.08-.06-.253.039-.394.223l-.573.747c-.142.184-.191.375-.112.435l3.935 2.954c.08.059.253-.039.395-.224l.573-.746c.141-.184.19-.376.111-.435 0 0-3.946-2.893-3.935-2.954z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6u = memo(SvgPreferencesSystemNetworkProxySymbolic);
var preferences_system_network_proxy_symbolic_default = Memo$6u;

const SvgPreferencesSystemNetworkSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.75 4C.798 4 0 4.798 0 5.75v4.5C0 11.202.798 12 1.75 12h.125l-.781 1.563L.375 15h9.25l-.719-1.438L8.125 12h.125c.952 0 1.75-.798 1.75-1.75v-4.5C10 4.798 9.202 4 8.25 4zM2 6h6v4H2z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.75 1C6.798 1 6 1.798 6 2.75V3h8v4h-3v3.25c0 .66-.252 1.27-.656 1.75h5.28l-1.5-3h.126C15.202 9 16 8.202 16 7.25v-4.5C16 1.798 15.202 1 14.25 1z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Andale Mono",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6v = memo(SvgPreferencesSystemNetworkSymbolic);
var preferences_system_network_symbolic_default = Memo$6v;

const SvgPreferencesSystemNotificationsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.942 1.948c-2.209 0-3.33 1.5-4 4l-1 5c-.108.542-.447 1-1 1v1h12v-1c-.552 0-.891-.458-1-1l-1-5c-.53-2.5-1.79-4-4-4zm.176 12a1.5 1.5 0 001.412 1 1.5 1.5 0 001.412-1z",
    style: {
      marker: "none"
    },
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$6w = memo(SvgPreferencesSystemNotificationsSymbolic);
var preferences_system_notifications_symbolic_default = Memo$6w;

const SvgPreferencesSystemParentalControlsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16.009901 16.014242",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-191.9899,-552)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-191.9899,-488)",
    id: "layer1"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-191.9899,-552)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-191.9899,-488)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-191.9899,-488)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-191.9899,-488)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-191.9899,-488)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-191.9899,-488)",
    id: "layer2"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-191.9899,-488)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-191.9899,-488)",
    id: "layer3"
  }, /* @__PURE__ */ createElement("path", {
    id: "path4042",
    d: "m 200,490.5 a 2.5,2.5 0 0 1 -2.5,2.5 2.5,2.5 0 0 1 -2.5,-2.5 2.5,2.5 0 0 1 2.5,-2.5 2.5,2.5 0 0 1 2.5,2.5 z",
    style: {
      opacity: 1,
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 3.33333325,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "rect4002",
    d: "m 204.5,493 c 1.385,0 2.5,1.115 2.5,2.5 0,1.385 -1.115,2.5 -2.5,2.5 -1.385,0 -2.5,-1.115 -2.5,-2.5 0,-1.385 1.115,-2.5 2.5,-2.5 z",
    style: {
      opacity: 1,
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 3.33333325,
      strokeLinecap: "round",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "m 202,499 c -1.35232,-0.0191 -1.35232,2.01913 0,2 h 1 v 2 c -1.2e-4,0.77087 0.83516,1.25205 1.50195,0.86523 0.66593,0.38233 1.49645,-0.0974 1.49805,-0.86523 v -0.13477 c 0.86619,0.49882 1.8477,-0.44122 1.38672,-1.32812 l -0.90474,-1.72832 C 206.16814,499.2652 205.8993,499 205,499 h -1 z",
    id: "path4048",
    style: {
      color: "#000000",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "evenodd",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path4051",
    d: "m 196.5293,494.48633 a 1.0001,1.0001 0 0 0 -1.01953,0.87305 L 195,498.92969 V 503 a 1.0001,1.0001 0 1 0 2,0 v -3.92969 l 0.49023,-3.42969 a 1.0001,1.0001 0 0 0 -0.96093,-1.15429 z",
    style: {
      color: "#000000",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "evenodd",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path4053",
    d: "m 198.54102,494.48633 a 1.0001,1.0001 0 0 0 -1.03125,1.15429 L 198,499.07031 V 503 a 1.0001,1.0001 0 1 0 2,0 v -4.07031 l -0.50977,-3.57031 a 1.0001,1.0001 0 0 0 -0.94921,-0.87305 z",
    style: {
      color: "#000000",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "evenodd",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "m 196,495 h 3 v 7 h -1 v -1.5 c 0,0 0,-0.5 -0.5,-0.5 -0.5,0 -0.5,0.5 -0.5,0.5 v 1.5 h -1 z",
    id: "path4055",
    style: {
      opacity: 1,
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "miter",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1
    }
  }), /* @__PURE__ */ createElement("path", {
    id: "path4057",
    d: "m 196,494 a 1.0001,1.0001 0 0 0 -0.70703,0.29297 l -3,3 a 1.0001,1.0001 0 1 0 1.41406,1.41406 L 196.41406,496 h 1.93555 l 1.73633,3.90625 a 1.0002723,1.0002723 0 1 0 1.82812,-0.8125 l -2,-4.5 A 1.0001,1.0001 0 0 0 199,494 Z",
    style: {
      color: "#000000",
      fontStyle: "normal",
      fontVariant: "normal",
      fontWeight: "normal",
      fontStretch: "normal",
      fontSize: "medium",
      lineHeight: "normal",
      fontFamily: "sans-serif",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecoration: "none",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000000",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      writingMode: "lr-tb",
      direction: "ltr",
      textOrientation: "mixed",
      dominantBaseline: "auto",
      baselineShift: "baseline",
      textAnchor: "start",
      whiteSpace: "normal",
      shapePadding: 0,
      clipRule: "nonzero",
      display: "inline",
      overflow: "visible",
      visibility: "visible",
      opacity: 1,
      isolation: "auto",
      mixBlendMode: "normal",
      colorInterpolation: "sRGB",
      colorInterpolationFilters: "linearRGB",
      solidColor: "#000000",
      solidOpacity: 1,
      vectorEffect: "none",
      fill: "#2e3436",
      fillOpacity: 1,
      fillRule: "evenodd",
      stroke: "none",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      colorRendering: "auto",
      imageRendering: "auto",
      shapeRendering: "auto",
      textRendering: "auto",
      enableBackground: "accumulate"
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-191.9899,-488)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$6x = memo(SvgPreferencesSystemParentalControlsSymbolic);
var preferences_system_parental_controls_symbolic_default = Memo$6x;

const SvgPreferencesSystemPrivacySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 0c.554 0 1 .446 1 1v6.5s0 .5.5.5.5-.5.5-.5V3c0-.554.446-1 1-1s1 .446 1 1v8.5c0 .5.5.5.5.5l1.793-1.707a1 1 0 01.717-.303c1.085.086 1.148 1.266.697 1.717l-3 3C12 15.5 10.95 15.995 10 16H4c-3 0-3-3-3-3V5c0-.554.446-1 1-1s1 .446 1 1v3.5s0 .5.5.5.5-.5.5-.5V2c0-.554.446-1 1-1s1 .446 1 1v5.5s0 .5.5.5.5-.5.5-.5V1c0-.554.446-1 1-1z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$6y = memo(SvgPreferencesSystemPrivacySymbolic);
var preferences_system_privacy_symbolic_default = Memo$6y;

const SvgPreferencesSystemSearchSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.508 1C3.48 1 1.002 3.474 1.002 6.5S3.48 12 6.508 12s5.504-2.474 5.504-5.5S9.536 1 6.508 1zm0 2a3.486 3.486 0 013.504 3.5c0 1.944-1.556 3.5-3.504 3.5a3.488 3.488 0 01-3.506-3.5C3.002 4.556 4.56 3 6.508 3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 8.99a1 1 0 00-.695 1.717l4.004 4a1 1 0 101.414-1.414l-4.004-4A1 1 0 0010 8.99z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6z = memo(SvgPreferencesSystemSearchSymbolic);
var preferences_system_search_symbolic_default = Memo$6z;

const SvgPreferencesSystemSharingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.969 7.969A2.969 2.969 0 013 10.937 2.969 2.969 0 01.031 7.97 2.969 2.969 0 013.001 5a2.969 2.969 0 012.968 2.969zm9.969 5a2.969 2.969 0 01-2.97 2.969A2.969 2.969 0 0110 12.967 2.969 2.969 0 0112.969 10a2.969 2.969 0 012.969 2.969zm0-10a2.969 2.969 0 01-2.97 2.969A2.969 2.969 0 0110 2.967 2.969 2.969 0 0112.969 0a2.969 2.969 0 012.969 2.969z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.613 2.146L.748 7.924l11.854 5.969.9-1.788-8.248-4.15 8.234-4.012z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6A = memo(SvgPreferencesSystemSharingSymbolic);
var preferences_system_sharing_symbolic_default = Memo$6A;

const SvgPreferencesSystemSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.549.09a3.5 3.5 0 00-1.143.216l1.885 1.88c.387.386.387 1 0 1.387l-.711.708a.98.98 0 01-1.39 0L.303 2.401a3.473 3.473 0 00-.216 1.14 3.456 3.456 0 003.46 3.452 3.5 3.5 0 001.144-.216l1.174 1.171a2.472 2.465 0 01.062 0l2.07-2.064-1.205-1.202a3.46 3.46 0 00.217-1.14A3.456 3.456 0 003.549.09zm6.55 7.89l-2.07 2.064a2.472 2.465 0 01.031.092l1.144 1.14a3.474 3.474 0 00-.217 1.14 3.456 3.456 0 003.461 3.452c.434 0 .854-.102 1.236-.247l-2.008-2.003a1.01 1.01 0 010-1.417l.68-.678a1.03 1.03 0 01.71-.308c.253 0 .517.115.71.308l1.947 1.941c.105-.33.186-.683.186-1.047a3.456 3.456 0 00-3.46-3.452 3.5 3.5 0 00-1.144.216L10.1 7.979z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M13.858 0l-1.542 1.438c-.452.42-.53 1.148-.267 1.706L6.161 9.14a1.492 1.488 0 00-.031 0 1.492 1.488 0 00-.84-.148 1.492 1.488 0 00-.867.44L.477 13.43a1.494 1.49 0 102.13 2.09l3.946-3.997a1.492 1.488 0 00.297-1.738l5.888-5.965c.558.249 1.273.147 1.707-.292l1.417-1.56L13.858 0z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6B = memo(SvgPreferencesSystemSymbolic);
var preferences_system_symbolic_default = Memo$6B;

const SvgPreferencesSystemTimeSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.5 0C3.37 0 0 3.37 0 7.5S3.37 15 7.5 15 15 11.63 15 7.5 11.63 0 7.5 0zm0 2C10.55 2 13 4.45 13 7.5S10.55 13 7.5 13 2 10.55 2 7.5 4.45 2 7.5 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4.428 3.963a.5.5 0 00-.34.863L7.2 7.871A.5.5 0 007.686 8H10.5a.5.5 0 100-1H7.738l-2.95-2.889a.5.5 0 00-.36-.148z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6C = memo(SvgPreferencesSystemTimeSymbolic);
var preferences_system_time_symbolic_default = Memo$6C;

const SvgPrinterErrorSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 4c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h1V8l12 .004V5c0-.5-.5-1-1-1zm2-3v2h8V1z",
    fill: "#474747"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 9v5h4l-.006-5z",
    fill: "#474747"
  }), /* @__PURE__ */ createElement("path", {
    className: "error",
    d: "M12.5 9a3.5 3.5 0 100 7 3.5 3.5 0 000-7zM10 11.969h5V13h-5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#ef2929"
  })));
  return render(rest, ...restArgs);
};
const Memo$6D = memo(SvgPrinterErrorSymbolic);
var printer_error_symbolic_default = Memo$6D;

const SvgPrinterNetworkSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 11.953V14H.469a.464.464 0 00-.469.469v1.062c0 .263.206.469.469.469H13.53a.464.464 0 00.469-.469V14.47a.464.464 0 00-.469-.469H8v-2.047z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4.008 2.273v5.723H10v-4.05L8 2.007H4.273c-.172 0-.265.094-.265.265zM2.984 8.01C2.422 8.01 2 8.36 2 9v2.969h9.969V9c0-.641-.406-.988-.953-.988l-.002.978-8.03.035z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6E = memo(SvgPrinterNetworkSymbolic);
var printer_network_symbolic_default = Memo$6E;

const SvgPrinterPrintingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 4c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h1V8h10v2h1c.5 0 1-.5 1-1V5c0-.5-.5-1-1-1zm2-3v2h8V1z",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    className: "success",
    d: "M4 9v5h8V9zm2.99.998l2.03.011-.01 1 2.003-.01L8.03 13 5 11l2.002.011z",
    fill: "#33d17a"
  })));
  return render(rest, ...restArgs);
};
const Memo$6F = memo(SvgPrinterPrintingSymbolic);
var printer_printing_symbolic_default = Memo$6F;

const SvgPrinterSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 4c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h1V8h10v2h1c.5 0 1-.5 1-1V5c0-.5-.5-1-1-1zm2-3v2h8V1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 9v5h8V9z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6G = memo(SvgPrinterSymbolic);
var printer_symbolic_default = Memo$6G;

const SvgPrinterWarningSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    className: "warning",
    d: "M8.875 8A.863.863 0 008 8.875v6.25c0 .492.383.875.875.875h6.25a.863.863 0 00.875-.875v-6.25A.863.863 0 0015.125 8zM11 9h2v2.5s0 .5-.5.5h-1c-.5 0-.5-.5-.5-.5zm.5 4h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#f57900"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 4c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h1V8h4c.118-.54.552-1 1.125-1H15V5c0-.5-.5-1-1-1zm2-3v2h8V1z",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 9v5h3V9z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$6H = memo(SvgPrinterWarningSymbolic);
var printer_warning_symbolic_default = Memo$6H;

const SvgProcessStopSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.682 2l-.291.29L2 5.647v4.645L5.678 14h4.648L14 10.293V5.648L10.32 2zm.824 2h2.992L12 6.482V9.47L9.492 12H6.51L4 9.469V6.482z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.856 5L5 6.84v2.288L6.856 11h2.29L11 9.128V6.84L9.145 5z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6I = memo(SvgProcessStopSymbolic);
var process_stop_symbolic_default = Memo$6I;

const SvgProcessWorkingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.979 1.055a1.474 1.474 0 0 0-.27.025c-3 .16-5.627 2.222-6.451 5.129A7.13 7.13 0 0 0 4.5 14.037a7.13 7.13 0 0 0 8.4-1.105 7.13 7.13 0 0 0 1.106-8.4c1.507 2.725 1.032 6.162-1.135 8.37-2.228 2.148-5.654 2.577-8.33 1.065-2.618-1.576-3.914-4.73-3.18-7.672-.708 2.948.623 6.072 3.221 7.601 2.654 1.471 6.026 1.005 8.174-1.109 2.094-2.168 2.514-5.528 1.037-8.133 1.453 2.618.992 5.956-1.096 8.075-2.137 2.067-5.464 2.484-8.033 1.025C2.146 12.244.888 9.182 1.6 6.357c-.685 2.832.604 5.863 3.103 7.327 2.547 1.417 5.821.963 7.88-1.07 2.014-2.078 2.42-5.34.997-7.837 1.4 2.51.951 5.75-1.056 7.778-2.048 1.988-5.276 2.391-7.737.986C2.37 12.098 1.15 9.125 1.838 6.418c-.662 2.714.59 5.655 2.988 7.053 2.439 1.363 5.614.923 7.582-1.032 1.935-1.987 2.329-5.152.96-7.54 1.345 2.402.91 5.544-1.018 7.482-1.958 1.908-5.089 2.299-7.442.947C2.59 11.951 1.411 9.071 2.076 6.48c-.639 2.598.574 5.446 2.873 6.778 2.331 1.31 5.408.882 7.286-.992 1.855-1.898 2.235-4.963.92-7.245 1.292 2.295.869 5.338-.979 7.186-1.867 1.829-4.9 2.206-7.145.908-2.219-1.31-3.36-4.1-2.718-6.574-.616 2.48.56 5.238 2.76 6.504 2.223 1.256 5.2.842 6.988-.953 1.775-1.807 2.143-4.774.88-6.947 1.239 2.187.83 5.13-.939 6.888-1.777 1.75-4.71 2.114-6.847.87-2.12-1.246-3.223-3.943-2.604-6.3-.593 2.364.544 5.03 2.645 6.229 2.115 1.203 4.993.801 6.69-.914 1.697-1.717 2.051-4.585.843-6.65 1.184 2.08.788 4.924-.9 6.591-1.688 1.67-4.522 2.021-6.551.83-2.02-1.179-3.085-3.785-2.489-6.025-.57 2.247.53 4.822 2.53 5.955 2.007 1.15 4.786.76 6.394-.875 1.616-1.627 1.958-4.395.803-6.353 1.131 1.971.747 4.717-.861 6.295-1.597 1.59-4.332 1.927-6.254.79-1.92-1.113-2.947-3.628-2.373-5.751-.547 2.13.513 4.614 2.414 5.681 1.9 1.096 4.58.72 6.097-.836 1.537-1.536 1.865-4.206.764-6.056 1.077 1.864.707 4.51-.822 5.998-1.507 1.51-4.143 1.835-5.957.752-1.82-1.047-2.808-3.47-2.258-5.477-.524 2.013.498 4.405 2.299 5.406 1.792 1.042 4.373.68 5.8-.797 1.457-1.446 1.773-4.016.725-5.76 1.024 1.757.666 4.305-.783 5.702-1.417 1.43-3.953 1.742-5.66.713-1.721-.981-2.672-3.314-2.145-5.203-.5 1.896.484 4.197 2.186 5.132 1.684.989 4.166.64 5.504-.757 1.377-1.357 1.68-3.828.685-5.463.97 1.649.626 4.097-.744 5.404-1.326 1.35-3.764 1.65-5.363.674-1.621-.915-2.534-3.155-2.03-4.928-.477 1.78.47 3.988 2.07 4.858 1.578.934 3.96.598 5.208-.72 1.297-1.266 1.587-3.638.646-5.165.917 1.54.585 3.89-.705 5.107-1.236 1.271-3.575 1.557-5.066.635-1.522-.849-2.395-2.999-1.914-4.654-.455 1.662.453 3.779 1.955 4.582 1.469.88 3.752.557 4.908-.68 1.217-1.176 1.494-3.447.607-4.865.875 1.425.577 3.685-.636 4.836-1.15 1.213-3.411 1.51-4.836.636-1.47-.797-2.343-2.904-1.867-4.507.39-1.626 2.197-3.013 3.869-2.97V4a1.474 1.474 0 0 0 .002 0 1.474 1.474 0 0 0 1.472-1.473 1.474 1.474 0 0 0-1.472-1.472 1.474 1.474 0 0 0-.002 0z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$6J = memo(SvgProcessWorkingSymbolic);
var process_working_symbolic_default = Memo$6J;

const SvgRadioCheckedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Andale Mono",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 5a3.001 3.001 0 000 6 3.001 3.001 0 000-6z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.004 1C4.144 1 1 4.144 1 8.004c0 3.86 3.144 7.006 7.004 7.006 3.86 0 7.006-3.146 7.006-7.006C15.01 4.144 11.864 1 8.004 1zm0 1a6.002 6.002 0 016.006 6.004 6.004 6.004 0 01-6.006 6.006A6.002 6.002 0 012 8.004 6 6 0 018.004 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6K = memo(SvgRadioCheckedSymbolic);
var radio_checked_symbolic_default = Memo$6K;

const SvgRadioMixedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fontWeight: 400,
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1C4.142 1 1 4.142 1 8s3.142 7 7 7 7-3.142 7-7-3.142-7-7-7zm0 1c3.316 0 6 2.684 6 6s-2.684 6-6 6-6-2.684-6-6 2.684-6 6-6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontFamily: "Andale Mono",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 6a2 2 0 100 4h6a2 2 0 100-4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6L = memo(SvgRadioMixedSymbolic);
var radio_mixed_symbolic_default = Memo$6L;

const SvgRadioSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1C4.142 1 1 4.142 1 8s3.142 7 7 7 7-3.142 7-7-3.142-7-7-7zm0 1c3.316 0 6 2.684 6 6s-2.684 6-6 6-6-2.684-6-6 2.684-6 6-6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Andale Mono",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$6M = memo(SvgRadioSymbolic);
var radio_symbolic_default = Memo$6M;

const SvgRotationAllowedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.001 16.047",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.003.09v2.04a4.98 4.98 0 013.566 2.888h-1.568c-.554 0-1 .446-1 1v1h6v-6h-1c-.554 0-1 .446-1 1v1.396A7.037 7.037 0 009.003.09zm0 12.781v.3a1 1 0 000-.3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.74 16.047c.515 0 1.021-.177 1.407-.562l4.25-4.25c.77-.772.756-2.074 0-2.844l-.472-.373H12.08l1.91 1.81-4.25 4.22-7.72-7.782c-.015-.016-.043-.02-.03-.031l4.25-4.25 1.735 1.899V1.07L7.678.61 7.647.578a1.999 1.999 0 00-2.813 0l-4.25 4.25a2.004 2.004 0 000 2.813l7.75 7.844c.386.388.892.563 1.407.562z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontFamily: "Sans",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6N = memo(SvgRotationAllowedSymbolic);
var rotation_allowed_symbolic_default = Memo$6N;

const SvgRotationLockedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.063",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.241.016c-.51 0-1.02.192-1.406.578l-4.25 4.25a2.004 2.004 0 000 2.812l7.75 7.844c.386.388.892.563 1.406.563a1.964 1.964 0 001.406-.563l4.25-4.25c.106-.106.194-.223.27-.346-.181.057-.37.096-.57.096h-2.27l-3.086 3.063L2.022 6.28c-.015-.015-.043-.019-.03-.03L6.241 2l.76.833v-.928A1.9 1.9 0 017.58.538 1.982 1.982 0 006.24.015z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11.003 0s-.709-.014-1.447.356C8.817.725 8.003 1.666 8.003 3v1h-1v6h8V4h-1V3c0-1.333-.814-2.275-1.553-2.644C11.712-.014 11.003 0 11.003 0zm0 2s.291.014.553.145c.261.13.447.188.447.855v1h-2V3c0-.667.186-.725.447-.855.262-.131.553-.145.553-.145z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6O = memo(SvgRotationLockedSymbolic);
var rotation_locked_symbolic_default = Memo$6O;

const SvgScannerSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 0c-.579 0-1.06.2-1.469.563a1.7 1.7 0 00-.5.75c-.11.332-.112.774.063 1.125l1 2c.088.177.203.427.375.687.24-.073.494-.125.75-.125h9.562c.256 0 .51.052.75.125.172-.26.287-.51.375-.688l1-2c.175-.35.173-.792.063-1.124a1.7 1.7 0 00-.5-.75A2.136 2.136 0 0013 0zm.125 2h9.75l-.781 1.563c-.118.237-.177.37-.219.437h-7.75c-.042-.066-.1-.2-.219-.438zM4 6c-.488 0-.935.144-1.313.438C2.31 6.73 2 7.218 2 7.78V16h12V7.781c0-.562-.31-1.05-.688-1.343A2.095 2.095 0 0012 6zm0 1h8v6H4zm7 7h1v1h-1z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 4h10V2H3z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 11.031h6v1H5z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 8.031h6V9l-6 1z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$6P = memo(SvgScannerSymbolic);
var scanner_symbolic_default = Memo$6P;

const SvgScreenSharedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 1C2.338 1 1 2.338 1 4v6c0 1.662 1.338 3 3 3h8c1.662 0 3-1.338 3-3V4c0-1.662-1.338-3-3-3zm4 2l4 4-4 4V8c-2.875-.125-4 3-4 3 0-2.344.969-5 4-5zm0 11c-5 0-5 1-5 1 0 1 1 1 1 1h8c1 0 1-1 1-1s0-1-5-1z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#bebebe",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$6Q = memo(SvgScreenSharedSymbolic);
var screen_shared_symbolic_default = Memo$6Q;

const SvgSecurityHighSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 1v7c0 2.072 1.498 3.695 2.832 4.889a18.66 18.66 0 002.66 1.972l.516.305.512-.31s1.32-.8 2.65-2.002C12.5 11.65 14 10.044 14 8V1zm2 2h8v5c0 .92-1 2.313-2.17 3.37-.913.825-1.477 1.154-1.836 1.386-.358-.226-.918-.543-1.828-1.358C5 10.355 4 8.98 4 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 4v4c0 .357.755 1.641 1.844 2.625.575.52.736.58 1.156.875.42-.294.581-.355 1.156-.875C10.246 9.641 11 8.357 11 8V4z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6R = memo(SvgSecurityHighSymbolic);
var security_high_symbolic_default = Memo$6R;

const SvgSecurityLowSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 1v7c0 2.072 1.498 3.695 2.832 4.889a18.66 18.66 0 002.66 1.972l.516.305.512-.31s1.32-.8 2.65-2.002C12.5 11.65 14 10.044 14 8V1zm2 2h8v5c0 .92-1 2.313-2.17 3.37-.913.825-1.477 1.154-1.836 1.386-.358-.226-.918-.543-1.828-1.358C5 10.355 4 8.98 4 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$6S = memo(SvgSecurityLowSymbolic);
var security_low_symbolic_default = Memo$6S;

const SvgSecurityMediumSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 1v7c0 2.072 1.498 3.695 2.832 4.889a18.66 18.66 0 002.66 1.972l.516.305.512-.31s1.32-.8 2.65-2.002C12.5 11.65 14 10.044 14 8V1zm2 2h8v5c0 .92-1 2.313-2.17 3.37-.913.825-1.477 1.154-1.836 1.386-.358-.226-.918-.543-1.828-1.358C5 10.355 4 8.98 4 8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 4v7.5c-.42-.294-.581-.355-1.156-.875C5.755 9.641 5 8.357 5 8V4z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6T = memo(SvgSecurityMediumSymbolic);
var security_medium_symbolic_default = Memo$6T;

const SvgSelectionEndSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.994 2l6 6v6h-6V8z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$6U = memo(SvgSelectionEndSymbolic);
var selection_end_symbolic_default = Memo$6U;

const SvgSelectionStartSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M11.006 14l-6-6V2h6v6z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$6V = memo(SvgSelectionStartSymbolic);
var selection_start_symbolic_default = Memo$6V;

const SvgSemiStarredSymbolicRtl = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    style: {
      marker: "none"
    },
    d: "M8 1.5c.927-.003 1.436 3.134 2.188 3.656.751.523 4.022.026 4.312.875.29.85-2.655 2.274-2.937 3.125-.283.851 1.247 3.69.5 4.219-.748.528-3.105-1.722-4.032-1.719h-.03z",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    d: "M8.043.129c.414.009.757.206.98.404.223.199.369.41.498.627.26.433.444.907.623 1.375.18.469.347.93.496 1.268.085.191.068.167.114.236l3.418-.01a1 1 0 01.957.701c.24.767-.102 1.262-.373 1.684-.272.422-.61.815-.953 1.2-.343.383-.69.752-.95 1.056-.26.304-.42.612-.386.51.088-.264.017.014.117.36.1.347.266.805.43 1.274.162.47.324.942.402 1.434.039.246.064.5.01.805-.054.304-.238.71-.598.95-.355.239-.746.264-1.04.23a2.752 2.752 0 01-.776-.223c-.474-.202-.924-.48-1.367-.76-.444-.28-.877-.565-1.22-.76-.34-.194-.657-.244-.464-.244.225 0-.094.043-.426.24-.332.197-.752.484-1.183.768-.432.283-.87.566-1.332.771-.232.103-.471.191-.768.227-.297.035-.708 0-1.06-.256a1 1 0 01-.176-.166c-.432-.517-.508-1.257-.385-1.768.123-.51.346-.896.533-1.26.373-.726.592-1.206.4-1.75a1 1 0 01-.004-.01c.063.185-.08-.101-.355-.367-.274-.265-.65-.594-1.025-.95-.375-.358-.752-.738-1.05-1.198-.297-.46-.57-1.122-.314-1.83a1 1 0 01.942-.66h3.617c.02-.032.02-.025.043-.07.14-.274.315-.744.494-1.235.179-.49.36-1.001.602-1.465.12-.231.253-.457.468-.677.215-.221.586-.473 1.06-.463zm.015 2.63c-.09.224-.17.397-.265.66-.178.49-.36 1-.598 1.464-.12.231-.249.456-.459.677-.21.222-.568.48-1.045.48H3.345c.085.087.12.149.215.24.33.314.702.638 1.035.96.332.321.652.562.856 1.156.478 1.368-.121 2.57-.508 3.323-.015.03-.014.035-.03.064.125-.077.207-.113.339-.2.408-.268.84-.565 1.263-.816.423-.25.762-.518 1.442-.52a1 1 0 01.002 0c.668 0 1.023.26 1.457.506.433.247.877.542 1.297.807.203.128.342.192.523.295-.044-.142-.057-.228-.111-.383-.154-.442-.33-.915-.463-1.377-.132-.462-.321-.867-.094-1.549.179-.535.458-.814.766-1.173.308-.36.657-.733.976-1.09.084-.093.122-.158.2-.248l-2.24.01a1 1 0 01-.575-.18c-.55-.384-.687-.808-.883-1.25-.195-.442-.366-.92-.535-1.361-.078-.203-.143-.317-.219-.49z",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6W = memo(SvgSemiStarredSymbolicRtl);
var semi_starred_symbolic_rtl_default = Memo$6W;

const SvgSemiStarredSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 1.5c-.927-.003-1.436 3.134-2.188 3.656-.751.523-4.022.026-4.312.875-.29.85 2.655 2.274 2.937 3.125.283.851-1.247 3.69-.5 4.219.748.528 3.105-1.722 4.032-1.719h.03z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.957.129a1.55 1.55 0 00-.98.404c-.223.199-.369.41-.498.627-.26.433-.444.907-.623 1.375-.18.469-.347.93-.496 1.268-.085.191-.068.167-.114.236l-3.418-.01a1 1 0 00-.957.701c-.24.767.102 1.262.373 1.684.272.422.61.815.953 1.2.343.383.69.752.95 1.056.26.304.42.612.386.51-.088-.264-.017.014-.117.36-.1.347-.266.805-.43 1.274-.162.47-.324.942-.402 1.434-.039.246-.064.5-.01.805.054.304.238.71.598.95.355.239.746.264 1.04.23.295-.036.54-.123.776-.223.474-.202.924-.48 1.367-.76.444-.28.877-.565 1.22-.76.34-.194.657-.244.464-.244-.225 0 .094.043.426.24.332.197.752.484 1.183.768.432.283.87.566 1.332.771.232.103.471.191.768.227.297.035.708 0 1.06-.256a1 1 0 00.176-.166c.432-.517.508-1.257.385-1.768-.123-.51-.346-.896-.533-1.26-.373-.726-.592-1.206-.4-1.75a1 1 0 00.004-.01c-.063.185.08-.101.355-.367.274-.265.65-.594 1.025-.95.375-.358.752-.738 1.05-1.198.297-.46.57-1.122.314-1.83a1 1 0 00-.942-.66h-3.617c-.02-.032-.02-.025-.043-.07-.14-.274-.315-.744-.494-1.235-.179-.49-.36-1.001-.602-1.465A2.714 2.714 0 009.018.59C8.803.369 8.432.117 7.958.127zm-.015 2.63c.09.224.17.397.265.66.178.49.36 1 .598 1.464.12.231.249.456.459.677.21.222.568.48 1.045.48h2.346c-.085.087-.12.149-.215.24-.33.314-.702.638-1.035.96-.332.321-.652.562-.856 1.156-.478 1.368.121 2.57.508 3.323.015.03.014.035.03.064-.125-.077-.207-.113-.339-.2-.408-.268-.84-.565-1.263-.816-.423-.25-.762-.518-1.442-.52a1 1 0 00-.002 0c-.668 0-1.023.26-1.457.506-.433.247-.877.542-1.297.807-.203.128-.342.192-.523.295.044-.142.057-.228.111-.383.154-.442.33-.915.463-1.377.132-.462.321-.867.094-1.549-.179-.535-.458-.814-.766-1.173-.308-.36-.657-.733-.976-1.09-.084-.093-.122-.158-.2-.248l2.24.01a1 1 0 00.575-.18c.55-.384.687-.808.883-1.25.195-.442.366-.92.535-1.361.078-.203.143-.317.219-.49z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6X = memo(SvgSemiStarredSymbolic);
var semi_starred_symbolic_default = Memo$6X;

const SvgSendToSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    style: {
      marker: "none"
    },
    d: "M5.969 7.969A2.969 2.969 0 013 10.937 2.969 2.969 0 01.031 7.97 2.969 2.969 0 013.001 5a2.969 2.969 0 012.968 2.969zM15.937 12.969a2.969 2.969 0 01-2.968 2.969A2.969 2.969 0 0110 12.967 2.969 2.969 0 0112.969 10a2.969 2.969 0 012.968 2.969zM15.937 2.969a2.969 2.969 0 01-2.968 2.969A2.969 2.969 0 0110 2.967 2.969 2.969 0 0112.969 0a2.969 2.969 0 012.968 2.969z",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12.613 2.146L.748 7.924l11.854 5.969.9-1.788-8.248-4.15 8.236-4.012z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6Y = memo(SvgSendToSymbolic);
var send_to_symbolic_default = Memo$6Y;

const SvgSidebarHideSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.994 5h-1c-.31 0-.552.09-.75.281L3.588 8l2.656 2.719c.198.19.44.281.75.281h1v-1c0-.257-.13-.528-.313-.719L6.401 8l1.28-1.281c.183-.19.313-.462.313-.719z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      whiteSpace: "normal",
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.994 1v2h7v10h-7v2h7s.459.014.947-.23c.489-.245 1.053-.937 1.053-1.77V3c0-.833-.564-1.525-1.053-1.77C10.453.986 9.994 1 9.994 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6Z = memo(SvgSidebarHideSymbolic);
var sidebar_hide_symbolic_default = Memo$6Z;

const SvgSidebarShowSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.994 5h1c.31 0 .552.09.75.281L8.4 8l-2.656 2.719c-.198.19-.44.281-.75.281h-1v-1c0-.257.13-.528.312-.719L5.588 8 4.306 6.719c-.182-.19-.312-.462-.312-.719z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      whiteSpace: "normal",
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.994 1v2h7v10h-7v2h7s.459.014.947-.23c.489-.245 1.053-.937 1.053-1.77V3c0-.833-.564-1.525-1.053-1.77C10.453.986 9.994 1 9.994 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1
    },
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$6_ = memo(SvgSidebarShowSymbolic);
var sidebar_show_symbolic_default = Memo$6_;

const SvgSoftwareUpdateAvailableSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 .063L5.75 3.469 2.312 2.313 3.47 5.75.063 8l3.406 2.25-1.156 3.438L5.75 12.53 8 15.937l2.25-3.406 3.438 1.156-1.157-3.437L15.937 8l-3.406-2.25 1.156-3.438L10.25 3.47zm0 4.53l.719.688 2 2c.223.226.331.561.281.875V9h-.875a1.032 1.032 0 01-.844-.281L9 8.437V11H7V8.437l-.281.282A1.036 1.036 0 016 9H5v-.781a1.465 1.465 0 010-.094c-.04-.304.067-.624.281-.844l2-2z",
    fill: "#474747",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$6$ = memo(SvgSoftwareUpdateAvailableSymbolic);
var software_update_available_symbolic_default = Memo$6$;

const SvgSoftwareUpdateUrgentSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    className: "warning",
    d: "M8 .058L5.735 3.471 2.323 2.323 3.47 5.735.058 8l3.412 2.265-1.147 3.412 3.412-1.148L8 15.942l2.264-3.413 3.413 1.148-1.148-3.412L15.942 8l-3.413-2.265 1.148-3.412-3.413 1.148zM7 4h2v5H7zm1.03 5.737a1.272 1.272 0 110 2.544 1.272 1.272 0 010-2.544z",
    fill: "#f57900",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$70 = memo(SvgSoftwareUpdateUrgentSymbolic);
var software_update_urgent_symbolic_default = Memo$70;

const SvgStarNewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 .688c-1-.004-1.563 3.54-2.375 4.125-.812.584-4.344-.013-4.656.937-.313.95 2.882 2.578 3.187 3.531.305.953-1.338 4.128-.531 4.719.807.591 3.343-1.942 4.344-1.938 1 .005 3.5 2.585 4.312 2 .812-.584-.813-3.8-.5-4.75.313-.95 3.524-2.547 3.219-3.5-.305-.952-3.85-.377-4.656-.968C9.537 4.253 9 .69 8 .687zM7 5h2v2h2v2H9v2H7V9H5V7h2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$71 = memo(SvgStarNewSymbolic);
var star_new_symbolic_default = Memo$71;

const SvgStarredSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.974.126c-.43.009-.78.213-1.004.412-.224.199-.368.408-.497.624-.257.43-.441.9-.62 1.368-.18.468-.347.93-.497 1.27-.084.19-.063.163-.112.236l-3.398-.01a1.014 1.014 0 00-.977.698c-.232.743.098 1.226.368 1.646.27.42.611.815.954 1.199.343.383.688.752.948 1.056.26.304.421.607.391.518-.081-.244-.015.043-.116.392-.1.349-.27.807-.432 1.275-.163.469-.323.942-.4 1.427a2.255 2.255 0 00-.008.788c.052.296.226.69.591.935.36.241.772.27 1.074.234.303-.036.547-.124.786-.225.478-.204.929-.483 1.373-.764.444-.281.876-.565 1.217-.76.34-.194.665-.235.443-.235-.25 0 .072.036.403.232.331.197.751.484 1.183.768.432.284.868.566 1.335.773.233.104.475.195.78.231.305.037.735 0 1.091-.262a.982.982 0 00.117-.1c.513-.514.556-1.215.473-1.73-.082-.514-.266-.974-.442-1.414-.176-.441-.348-.86-.442-1.185-.093-.324-.073-.53-.076-.522-.054.16.086-.109.358-.372.275-.266.652-.594 1.026-.952.375-.357.751-.737 1.047-1.194.296-.458.56-1.1.31-1.79a1.016 1.016 0 00-.96-.66h-3.595c-.02-.032-.02-.024-.043-.067-.142-.277-.318-.747-.497-1.237-.179-.491-.36-1.003-.6-1.463-.12-.23-.25-.452-.464-.673-.215-.22-.593-.48-1.088-.47z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$72 = memo(SvgStarredSymbolic);
var starred_symbolic_default = Memo$72;

const SvgStartHereSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M13.63 0c-3.325 0-3.948 4.735-2.078 4.735S16.954 0 13.629 0zM8.11 4.148c.995.06 2.088-3.8.217-3.557-1.871.243-1.213 3.496-.217 3.557zM3.547 6.547c.708-.312.09-3.36-1.113-2.53-1.204.832.405 2.841 1.113 2.53zM5.542 4.95c.843-.171.89-3.629-.614-3.009-1.504.62-.228 3.182.614 3.01zm4.402 7.739c.15 1.142-.838 1.706-1.805.97-3.08-2.344 5.097-3.513 4.558-6.716-.447-2.658-8.603-1.84-9.532 2.32-.628 2.813 2.588 6.716 5.944 6.716 1.651 0 3.556-1.491 3.912-3.38.272-1.44-3.202-.863-3.077.09z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$73 = memo(SvgStartHereSymbolic);
var start_here_symbolic_default = Memo$73;

const SvgSwitchOffSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    viewBox: "0 0 16 16",
    id: "svg8",
    ...props
  }, /* @__PURE__ */ createElement("defs", {
    id: "defs2"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(0,-292.76666)"
  }, /* @__PURE__ */ createElement("circle", {
    style: {
      opacity: 1,
      vectorEffect: "none",
      fill: "none",
      fillOpacity: 1,
      stroke: "#000000",
      strokeWidth: 2,
      strokeLinecap: "butt",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      markerStart: "none",
      markerMid: "none",
      markerEnd: "none",
      paintOrder: "normal"
    },
    id: "path838",
    cx: 7.9791398,
    cy: 300.75595,
    r: 4.0169363
  }))));
  return render(rest, ...restArgs);
};
const Memo$74 = memo(SvgSwitchOffSymbolic);
var switch_off_symbolic_default = Memo$74;

const SvgSwitchOnSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    viewBox: "0 0 16 16",
    id: "svg8",
    ...props
  }, /* @__PURE__ */ createElement("defs", {
    id: "defs2"
  }), /* @__PURE__ */ createElement("g", {
    id: "layer1",
    transform: "translate(0,-292.76666)"
  }, /* @__PURE__ */ createElement("rect", {
    style: {
      opacity: 1,
      vectorEffect: "none",
      fill: "#000000",
      fillOpacity: 1,
      stroke: "none",
      strokeWidth: 2.58198857,
      strokeLinecap: "butt",
      strokeLinejoin: "round",
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeDashoffset: 0,
      strokeOpacity: 1,
      marker: "none",
      markerStart: "none",
      markerMid: "none",
      markerEnd: "none",
      paintOrder: "normal"
    },
    id: "rect817",
    width: 2,
    height: 9.9999971,
    x: 7,
    y: 295.76666
  }))));
  return render(rest, ...restArgs);
};
const Memo$75 = memo(SvgSwitchOnSymbolic);
var switch_on_symbolic_default = Memo$75;

const SvgSystemFileManagerSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.187 0C1.982 0 1 1.018 1 2.219V13.78C1 14.982 1.982 16 3.187 16h9.625C14.017 16 15 14.982 15 13.781V2.22C15 1.018 14.017 0 12.812 0zM3 3h10v11H3zm1 1v4h8.031V4zm2.344 1.438a.5.5 0 01.062 0 .5.5 0 01.594.5V6h2v-.063a.5.5 0 111 0V6c0 .545-.455 1-1 1H7c-.546 0-1-.455-1-1v-.063a.5.5 0 01.344-.5zM4.03 9v4h8.031V9zm2.313 1.438a.5.5 0 01.062 0 .5.5 0 01.594.5V11h2v-.063a.5.5 0 111 0V11c0 .545-.455 1-1 1H7c-.546 0-1-.455-1-1v-.063a.5.5 0 01.344-.5z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#474747",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$76 = memo(SvgSystemFileManagerSymbolic);
var system_file_manager_symbolic_default = Memo$76;

const SvgSystemHelpSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.969 0A1.964 1.964 0 000 1.969V14.03C0 15.122.878 16 1.969 16H14c.554 0 1-.446 1-1V4c0-.554-.446-1-1-1H2c-.554 0-1-.446-1-1s.446-1 1-1h12c0-.559-.441-1-1-1zM8 4.063A4.936 4.936 0 0112.938 9 4.936 4.936 0 018 13.938 4.936 4.936 0 013.062 9 4.936 4.936 0 018 4.062zm0 1c-.637 0-1.22.174-1.75.437L6.969 7c.313-.163.656-.281 1.031-.281.375 0 .718.118 1.031.281l.719-1.5c-.53-.263-1.113-.438-1.75-.438zM4.5 7.25c-.264.53-.438 1.112-.438 1.75 0 .648.166 1.245.438 1.781l1.5-.75c-.163-.313-.281-.655-.281-1.031 0-.361.099-.696.25-1zm7.031 0l-1.5.75c.151.304.25.639.25 1 0 .376-.118.718-.281 1.031l1.5.75a3.915 3.915 0 00.031-3.531zM8 7.719c-.717 0-1.281.562-1.281 1.281 0 .719.564 1.281 1.281 1.281S9.281 9.72 9.281 9c0-.719-.564-1.281-1.281-1.281zM9.031 11c-.313.163-.656.281-1.031.281a2.24 2.24 0 01-1-.25l-.75 1.5c.527.26 1.118.406 1.75.406.637 0 1.22-.174 1.75-.437z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 5.031c-.642 0-1.245.137-1.781.407L6.96 6.97c.39-.179.549-.212 1.042-.246.547-.002.72.135 1.027.233l.72-1.52A3.807 3.807 0 008 5.032zM4.437 7.25A4.01 4.01 0 004 9.031c0 .66.193 1.266.469 1.813l1.527-.776c-.158-.28-.237-.496-.28-1.057.043-.497.062-.47.23-.988zm7.125 0l-1.496.745c.15.37.198.481.223 1.009-.006.23.015.53-.267 1.085l1.51.755a3.99 3.99 0 00.437-1.813c0-.645-.141-1.242-.407-1.781zm-3.534 4.04c-.475-.04-.618-.03-1.012-.234l-.797 1.569c.536.27 1.139.437 1.781.437.642 0 1.214-.167 1.75-.437l-.746-1.567c-.396.195-.433.174-.976.231z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.29 9.008a1.283 1.28 0 01-1.282 1.28 1.283 1.28 0 01-1.284-1.28A1.283 1.28 0 018.008 7.73 1.283 1.28 0 019.29 9.01z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$77 = memo(SvgSystemHelpSymbolic);
var system_help_symbolic_default = Memo$77;

const SvgSystemLockScreenSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 7h10c.554 0 1 .446 1 1v3c0 .554-.446 1-1 1H3c-.554 0-1-.446-1-1V8c0-.554.446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2 10h12v4H2z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 1C5.355 1 4 2.355 4 4v6c0 1.645 1.355 3 3 3h2c1.645 0 3-1.355 3-3V4c0-1.645-1.355-3-3-3zm0 2h2c.571 0 1 .429 1 1v6c0 .571-.429 1-1 1H7c-.571 0-1-.429-1-1V4c0-.571.429-1 1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$78 = memo(SvgSystemLockScreenSymbolic);
var system_lock_screen_symbolic_default = Memo$78;

const SvgSystemLogOutSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.014 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 1s-.459-.014-.947.23C2.564 1.475 2 2.167 2 3v10c0 .833.564 1.525 1.053 1.77.488.244.947.23.947.23h8c.833 0 1.525-.564 1.77-1.053.244-.488.23-.947.23-.947v-2a1 1 0 10-2 0v2H4V3h8v2a1 1 0 102 0V3c0-.833-.564-1.525-1.053-1.77C12.46.986 12 1 12 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.293 5.293L5.586 8l2.707 2.707 1.414-1.414L8.414 8l1.293-1.293z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 10h1v1H9zm0-5h1v1H9z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 5c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm0 4c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 7a1 1 0 100 2h7a1 1 0 100-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$79 = memo(SvgSystemLogOutSymbolic);
var system_log_out_symbolic_default = Memo$79;

const SvgSystemRebootSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.014",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11.049 1.823a1 1 0 00-.533 1.87A4.995 4.995 0 0112.9 9.005a4.993 4.993 0 01-4.257 3.97 4.99 4.99 0 01-5.127-2.753 4.993 4.993 0 01.949-5.742A1 1 0 103.05 3.065a7.007 7.007 0 00-1.33 8.04 7.005 7.005 0 007.18 3.85A7.005 7.005 0 0014.858 9.4a7.006 7.006 0 00-3.336-7.434 1 1 0 00-.474-.142z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.984 0A1 1 0 007 1.015v5a1 1 0 102 0v-5A1 1 0 007.984.001z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 1.014c.552 0 1 .475 1 .994v4.006l-5-5z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7a = memo(SvgSystemRebootSymbolic);
var system_reboot_symbolic_default = Memo$7a;

const SvgSystemRunSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11.375.25c-.24.435-.468 1.006-.719 1.438-.094-.007-.186-.032-.281-.032-.332 0-.66.049-.969.125C9.101 1.398 8.776.883 8.47.5a5.381 5.381 0 00-.813.375c.096.483.277 1.071.375 1.562a3.857 3.857 0 00-.875.875c-.491-.098-1.08-.279-1.562-.375a5.38 5.38 0 00-.375.813c.383.307.898.632 1.28.937a4.053 4.053 0 00-.124.97c0 .095.024.187.031.28-.432.252-1.002.48-1.437.72.05.274.128.553.218.812.492-.01 1.1-.095 1.594-.094.187.392.42.754.719 1.063-.172.467-.448 1.008-.625 1.468.213.176.45.326.687.469.37-.32.776-.771 1.157-1.094a3.93 3.93 0 001.218.313c.165.477.305 1.088.47 1.562a5.44 5.44 0 00.874-.062c.08-.493.11-1.119.188-1.625.41-.117.81-.267 1.156-.5.424.264.899.629 1.312.875.224-.19.435-.402.625-.625-.246-.414-.61-.888-.875-1.313.233-.345.383-.746.5-1.156.507-.077 1.132-.107 1.625-.188a5.41 5.41 0 00.063-.875c-.475-.164-1.086-.304-1.563-.468A3.963 3.963 0 0014.001 4c.322-.38.773-.787 1.094-1.156a5.562 5.562 0 00-.47-.688c-.46.177-1 .453-1.468.625a3.984 3.984 0 00-1.062-.719c-.001-.494.084-1.102.093-1.593a5.63 5.63 0 00-.812-.219zm-1 3.406a2 2 0 110 4 2 2 0 010-4z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3.687 7.75c-.23.047-.444.131-.656.219-.017.624.087 1.442-.156 1.656-.24.21-1.039.034-1.656-.031a3.627 3.627 0 00-.313.75c.478.396 1.14.839 1.156 1.156.016.321-.626.805-1.062 1.25.103.258.25.493.406.719.608-.127 1.366-.374 1.625-.188.263.19.265 1.006.344 1.625.25.075.512.105.781.125.281-.554.567-1.32.875-1.406.316-.089.964.458 1.5.781.219-.151.413-.337.594-.531-.254-.572-.721-1.292-.594-1.594.128-.302.975-.47 1.563-.687.004-.074.03-.144.03-.219 0-.191-.034-.379-.062-.563-.606-.16-1.467-.24-1.625-.53-.156-.289.242-1.062.438-1.657a3.687 3.687 0 00-.656-.469c-.501.375-1.085.995-1.407.938-.317-.056-.663-.82-1-1.344-.04.007-.085-.008-.125 0zm.625 1.875a1.688 1.688 0 110 3.375 1.688 1.688 0 010-3.375z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7b = memo(SvgSystemRunSymbolic);
var system_run_symbolic_default = Memo$7b;

const SvgSystemSearchSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.508 1C3.48 1 1.002 3.473 1.002 6.5c0 3.026 2.478 5.5 5.506 5.5s5.504-2.474 5.504-5.5c0-3.027-2.476-5.5-5.504-5.5zm0 2a3.486 3.486 0 013.504 3.5c0 1.944-1.556 3.5-3.504 3.5a3.488 3.488 0 01-3.506-3.5C3.002 4.555 4.56 3 6.508 3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 8.99a1 1 0 00-.695 1.717l4.004 4a1 1 0 101.414-1.414l-4.004-4A1 1 0 0010 8.99z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7c = memo(SvgSystemSearchSymbolic);
var system_search_symbolic_default = Memo$7c;

const SvgSystemShutdownSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.014",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.04 1.815a1 1 0 00-.546.14 7.009 7.009 0 00-3.254 7.87 7.006 7.006 0 006.75 5.19 7.007 7.007 0 006.766-5.17 7.01 7.01 0 00-3.233-7.88 1 1 0 10-1.007 1.729 4.991 4.991 0 012.308 5.627 4.99 4.99 0 01-4.832 3.693 4.989 4.989 0 01-4.82-3.707 4.992 4.992 0 012.324-5.62 1 1 0 00-.457-1.872z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.984 0A1 1 0 007 1.015v5a1 1 0 102 0v-5A1 1 0 007.984.001z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7d = memo(SvgSystemShutdownSymbolic);
var system_shutdown_symbolic_default = Memo$7d;

const SvgSystemSoftwareInstallSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 8h10v7.059c0 .492-.472.937-.996.937H4c-.539 0-1-.43-1-1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.793 2.969a1 1 0 00-.752.379L3.225 6.807a1 1 0 00-.225.63v1a1 1 0 102 0v-.644L7.592 4.61a1 1 0 00-.799-1.642zm2.213 3.004a1 1 0 00-.144 1.988l2.17.379v.16a1 1 0 102 0v-1a1 1 0 00-.828-.984L9.205 5.99a1 1 0 00-.199-.017z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7e = memo(SvgSystemSoftwareInstallSymbolic);
var system_software_install_symbolic_default = Memo$7e;

const SvgSystemSwitchUserSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.003 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11 1a2 2 0 100 4 2 2 0 000-4zM5 4a2 2 0 100 4 2 2 0 000-4zm5 2c-1.31 0-2.407.835-2.819 2h7.637A2.985 2.985 0 0012 6h-1zM4 9c-1.662 0-3 1.338-3 3v1c0 .554.446 1 1 1h6c.554 0 1-.446 1-1v-1c0-1.662-1.338-3-3-3z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15.16 15H16v-1c.008-1.673 0-5 0-5h-6v.846A1 1 0 0011 11h1.586l-1.643 1.643-.65.65c-.654.636-.185 1.744.726 1.717.26-.008.507-.117.688-.303l.628-.628L14 12.414V14c0 .681.449 1 1.16 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7f = memo(SvgSystemSwitchUserSymbolic);
var system_switch_user_symbolic_default = Memo$7f;

const SvgSystemUsersSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M11 4a2 2 0 00-2 2 2 2 0 002 2 2 2 0 002-2 2 2 0 00-2-2zm-1 5c-1.662 0-3 1.338-3 3v1c0 .554.446 1 1 1h6c.554 0 1-.446 1-1v-1c0-1.662-1.338-3-3-3z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 2a2 2 0 00-2 2 2 2 0 002 2 2 2 0 002-2 2 2 0 00-2-2zM4 7c-1.662 0-3 1.338-3 3v1c0 .554.446 1 1 1h4c0-1.665 1.056-3.038 2.517-3.625A2.986 2.986 0 006 7zm5 3.268c-.6.34-1 .976-1 1.732.554 0 1-.446 1-1v-.25z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7g = memo(SvgSystemUsersSymbolic);
var system_users_symbolic_default = Memo$7g;

const SvgTabNewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.009 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.003 1s-.709-.014-1.447.355C1.817 1.725 1.003 2.667 1.003 4v9h-1l-.004 2h.004l3 .01V15h13v-2h-1V4s.014-.709-.355-1.447C14.278 1.814 13.336 1 12.003 1zm0 2h8c.667 0 .725.186.855.447.131.262.145.553.145.553v9h-10V4c0-.667.186-.725.447-.855.262-.131.553-.145.553-.145z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.009 5v2h-2v2h2v2h2V9h2V7h-2V5z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7h = memo(SvgTabNewSymbolic);
var tab_new_symbolic_default = Memo$7h;

const SvgTaskDueSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M.969 2.5v11.969C.969 16 2.469 16 2.469 16h4.5v-2h-4V3h1V1h-1.5s-1.5 0-1.5 1.5zm10-1.5v2H12v4.031L13.97 7V2.5c0-1.5-1.5-1.5-1.5-1.5zM4.031 5.031V12H6.97V8.998S6.97 7 8.97 7h2V5zM5.5 0h3.969c.277 0 .5.223.5.5v3c0 .277-.223.5-.5.5H5.5a.499.499 0 01-.5-.5v-3c0-.277.223-.5.5-.5z",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    className: "warning",
    d: "M8.969 8c-1 0-1 1-1 1v6s0 1 1 1h6c1 0 1-1 1-1V9c0-1-1-1-1-1zm2 1h2v2.5s0 .5-.5.5h-1c-.5 0-.5-.5-.5-.5zm.5 4h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#f57900"
  })));
  return render(rest, ...restArgs);
};
const Memo$7i = memo(SvgTaskDueSymbolic);
var task_due_symbolic_default = Memo$7i;

const SvgTaskPastDueSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.469 1s-1.5 0-1.5 1.5v11.969s0 1.53 1.5 1.53h7.5v-2h-7V3h1V1zm8.5 0v2h1v7h2V2.5c0-1.5-1.5-1.5-1.5-1.5z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.5 0h3.969c.277 0 .5.223.5.5v3c0 .277-.223.5-.5.5H5.5a.499.499 0 01-.5-.5v-3c0-.277.223-.5.5-.5z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10.969 11h1.375l1.125 1.094L14.563 11h1.406v1.469l-1.094 1.062 1.094 1.063V16H14.53l-1.062-1.063L12.406 16H10.97v-1.406l1.062-1.063-1.062-1.062z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7j = memo(SvgTaskPastDueSymbolic);
var task_past_due_symbolic_default = Memo$7j;

const SvgTextEditorSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.002 10L12 3l2 2-7 7H5z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.094 0C.525 0 0 .503 0 1.063v13.874C0 15.498.525 16 1.094 16h10.812c.558 0 1.074-.485 1.094-1.031V8l-2 2v4H2V2h5l2 2 1.531-1.531L8.344.344A1.12 1.12 0 007.563 0z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14.19 1.011a.513.513 0 00-.364.152l-1.162 1.16 2.004 2.005 1.163-1.162a.514.514 0 000-.728l-1.277-1.275a.514.514 0 00-.364-.152z",
    style: {
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7k = memo(SvgTextEditorSymbolic);
var text_editor_symbolic_default = Memo$7k;

const SvgTextXGenericSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.014 16.014",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747",
    fillRule: "evenodd"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.014 1.014a1 1 0 00-1 1v13a1 1 0 001 1h10a1 1 0 001-1v-9.5a1 1 0 00-.293-.707l-3.5-3.5a1 1 0 00-.707-.293zm1 2H9.1l2.914 2.914v8.086h-8z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.014 2.014v4h4z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7l = memo(SvgTextXGenericSymbolic);
var text_x_generic_symbolic_default = Memo$7l;

const SvgThunderboltAcquiringSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 8.5A1.5 1.5 0 014.5 10 1.5 1.5 0 013 8.5 1.5 1.5 0 014.5 7 1.5 1.5 0 016 8.5zm4 0A1.5 1.5 0 018.5 10 1.5 1.5 0 017 8.5 1.5 1.5 0 018.5 7 1.5 1.5 0 0110 8.5zm4 0a1.5 1.5 0 01-1.5 1.5A1.5 1.5 0 0111 8.5 1.5 1.5 0 0112.5 7 1.5 1.5 0 0114 8.5z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 .992C7.987.992 6.992 1.83 6.992 3v3h1V3c0-.555.6-1.008 1.008-1.008.403 0 1.008.468 1.008 1.008v3h1V3c0-1.164-.99-2.008-2.008-2.008zm5.504 1.927s-.357-.015-.73.168c-.374.183-.782.658-.782 1.332V6h1V4.419c0-.347.094-.372.22-.434.128-.062.27-.066.27-.066zM2.992 4.561V6h1V4.56zm0 6.439v2.46c0 1.506 1.273 2.55 2.52 2.5a2.68 2.68 0 001.666-.681c.474-.424.814-1.06.814-1.819V11h-1v2.46c0 .47-.189.814-.48 1.075-.292.26-.694.412-1.04.425-.637.026-1.48-.574-1.48-1.5V11zm7.016 0v2c0 .636.266 1.169.654 1.504.388.335.873.488 1.338.488.986 0 1.992-.801 1.992-1.992v-2h-1v2c0 .604-.57.992-.992.992a1.08 1.08 0 01-.684-.244c-.182-.158-.308-.371-.308-.748v-2zM2 0v2H1v1c0 1.108.892 2 2 2h1c1.108 0 2-.892 2-2V2H5V0H4v2H3V0z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.5
  }))));
  return render(rest, ...restArgs);
};
const Memo$7m = memo(SvgThunderboltAcquiringSymbolic);
var thunderbolt_acquiring_symbolic_default = Memo$7m;

const SvgThunderboltSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.852 6h3.693l-4.338 6.241 1.672.174-4.184 3.578 1.964-1.036c.318.038 1.01.064 1.337.064A7.005 7.005 0 0015 8.015c-.016-2.468-1.28-5.007-4.003-6.33l.16-1.676zM1 8.015a6.99 6.99 0 003.581 6.114l.319-3.72 1.01 1.206L7.715 8H4l3.16-6.934A6.999 6.999 0 001 8.016",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7n = memo(SvgThunderboltSymbolic);
var thunderbolt_symbolic_default = Memo$7n;

const SvgToolsCheckSpellingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 3.012v2h1.92c-.055 0 .084.159.084.082v.924H4C2.284 6.018.97 7.143.945 8.502c-.012.68.306 1.363.862 1.822.555.46 1.315.7 2.193.7h3.004v-5.93c0-1.171-.887-2.082-2.084-2.082zm1 5.006h1.004v1.005H4c-.52 0-.794-.137-.92-.242-.126-.104-.136-.172-.135-.244.003-.144.085-.52 1.055-.52zM7.996 2v9.023H11c.939 0 1.769-.372 2.299-.959.53-.586.766-1.336.756-2.066a3.079 3.079 0 00-.791-2.043C12.737 5.378 11.92 5 11 5H9.996V2zm2 5H11c.422 0 .626.126.787.303.162.177.264.447.268.722.004.276-.089.53-.24.698-.152.167-.356.3-.815.3H9.996zM3 11.293L.646 13.646a.5.5 0 10.708.708L3 12.707l2 2 2-2 2 2 2-2 2 2 2.354-2.353a.5.5 0 10-.708-.708L13 13.293l-2-2-2 2-2-2-2 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7o = memo(SvgToolsCheckSpellingSymbolic);
var tools_check_spelling_symbolic_default = Memo$7o;

const SvgTouchDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.015",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.072 0a6.996 6.996 0 00-3.488.891 1 1 0 10.975 1.746 4.997 4.997 0 014.97.05A4.996 4.996 0 0113 7v1a1 1 0 102 0V7a1 1 0 00-.01-.136A7 7 0 0011.54.96a6.993 6.993 0 00-3.468-.96zM2.855 2.82a1 1 0 00-.722.375l1.465 1.463c.053-.1.098-.203.158-.3a1 1 0 00-.8-1.538 1 1 0 00-.1 0zM8 3C6.367 3 4.97 4.002 4.355 5.416L6 7.061V7c0-1.117.884-2 2-2s2 .883 2 2v4.058l3.012 3.012a1 1 0 00-.305-.778c-.382-.382-.55-.736-.633-.984C11.991 12.06 12 12 12 12V7a1 1 0 00-.022-.218C11.862 4.687 10.122 3 8 3zM1.437 4.62a7.069 7.069 0 00-.425 2.212A1 1 0 001 7v5.063a1 1 0 102 0V7c0-.254.024-.506.062-.755zm6.547 1.367A1 1 0 007 7v1.06l2 1.999V7a1 1 0 00-1.016-1.013zM4 7.182V8a1 1 0 001.617.8zm.984 2.805A1 1 0 004 11v3a1 1 0 102 0v-3a1 1 0 00-1.016-1.013zM14 10a1 1 0 00-1 1 1 1 0 001 1 1 1 0 001-1 1 1 0 00-1-1zm-7 .182V12s0 .595.145 1.32c.145.726.412 1.652 1.148 2.387a1 1 0 101.414-1.414c-.264-.264-.497-.839-.602-1.363a5.008 5.008 0 01-.095-.738zm3.525 3.525c.187.325.433.665.768 1a1 1 0 00.518.288z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.531.47L.47 1.53l14 14 1.062-1.062z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.53.47L.47 1.53l14 14 1.063-1.06z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7p = memo(SvgTouchDisabledSymbolic);
var touch_disabled_symbolic_default = Memo$7p;

const SvgTouchpadDisabledSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.031 1a3 3 0 00-1.576.455l1.55 1.55c.01 0 .017-.005.026-.005h8.938C12.565 3 13 3.435 13 4.03V10h-3l1 1h2v.969c0 .298-.11.555-.293.738l1.402 1.402c.55-.549.891-1.306.891-2.14V4.03A3.038 3.038 0 0011.969 1zM.29 2.762C.11 3.149 0 3.577 0 4.032v7.937A3.038 3.038 0 003.031 15h8.938c.173 0 .34-.025.506-.053L10.527 13H8v-2h.527l-1-1H2V4.473zM2 11h5v2H3.031C2.435 13 2 12.565 2 11.969z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.531.469L.47 1.53l14 14 1.062-1.062z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7q = memo(SvgTouchpadDisabledSymbolic);
var touchpad_disabled_symbolic_default = Memo$7q;

const SvgTvSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 3C2.338 3 1 4.338 1 6v7c0 1.662 1.338 3 3 3h8c1.662 0 3-1.338 3-3V6c0-1.662-1.338-3-3-3zm.5 1h7S13 5 13 8s-1.5 4-1.5 4h-7S3 11 3 8s1.5-4 1.5-4zM11 14h1v1h-1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 1a1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1 1 1 0 011 1zm5.988 0a1 1 0 01-1 1 1 1 0 01-1-1 1 1 0 011-1 1 1 0 011 1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.355.648l-.71.704 2.618 2.654 1.508-.024 2.586-2.632-.713-.7-2.299 2.34-.67.01z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7r = memo(SvgTvSymbolic);
var tv_symbolic_default = Memo$7r;

const SvgUninterruptiblePowerSupplySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.197 0A2.217 2.217 0 002 2.201V13.8c0 1.199.995 2.2 2.197 2.2h7.607A2.215 2.215 0 0014 13.799V2.2c0-1.199-.994-2.2-2.196-2.2zm0 2h7.607c.124 0 .196.07.196.201V13.8c0 .13-.072.201-.196.201H4.197C4.073 14 4 13.93 4 13.799V2.2c0-.13.073-.201.197-.201z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.78 5a1.023 1.023 0 00-.47.281l-3.03 3a1.018 1.018 0 00-.282.906V10h2.47l-1.187 1.274c-.214.219-.32.54-.28.843a1.464 1.464 0 000 .094v.781H7a1.03 1.03 0 00.719-.281l3-2.992c.184-.19.287-.455.281-.719a.87.87 0 000-.125V8H8.436l1.312-1.281c.215-.22.322-.54.281-.844a1.464 1.464 0 000-.094V5H9.03a1.015 1.015 0 00-.25 0z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Bitstream Vera Sans'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontSize: "xx-small",
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 3h1v1H5zm2 0h4v1H7z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7s = memo(SvgUninterruptiblePowerSupplySymbolic);
var uninterruptible_power_supply_symbolic_default = Memo$7s;

const SvgUserAvailableSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 1A2.495 2.495 0 001 3.5v5C1 9.885 2.115 11 3.5 11h6.375L13 15v-4.063A2.486 2.486 0 0015 8.5v-5C15 2.115 13.885 1 12.5 1z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7t = memo(SvgUserAvailableSymbolic);
var user_available_symbolic_default = Memo$7t;

const SvgUserAwaySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 1A2.495 2.495 0 001 3.5v5C1 9.885 2.115 11 3.5 11h6.375L13 15v-4.063A2.486 2.486 0 0015 8.5v-5C15 2.115 13.885 1 12.5 1zM8 3h1c.276 0 .538.1.719.281l2 2 .687.719-.687.719-2 2A1.015 1.015 0 019 9H8V8c0-.276.1-.538.281-.719L8.562 7H4V5h4.563l-.282-.281A1.015 1.015 0 018 4z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7u = memo(SvgUserAwaySymbolic);
var user_away_symbolic_default = Memo$7u;

const SvgUserBookmarksSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5.525 0C4.433 0 3.61.68 3.295 1.295c-.314.615-.3 1.205-.3 1.205v13.117l5-2.5 4.997 2.5.01-7.617h-.004l-.004-5.5s.014-.584-.293-1.197C12.394.689 11.577 0 10.494 0zm0 2h4.97c.416 0 .349.06.417.197a.956.956 0 01.082.303l.004 7.5-.002 2.383-3.002-1.5-3 1.5V2.5s.013-.16.082-.295c.069-.134.01-.205.45-.205z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$7v = memo(SvgUserBookmarksSymbolic);
var user_bookmarks_symbolic_default = Memo$7v;

const SvgUserBusySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 1A2.495 2.495 0 001 3.5v5C1 9.885 2.115 11 3.5 11h6.375L13 15v-4.063A2.486 2.486 0 0015 8.5v-5C15 2.115 13.885 1 12.5 1zM5 5h6v2H5z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7w = memo(SvgUserBusySymbolic);
var user_busy_symbolic_default = Memo$7w;

const SvgUserDesktopSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.001 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1 1a1 1 0 00-1 1v11s-.014.459.23.947C.476 14.436 1.168 15 2 15h1.832a1 1 0 00.326 0H14s.459.014.947-.23C15.436 14.525 16 13.833 16 13V7a1 1 0 00-1-1H4a1 1 0 00-1 1v6H2V3h3.586l1.707 1.707A1 1 0 008 5h5a1 1 0 100-2H8.414L6.707 1.293A1 1 0 006 1zm4 7h9v5H5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1 6h1s0-1 1-1h6L6 2H1z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4 7h11v7H4zm9-3h1v1h-1zm2 2h1v1h-1zM3 6h1v1H3z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7x = memo(SvgUserDesktopSymbolic);
var user_desktop_symbolic_default = Memo$7x;

const SvgUserHomeSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.023 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.008 4.986A1 1 0 002.023 6v7a1 1 0 001 1h10a1 1 0 001-1V6a1 1 0 10-2 0v6h-8V6a1 1 0 00-1.015-1.014z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.031 1a1 1 0 00-.601.186l-7 5a1.001 1.001 0 101.164 1.628L8.012 3.23l6.418 4.585a1.001 1.001 0 101.164-1.628l-7-5A1 1 0 008.03 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.012 8.01h3.03V13h-3.03z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15.012 7h1v1h-1zm-15 0h1v1h-1z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7y = memo(SvgUserHomeSymbolic);
var user_home_symbolic_default = Memo$7y;

const SvgUserIdleSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 1A2.495 2.495 0 001 3.5v5C1 9.885 2.115 11 3.5 11h6.375L13 15v-4.063A2.486 2.486 0 0015 8.5v-5C15 2.115 13.885 1 12.5 1z",
    opacity: 0.5,
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7z = memo(SvgUserIdleSymbolic);
var user_idle_symbolic_default = Memo$7z;

const SvgUserInfoSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 0a3 3 0 100 6 3 3 0 000-6zM4.5 7A4.49 4.49 0 000 11.5v.5c0 1 1 1 1 1h6V8.875c0-.83.587-1.554 1.355-1.79A4.532 4.532 0 007.5 7zM9 9v4h1V9z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.875 8A.863.863 0 008 8.875v6.25c0 .492.383.875.875.875h6.25a.863.863 0 00.875-.875v-6.25A.863.863 0 0015.125 8zM11 9h2v1h-2zm0 2h2v4h-2z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7A = memo(SvgUserInfoSymbolic);
var user_info_symbolic_default = Memo$7A;

const SvgUserInvisibleSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 1A2.495 2.495 0 001 3.5v5C1 9.885 2.115 11 3.5 11h6.375L13 15v-4.063A2.486 2.486 0 0015 8.5v-5C15 2.115 13.885 1 12.5 1zm0 2h9c.277 0 .5.223.5.5v5c0 .277-.223.5-.5.5h-9a.499.499 0 01-.5-.5v-5c0-.277.223-.5.5-.5z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7B = memo(SvgUserInvisibleSymbolic);
var user_invisible_symbolic_default = Memo$7B;

const SvgUserNotTrackedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      enableBackground: "new"
    },
    id: "svg7384",
    viewBox: "0 0 16 16.000645",
    ...props
  }, /* @__PURE__ */ createElement("title", {
    id: "title8473"
  }, "Gnome Symbolic Icons"), /* @__PURE__ */ createElement("defs", {
    id: "defs7386"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-332,-291.99935)",
    id: "layer10"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-332,-227.99935)",
    id: "layer1"
  }, /* @__PURE__ */ createElement("path", {
    d: "m 338.70508,228 a 0.50005,0.50005 0 0 0 -0.4375,0.64062 l 0.42578,1.54297 c -0.42482,0.10963 -0.83882,0.26265 -1.23828,0.45703 l -1.02149,-1.76562 a 0.50005,0.50005 0 0 0 -0.45703,-0.25586 0.50005,0.50005 0 0 0 -0.41015,0.75781 l 1.01757,1.75782 c -0.0779,0.05 -0.14853,0.10958 -0.2246,0.16211 l -2.82813,-2.82813 -1.06055,1.06055 14,14 1.06055,-1.06055 -2.69531,-2.69531 C 346.75295,238.06527 348,236 348,236 c 0,0 -0.52469,-0.86941 -1.41016,-1.94531 l 0.76368,-0.76367 a 0.50005,0.50005 0 0 0 -0.36329,-0.85743 0.50005,0.50005 0 0 0 -0.34375,0.15039 l -0.7207,0.72071 c -0.20029,-0.21829 -0.41092,-0.42651 -0.63476,-0.64453 l 1.10351,-1.41407 a 0.50005,0.50005 0 0 0 -0.41601,-0.8125 0.50005,0.50005 0 0 0 -0.37305,0.19727 l -1.05078,1.34375 c -0.25997,-0.21874 -0.52743,-0.4303 -0.8086,-0.62695 l 1.07227,-1.73828 a 0.50005,0.50005 0 0 0 -0.45117,-0.76758 0.50005,0.50005 0 0 0 -0.39844,0.24218 l -1.07617,1.73829 c -0.3637,-0.1997 -0.73969,-0.3706 -1.12696,-0.50391 l 0.57032,-1.64648 A 0.50005,0.50005 0 0 0 341.875,228 a 0.50005,0.50005 0 0 0 -0.48242,0.34375 l -0.59766,1.7207 C 340.53347,230.02295 340.26823,230 340,230 c -0.10545,0 -0.20804,0.0187 -0.3125,0.0254 l -0.45508,-1.65039 a 0.50005,0.50005 0 0 0 -0.47656,-0.375 0.50005,0.50005 0 0 0 -0.0508,0 z M 340,232 c 3.86599,0 6,4 6,4 0,0 -0.79592,1.48605 -2.29102,2.64648 l -1.13281,-1.13281 C 342.83878,237.06794 343,236.55479 343,236 c 0,-1.65685 -1.34315,-3 -3,-3 -0.55479,0 -1.06794,0.16122 -1.51367,0.42383 l -0.88086,-0.88086 C 338.30839,232.21468 339.10741,232 340,232 Z m -6.99023,0.43359 c -0.45469,-0.0125 -0.68858,0.53942 -0.36329,0.85743 l 0.76368,0.76367 C 332.52469,235.13059 332,236 332,236 c 0,0 3.58172,6 8,6 0.88494,0 1.73354,-0.24784 2.5293,-0.63281 l -1.47852,-1.47852 C 340.71469,239.9542 340.36779,240 340,240 c -3.86599,0 -6,-4 -6,-4 0,0 0.48113,-0.87041 1.36523,-1.79688 l -1.09765,-1.0957 c -0.0632,0.0653 -0.13216,0.13057 -0.19336,0.19727 l -0.7207,-0.72071 c -0.0907,-0.0929 -0.21399,-0.14639 -0.34375,-0.15039 z m 6.49804,1.39258 c 0.37409,0 0.68164,0.31016 0.68164,0.69727 0,0.16771 -0.0663,0.31822 -0.16211,0.4414 l -0.96289,-0.96289 c 0.12039,-0.10641 0.27318,-0.17578 0.44336,-0.17578 z m -2.49219,2.02735 C 337.01324,235.9031 337,235.9499 337,236 c 0,1.65685 1.34315,3 3,3 0.0508,0 0.0982,-0.0136 0.14844,-0.0156 z",
    id: "path16978",
    style: {
      fill: "#2e3436",
      fillOpacity: 1,
      stroke: "none"
    }
  })), /* @__PURE__ */ createElement("g", {
    transform: "translate(-332,-291.99935)",
    id: "layer11"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-332,-227.99935)",
    id: "layer7"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-332,-227.99935)",
    id: "layer6"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-332,-227.99935)",
    id: "layer5"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-332,-227.99935)",
    id: "layer9"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-332,-227.99935)",
    id: "layer2"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-332,-227.99935)",
    id: "layer8"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-332,-227.99935)",
    id: "layer3"
  }), /* @__PURE__ */ createElement("g", {
    transform: "translate(-332,-227.99935)",
    id: "layer4"
  })));
  return render(rest, ...restArgs);
};
const Memo$7C = memo(SvgUserNotTrackedSymbolic);
var user_not_tracked_symbolic_default = Memo$7C;

const SvgUserOfflineSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 1A2.495 2.495 0 001 3.5v5C1 9.885 2.115 11 3.5 11h6.375L13 15v-4.063A2.486 2.486 0 0015 8.5v-5C15 2.115 13.885 1 12.5 1zM5 3h1c.276 0 .538.1.719.281L8 4.562l1.281-1.28C9.462 3.1 9.724 3 10 3h1v1c0 .276-.1.538-.281.719L9.438 6l1.28 1.281c.182.181.282.443.282.719v1h-1c-.276 0-.538-.1-.719-.281L8 7.438l-1.281 1.28A1.015 1.015 0 016 9H5V8c0-.276.1-.538.281-.719L6.563 6 5.28 4.719A1.015 1.015 0 015 4z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7D = memo(SvgUserOfflineSymbolic);
var user_offline_symbolic_default = Memo$7D;

const SvgUserStatusPendingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.5 1A2.495 2.495 0 001 3.5V4h14v-.5C15 2.115 13.885 1 12.5 1zM1.062 9A2.486 2.486 0 003.5 11h6.375L13 15v-4.063A2.488 2.488 0 0014.938 9z",
    opacity: 0.5
  }), /* @__PURE__ */ createElement("path", {
    d: "M5 6.5A1.5 1.5 0 013.5 8 1.5 1.5 0 012 6.5 1.5 1.5 0 013.5 5 1.5 1.5 0 015 6.5zm4 0A1.5 1.5 0 017.5 8 1.5 1.5 0 016 6.5 1.5 1.5 0 017.5 5 1.5 1.5 0 019 6.5zm4 0A1.5 1.5 0 0111.5 8 1.5 1.5 0 0110 6.5 1.5 1.5 0 0111.5 5 1.5 1.5 0 0113 6.5z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7E = memo(SvgUserStatusPendingSymbolic);
var user_status_pending_symbolic_default = Memo$7E;

const SvgUserTrashFullSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.001 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 2v-.969H5V2zm.531-1.969c.49 0 .796.229 1.031.469.236.24.438.559.438 1.031V2h2v2H1V2h2v-.375c.024-.43.17-.752.406-1.031A1.53 1.53 0 014.562.062v-.03h7.969zM4 5H2C.326 7.927.862 10.854 2 13.781 2.435 14.901 2.982 16 4.188 16h8.625c1.205 0 1.776-1.09 2.187-2.219C16.042 10.92 16.599 8.027 15 5h-2c1.721 2.948.985 5.97 0 9H4c-1.096-3.033-1.631-6.05 0-9zm4.969-.016V13H8V4.983zM7 4.984c-1.762 2.223-.83 5.631 0 8.017H6c-.825-2.309-1.84-5.628 0-8.017zm3.969 0c1.817 2.609.856 5.813 0 8.017H10c.865-2.222 1.663-5.47 0-8.017z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Bitstream Vera Sans",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7F = memo(SvgUserTrashFullSymbolic);
var user_trash_full_symbolic_default = Memo$7F;

const SvgUserTrashSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M13 5v9H4V5H2v9c0 2 2 2 2 2h9c2 0 2-2 2-2V5zM9 6H8v6h1zM7 6H6v6h1zm4 0h-1v6h1zm1-6c2 0 2 2 2 2h2v2H1V2h2c0-2 2-2 2-2zm0 1H5v1h7z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7G = memo(SvgUserTrashSymbolic);
var user_trash_symbolic_default = Memo$7G;

const SvgUtilitiesTerminalSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.2 0C.993 0 0 1.007 0 2.209v10.582C0 13.993.994 15 2.2 15h11.6c1.206 0 2.2-1.007 2.2-2.209V2.209C16 1.007 15.006 0 13.8 0zm0 2h11.6c.124 0 .2.071.2.209v10.582c0 .138-.076.209-.2.209H2.2c-.124 0-.2-.071-.2-.209V2.209C2 2.071 2.076 2 2.2 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4.494 5.895a.6.6 0 00-.418 1.029L5.652 8.5l-1.576 1.576a.6.6 0 10.848.848l2-2a.6.6 0 000-.848l-2-2a.6.6 0 00-.43-.181z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 10h3v1H8z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7H = memo(SvgUtilitiesTerminalSymbolic);
var utilities_terminal_symbolic_default = Memo$7H;

const SvgValueDecreaseSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 7h10v2H3z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$7I = memo(SvgValueDecreaseSymbolic);
var value_decrease_symbolic_default = Memo$7I;

const SvgValueIncreaseSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    style: {
      marker: "none"
    },
    d: "M7 3v4H3v2h4v4h2V9h4V7H9V3z",
    color: "#bebebe",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$7J = memo(SvgValueIncreaseSymbolic);
var value_increase_symbolic_default = Memo$7J;

const SvgVideoDisplaySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1C1.338 1 0 2.338 0 4v7c0 1.662 1.338 3 3 3h10c1.662 0 3-1.338 3-3V4c0-1.662-1.338-3-3-3zm0 2h10c.554 0 1 .446 1 1v7c0 .554-.446 1-1 1H3c-.554 0-1-.446-1-1V4c0-.554.446-1 1-1zm5 13c3 0 4-1 4-1H4s1 1 4 1z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7K = memo(SvgVideoDisplaySymbolic);
var video_display_symbolic_default = Memo$7K;

const SvgVideoJoinedDisplaysSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.5 13c-2.5 0-2.5.5-2.5.5 0 .5.5.5.5.5h4c.5 0 .5-.5.5-.5s0-.5-2.5-.5zm7 0c-2.5 0-2.5.5-2.5.5 0 .5.5.5.5.5h4c.5 0 .5-.5.5-.5s0-.5-2.5-.5z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.5 4A2.517 2.517 0 000 6.5v3C0 10.868 1.132 12 2.5 12h4C7.868 12 9 10.868 9 9.5v-3C9 5.132 7.868 4 6.5 4zm0 2h4c.294 0 .5.206.5.5v3c0 .294-.206.5-.5.5h-4a.478.478 0 01-.5-.5v-3c0-.294.206-.5.5-.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.5 2A2.517 2.517 0 007 4.5v5C7 10.868 8.132 12 9.5 12h4c1.368 0 2.5-1.132 2.5-2.5v-5C16 3.132 14.868 2 13.5 2zm0 2h4c.294 0 .5.206.5.5v5c0 .294-.206.5-.5.5h-4a.478.478 0 01-.5-.5v-5c0-.294.206-.5.5-.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7L = memo(SvgVideoJoinedDisplaysSymbolic);
var video_joined_displays_symbolic_default = Memo$7L;

const SvgVideoSingleDisplaySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1C1.338 1 0 2.338 0 4v7c0 1.662 1.338 3 3 3h10c1.662 0 3-1.338 3-3V4c0-1.662-1.338-3-3-3zm4 4h2v6H7V7H6V6c.475-.078.82-.392 1-1zm1 11c3 0 4-1 4-1H4s1 1 4 1z",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7M = memo(SvgVideoSingleDisplaySymbolic);
var video_single_display_symbolic_default = Memo$7M;

const SvgVideoXGenericSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 4h8c.554 0 1 .446 1 1v7c0 .554-.446 1-1 1H6c-.554 0-1-.446-1-1V5c0-.554.446-1 1-1zM5 8.47L1.53 5H1v7h.5z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    fill: "#474747",
    color: "#bebebe"
  })));
  return render(rest, ...restArgs);
};
const Memo$7N = memo(SvgVideoXGenericSymbolic);
var video_x_generic_symbolic_default = Memo$7N;

const SvgViewAppGridSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.994 3c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm4 0c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm4 0c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm-8 4c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm4 0c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm4 0c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm-8 4c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm4 0c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm4 0c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$7O = memo(SvgViewAppGridSymbolic);
var view_app_grid_symbolic_default = Memo$7O;

const SvgViewConcealSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.99 1.99a1 1 0 00-.697 1.717l11 11a1 1 0 101.414-1.414l-.912-.912a8 8 0 002.943-4.391A8 8 0 008 2a8 8 0 00-4.303 1.283l-.99-.99a1 1 0 00-.717-.303zM8 4a4 4 0 014 4 4 4 0 01-.977 2.61L5.39 4.973A4 4 0 018 4zM1.273 5.687A8 8 0 00.262 8.01 8 8 0 008 14a8 8 0 001.445-.14l-1.884-1.885a4 4 0 01-3.532-3.531z",
    style: {
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 8a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7P = memo(SvgViewConcealSymbolic);
var view_conceal_symbolic_default = Memo$7P;

const SvgViewContinuousSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.625 11h-3.25a.374.374 0 00-.375.375v1.25c0 .208.167.375.375.375h3.25a.374.374 0 00.375-.375v-1.25A.374.374 0 009.625 11zm0-11h-3.25A.374.374 0 006 .375v1.25c0 .208.167.375.375.375h3.25A.374.374 0 0010 1.625V.375A.374.374 0 009.625 0zm0 14h-3.25a.374.374 0 00-.375.375v1.25c0 .208.167.375.375.375h3.25a.374.374 0 00.375-.375v-1.25A.374.374 0 009.625 14zm0-11h-3.25A.374.374 0 006 3.375v1.25c0 .208.167.375.375.375h3.25A.374.374 0 0010 4.625v-1.25A.374.374 0 009.625 3z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }), /* @__PURE__ */ createElement("path", {
    d: "M14 7H2v2h12z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7Q = memo(SvgViewContinuousSymbolic);
var view_continuous_symbolic_default = Memo$7Q;

const SvgViewDualSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M0 1v13h6c.176 0 .535.14.822.332.288.192.467.371.467.371l.719.727.711-.735S9.615 14 10 14h6V1h-6c-.901 0-1.572.353-2.043.701-.025-.017-.018-.018-.045-.035C7.452 1.362 6.828 1 6 1zm2 2h4c.138 0 .515.138.813.334.297.196.492.385.492.385l.717.693.695-.715S9.619 3 10 3h4v9h-4c-.89 0-1.562.348-2.033.693-.018-.012-.013-.013-.031-.025C7.476 12.36 6.836 12 6 12H2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.625 5h-2.25A.374.374 0 003 5.375v1.25c0 .207.167.375.375.375h2.25A.374.374 0 006 6.625v-1.25A.374.374 0 005.625 5zm0 3h-2.25A.374.374 0 003 8.375v1.25c0 .208.167.375.375.375h2.25A.374.374 0 006 9.625v-1.25A.374.374 0 005.625 8zm7-3h-2.25a.374.374 0 00-.375.375v1.25c0 .208.167.375.375.375h2.25A.374.374 0 0013 6.625v-1.25A.374.374 0 0012.625 5zm0 3h-2.25a.374.374 0 00-.375.375v1.25c0 .208.167.375.375.375h2.25A.374.374 0 0013 9.625v-1.25A.374.374 0 0012.625 8z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$7R = memo(SvgViewDualSymbolic);
var view_dual_symbolic_default = Memo$7R;

const SvgViewFullscreenSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.984 8.986A1 1 0 001 10v4a1 1 0 001 1h4a1 1 0 100-2H3v-3a1 1 0 00-1.016-1.014z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.48 8.49a1 1 0 00-.687.303l-4.5 4.5a1 1 0 101.414 1.414l4.5-4.5A1 1 0 006.48 8.49z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1 14h1v1H1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 1a1 1 0 100 2h3v3a1 1 0 102 0V2a1 1 0 00-1-1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14 1h1v1h-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M13.984.99a1 1 0 00-.69.301l-4.5 4.469a1 1 0 101.411 1.418l4.5-4.469a1 1 0 00-.72-1.719z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1 9h1v1H1zm5 5h1v1H6zm8-8h1v1h-1zM9 1h1v1H9z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7S = memo(SvgViewFullscreenSymbolic);
var view_fullscreen_symbolic_default = Memo$7S;

const SvgViewGridSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.384 3h3.231c.213 0 .385.224.385.502v2.996C7 6.776 6.828 7 6.615 7h-3.23C3.17 7 3 6.776 3 6.498V3.502C3 3.224 3.17 3 3.384 3zm6 0h3.231c.213 0 .385.224.385.502v2.996c0 .278-.172.502-.385.502h-3.23C9.17 7 9 6.776 9 6.498V3.502C9 3.224 9.17 3 9.384 3zm-6 6h3.231c.213 0 .385.224.385.502v2.996c0 .278-.172.502-.385.502h-3.23C3.17 13 3 12.776 3 12.498V9.502C3 9.224 3.17 9 3.384 9zm6 0h3.231c.213 0 .385.224.385.502v2.996c0 .278-.172.502-.385.502h-3.23C9.17 13 9 12.776 9 12.498V9.502C9 9.224 9.17 9 9.384 9z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$7T = memo(SvgViewGridSymbolic);
var view_grid_symbolic_default = Memo$7T;

const SvgViewListBulletSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.384 3h1.231A.38.38 0 014 3.379V4.62a.38.38 0 01-.385.38h-1.23A.38.38 0 012 4.621V3.38A.38.38 0 012.384 3zm0 4.016h1.231A.38.38 0 014 7.394v1.243a.38.38 0 01-.385.379h-1.23A.38.38 0 012 8.636V7.395a.38.38 0 01.384-.378zm0 3.984h1.231a.38.38 0 01.385.379v1.242a.38.38 0 01-.385.379h-1.23A.38.38 0 012 12.621V11.38a.38.38 0 01.384-.38z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.494 3h7c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-7a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5zm0 4h7c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-7a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5zm0 4h7c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-7a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    }
  }))));
  return render(rest, ...restArgs);
};
const Memo$7U = memo(SvgViewListBulletSymbolic);
var view_list_bullet_symbolic_default = Memo$7U;

const SvgViewListOrderedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M7.494 4h7c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-7a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5zm0 6h7c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-7a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.996 3h1.998v4h-2V5h-1l.002-1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    style: {
      lineHeight: 1.25,
      InkscapeFontSpecification: "'Cantarell Ultra-Bold'",
      fontVariantLigatures: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontFeatureSettings: "normal",
      textAlign: "start"
    },
    d: "M1.975 13h4.019v-1h-2c1.5-.5 1.777-1.299 1.832-1.791.089-.806-.896-1.52-1.897-1.513-.74.005-1.305.242-1.935.804l.5 1c.9-.59 1.838-1.05 1.865-.304.02.536-1.865.804-2.384 1.835z",
    fontWeight: 800,
    fontFamily: "Cantarell",
    letterSpacing: 0,
    wordSpacing: 0
  }))));
  return render(rest, ...restArgs);
};
const Memo$7V = memo(SvgViewListOrderedSymbolic);
var view_list_ordered_symbolic_default = Memo$7V;

const SvgViewListSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 4h6v2H8zm0 5.984h6v2H8z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.384 3h3.231A.38.38 0 016 3.379V6.62a.38.38 0 01-.385.38h-3.23A.38.38 0 012 6.621V3.38A.38.38 0 012.384 3zm0 6h3.231A.38.38 0 016 9.379V12.6a.38.38 0 01-.385.38h-3.23A.38.38 0 012 12.6V9.38A.38.38 0 012.384 9z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7W = memo(SvgViewListSymbolic);
var view_list_symbolic_default = Memo$7W;

const SvgViewMirrorSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.006 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 0C1.139 0 .57.321.287.7.004 1.076 0 1.5 0 1.5v13s.004.423.287.8c.284.379.852.7 1.713.7a.5.5 0 00.307-.104l5.5-4.25A.5.5 0 008 11.25V4.5a.5.5 0 00-.205-.404l-5.5-4A.5.5 0 002 0zm-.113 1.037L7 4.756v6.248L1.879 14.96c-.455-.037-.712-.156-.791-.262C.996 14.577 1 14.5 1 14.5v-13s-.004-.077.088-.2c.08-.106.333-.227.799-.263z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#474747",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1 1h1v14H1z",
    fill: "#474747"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14 0a.5.5 0 00-.295.096l-5.5 4A.5.5 0 008 4.5v6.75a.5.5 0 00.193.396l5.5 4.25A.5.5 0 0014 16c.861 0 1.43-.321 1.713-.7.283-.377.287-.8.287-.8v-13s-.004-.423-.287-.8C15.429.32 14.86 0 14 0zm0 1.12v13.747l-5-3.863V4.756z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    opacity: 0.5,
    fill: "#474747",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$7X = memo(SvgViewMirrorSymbolic);
var view_mirror_symbolic_default = Memo$7X;

const SvgViewMoreHorizontalSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 6.006a2 2 0 012 2 2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2zm6 0a2 2 0 012 2 2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2zm6 0a2 2 0 012 2 2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$7Y = memo(SvgViewMoreHorizontalSymbolic);
var view_more_horizontal_symbolic_default = Memo$7Y;

const SvgViewMoreSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.994 2a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2zm0 6a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2zm0 6a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$7Z = memo(SvgViewMoreSymbolic);
var view_more_symbolic_default = Memo$7Z;

const SvgViewPagedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M1 0v13h12V0zm2 2h8v9H3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14 3v11H4v2h12V3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.625 4h-3.25A.374.374 0 005 4.375v1.25c0 .208.167.375.375.375h3.25A.374.374 0 009 5.625v-1.25A.374.374 0 008.625 4zm0 3h-3.25A.374.374 0 005 7.375v1.25c0 .208.167.375.375.375h3.25A.374.374 0 009 8.625v-1.25A.374.374 0 008.625 7z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$7_ = memo(SvgViewPagedSymbolic);
var view_paged_symbolic_default = Memo$7_;

const SvgViewPinSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M14.994 16h1v-1l-7-7-1 1z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.994.586l-.707.707-5 5L.58 7l1.414 1.414.707-.707 5-5L8.408 2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.752 15.243a6 6 0 010-8.486 6 6 0 018.485 0L10.994 11z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.922 6.995l5.7 4.433 3.8-3.8L6.994 2z",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$7$ = memo(SvgViewPinSymbolic);
var view_pin_symbolic_default = Memo$7$;

const SvgViewRefreshSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.719 2a5.636 5.636 0 00-.563.063 6.03 6.03 0 00-3.968 2.343C.206 7.048.764 10.831 3.405 12.813c2.642 1.98 6.425 1.422 8.406-1.22.123-.17.19-.382.188-.593v-1h-1a1.024 1.024 0 00-.813.406c-1.332 1.777-3.817 2.114-5.593.781-1.777-1.332-2.114-3.816-.782-5.593C5.146 3.817 7.63 3.48 9.407 4.812c.43.323.77.733 1.031 1.188H9a1 1 0 00-1 1v1h6V2h-1a1 1 0 00-1 1v1.688A5.966 5.966 0 006.719 2z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$80 = memo(SvgViewRefreshSymbolic);
var view_refresh_symbolic_default = Memo$80;

const SvgViewRestoreSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.014 16.01",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12 1.006l-2 .008.018 4.996H15v-2h-2.99z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M14.979 0a1 1 0 00-.688.305l-3.984 4a1 1 0 101.416 1.41l3.986-4A1 1 0 0014.979 0zM1.014 6.01a1 1 0 00-1 1v8a1 1 0 001 1h8a1 1 0 001-1v-8a1 1 0 00-1-1zm1 2h6v6h-6z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M1.014 8.01a1 1 0 100 2h8a1 1 0 100-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M15 5.01h1v1h-1zm-5-5h1v1h-1zm-.986 15h1v1h-1zm-9 0h1v1h-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M11 .01c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1zm4 4c.554 0 1 .446 1 1s-.446 1-1 1-1-.446-1-1 .446-1 1-1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$81 = memo(SvgViewRestoreSymbolic);
var view_restore_symbolic_default = Memo$81;

const SvgViewRevealSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 2A8 8 0 00.262 8.01 8 8 0 008 14a8 8 0 007.738-6.01A8 8 0 008 2zm0 2a4 4 0 014 4 4 4 0 01-4 4 4 4 0 01-4-4 4 4 0 014-4z",
    style: {
      marker: "none"
    }
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 8a2 2 0 01-2 2 2 2 0 01-2-2 2 2 0 012-2 2 2 0 012 2z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$82 = memo(SvgViewRevealSymbolic);
var view_reveal_symbolic_default = Memo$82;

const SvgViewSortAscendingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.384 3h1.231A.38.38 0 013 3.379V4.62a.38.38 0 01-.385.38h-1.23A.38.38 0 011 4.621V3.38A.38.38 0 011.384 3zm0 4.016h1.231A.38.38 0 013 7.394v1.243a.38.38 0 01-.385.379h-1.23A.38.38 0 011 8.636V7.395a.38.38 0 01.384-.378zm0 3.984h1.231a.38.38 0 01.385.379v1.242a.38.38 0 01-.385.379h-1.23A.38.38 0 011 12.621V11.38a.38.38 0 01.384-.38zM7 3v4H3.937l5.125 5.781L14.187 7H11V3z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$83 = memo(SvgViewSortAscendingSymbolic);
var view_sort_ascending_symbolic_default = Memo$83;

const SvgViewSortDescendingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.384 3h1.231A.38.38 0 013 3.379V4.62a.38.38 0 01-.385.38h-1.23A.38.38 0 011 4.621V3.38A.38.38 0 011.384 3zm0 4.016h1.231A.38.38 0 013 7.394v1.243a.38.38 0 01-.385.379h-1.23A.38.38 0 011 8.636V7.395a.38.38 0 01.384-.378zm0 3.984h1.231a.38.38 0 01.385.379v1.242a.38.38 0 01-.385.379h-1.23A.38.38 0 011 12.621V11.38a.38.38 0 01.384-.38zM7 12.781v-4H3.937L9.062 3l5.125 5.781H11v4z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    color: "#000",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$84 = memo(SvgViewSortDescendingSymbolic);
var view_sort_descending_symbolic_default = Memo$84;

const SvgViewWrappedSymbolicRtl = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747",
    stroke: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6 6L4 8 2 6",
    fill: "none",
    strokeWidth: 2,
    strokeLinecap: "round"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 14h4c1.108 0 2-.892 2-2V4c0-1.108-.892-2-2-2H6c-1.108 0-2 .892-2 2v4",
    fill: "none",
    strokeWidth: 2
  }), /* @__PURE__ */ createElement("path", {
    d: "M7 6V5H6v1zM2 6V5H1v1z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    stroke: "none"
  }))));
  return render(rest, ...restArgs);
};
const Memo$85 = memo(SvgViewWrappedSymbolicRtl);
var view_wrapped_symbolic_rtl_default = Memo$85;

const SvgViewWrappedSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.99 4.99a1 1 0 00-.697 1.717L12 9.414l2.707-2.707a1 1 0 10-1.414-1.414L12 6.586l-1.293-1.293a1 1 0 00-.717-.303z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6 1C4.356 1 3 2.355 3 4v8c0 1.645 1.356 3 3 3h4v-2H6c-.571 0-1-.429-1-1V4c0-.571.429-1 1-1h4c.572 0 1 .429 1 1v4h2V4c0-1.645-1.355-3-3-3z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 6V5h1v1zm5 0V5h1v1z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$86 = memo(SvgViewWrappedSymbolic);
var view_wrapped_symbolic_default = Memo$86;

const SvgWeatherClearNightSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Sans",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M6.815 1.107C3.519 1.672.992 4.548.992 8c0 3.854 3.148 7 7.002 7a6.96 6.96 0 004.58-1.723C8.8 12.295 5.992 8.86 5.992 4.785a8.69 8.69 0 01.823-3.678z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.994 1c-.402 0-.795.042-1.18.107a8.69 8.69 0 00-.822 3.678c0 4.075 2.807 7.51 6.582 8.492A6.983 6.983 0 0014.994 8c0-3.854-3.146-7-7-7z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$87 = memo(SvgWeatherClearNightSymbolic);
var weather_clear_night_symbolic_default = Memo$87;

const SvgWeatherClearSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 4.006c-2.195 0-4 1.805-4 4 0 2.195 1.805 4 4 4 2.195 0 4-1.805 4-4 0-2.195-1.805-4-4-4z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.5 0h1c.277 0 .5.223.5.5v2c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-2c0-.277.223-.5.5-.5zm0 13h1c.277 0 .5.223.5.5v2c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-2c0-.277.223-.5.5-.5zM1.99 2.697l.707-.707a.499.499 0 01.707 0l1.414 1.414a.499.499 0 010 .707l-.707.707a.499.499 0 01-.707 0L1.99 3.404a.499.499 0 010-.707zm9.192 9.193l.707-.708a.499.499 0 01.707 0l1.415 1.414a.499.499 0 010 .707l-.708.707a.499.499 0 01-.707 0l-1.414-1.414a.499.499 0 010-.707zm-8.485 2.12l-.707-.707a.499.499 0 010-.707l1.414-1.414a.499.499 0 01.707 0l.707.707a.499.499 0 010 .707L3.404 14.01a.499.499 0 01-.707 0zm9.193-9.192l-.708-.707a.499.499 0 010-.707l1.414-1.414a.499.499 0 01.708 0l.707.707a.499.499 0 010 .707l-1.415 1.414a.499.499 0 01-.707 0zM16 7.5v1c0 .277-.223.5-.5.5h-2a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5h2c.277 0 .5.223.5.5zm-13 0v1c0 .277-.223.5-.5.5h-2a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5h2c.277 0 .5.223.5.5z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$88 = memo(SvgWeatherClearSymbolic);
var weather_clear_symbolic_default = Memo$88;

const SvgWeatherFewCloudsNightSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.5 10A2.5 2.5 0 007 12.5c0 .218.041.423.094.625A1.549 1.549 0 006.5 13a1.5 1.5 0 100 3h8a1.5 1.5 0 100-3 2 2 0 00-2-2c-.316 0-.61.088-.875.219A2.47 2.47 0 009.5 10z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.82 1.107C3.526 1.672.999 4.548.999 8c0 2.33 1.155 4.394 2.916 5.668.311-.813 1.064-1.394 1.942-1.639A3.806 3.806 0 017.37 9.475a8.69 8.69 0 01-1.373-4.69c0-1.314.3-2.556.823-3.678z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8 1c-.402 0-.795.042-1.18.107a8.69 8.69 0 00-.822 3.678 8.69 8.69 0 001.373 4.69 3.567 3.567 0 012.13-.715c.997 0 1.82.484 2.486 1.125.18-.035.315-.125.513-.125.775 0 1.474.288 2.02.756.305-.782.48-1.628.48-2.516 0-3.854-3.146-7-7-7z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$89 = memo(SvgWeatherFewCloudsNightSymbolic);
var weather_few_clouds_night_symbolic_default = Memo$89;

const SvgWeatherFewCloudsSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.5 10A2.5 2.5 0 007 12.5c0 .218.041.423.094.625A1.549 1.549 0 006.5 13a1.5 1.5 0 100 3h8a1.5 1.5 0 100-3 2 2 0 00-2-2c-.316 0-.61.088-.875.219A2.47 2.47 0 009.5 10z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.988 4.006c-2.194 0-4 1.805-4 4 0 1.895 1.349 3.494 3.13 3.896l.001-.01c.478-2.089 2.14-3.004 4.045-2.81.192.045.372.115.547.195.014.006.03.01.043.016.141-.407.235-.835.235-1.287 0-2.195-1.806-4-4-4z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M0 7.5c0-.277.223-.5.5-.5h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5zm12 0c0-.277.223-.5.5-.5h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5zM1.697 12.596a.499.499 0 010-.707l.707-.707a.499.499 0 01.707 0l.707.707a.499.499 0 010 .707l-.707.707a.499.499 0 01-.707 0zm8.485-8.485a.499.499 0 010-.707l.707-.707a.499.499 0 01.707 0l.707.707a.499.499 0 010 .707l-.707.707a.499.499 0 01-.707 0zM6.5 3a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5zM3.111 4.818a.499.499 0 01-.707 0l-.707-.707a.499.499 0 010-.707l.707-.707a.499.499 0 01.707 0l.707.707a.499.499 0 010 .707z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8a = memo(SvgWeatherFewCloudsSymbolic);
var weather_few_clouds_symbolic_default = Memo$8a;

const SvgWeatherFogSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16.014 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.33.994c-.623 0-1 .33-1.273.594-.273.265-.482.543-.676.793a6.48 6.48 0 01-.484.582c-.114.11-.122.031.115.031a.997.997 0 10-.002 1.994c.624 0 1.003-.329 1.276-.593.272-.265.48-.543.673-.793a7.56 7.56 0 01.372-.444c.108.121.223.253.37.444.194.25.402.53.674.794.273.265.652.594 1.276.594.623 0 1-.329 1.273-.594.273-.264.483-.542.676-.792a7.64 7.64 0 01.37-.444c.107.121.223.253.37.444.194.25.401.53.674.794.273.265.652.594 1.276.594.623 0 1-.329 1.273-.594.273-.264.482-.543.676-.793.147-.19.26-.324.369-.445.108.121.223.254.371.445.193.25.401.53.674.795s.652.594 1.275.594a.997.997 0 100-1.994c.237 0 .23.08.115-.031a6.55 6.55 0 01-.486-.582c-.193-.25-.401-.53-.674-.795-.272-.265-.65-.594-1.273-.594-.624 0-1.003.33-1.276.594-.272.264-.48.543-.673.793a8.56 8.56 0 01-.371.443 7.546 7.546 0 01-.372-.443c-.193-.25-.4-.53-.673-.795S8.595.996 7.97.996c-.623 0-1.002.33-1.275.594-.273.265-.48.543-.674.793a7.56 7.56 0 01-.371.443 7.55 7.55 0 01-.371-.443c-.194-.25-.401-.53-.674-.795S3.954.994 3.331.994zm0 5.002c-.623 0-1 .33-1.273.594-.273.265-.482.543-.676.793a6.48 6.48 0 01-.484.582c-.114.11-.122.031.115.031A.997.997 0 101.01 9.99c.624 0 1.003-.329 1.276-.594.272-.264.48-.542.673-.792.148-.191.264-.323.372-.444.108.121.223.253.37.444.194.25.402.53.674.794.273.265.652.594 1.276.594.623 0 1-.329 1.273-.594.273-.264.483-.543.676-.793a7.64 7.64 0 01.37-.443c.107.121.223.253.37.443.194.25.401.53.674.795s.652.594 1.276.594c.623 0 1-.329 1.273-.594.273-.264.482-.543.676-.793.147-.19.26-.324.369-.445.108.121.223.254.371.445.193.25.401.53.674.795s.652.594 1.275.594a.997.997 0 100-1.994c.237 0 .23.08.115-.031a6.55 6.55 0 01-.486-.582c-.193-.25-.401-.53-.674-.795-.272-.265-.65-.594-1.273-.594-.624 0-1.003.33-1.276.594-.272.264-.48.543-.673.793a8.56 8.56 0 01-.371.443 7.546 7.546 0 01-.372-.443c-.193-.25-.4-.53-.673-.795s-.65-.594-1.274-.594c-.623 0-1.002.33-1.275.594-.273.264-.48.543-.674.793a7.56 7.56 0 01-.371.443 7.55 7.55 0 01-.371-.443c-.194-.25-.401-.53-.674-.795s-.652-.594-1.275-.594zm0 5.002c-.623 0-1 .33-1.273.594-.273.264-.482.543-.676.793-.193.25-.37.471-.484.582-.114.11-.122.03.115.031a.997.997 0 10-.002 1.994c.624 0 1.003-.329 1.276-.594.272-.264.48-.543.673-.793.148-.19.264-.322.372-.443.108.121.223.253.37.443.194.25.402.53.674.795.273.265.652.594 1.276.594.623 0 1-.329 1.273-.594.273-.264.483-.543.676-.793a7.3 7.3 0 01.37-.443c.107.12.223.253.37.443.194.25.401.53.674.795s.652.594 1.276.594c.623 0 1-.33 1.273-.594.273-.264.482-.543.676-.793.147-.19.26-.324.369-.445.108.121.223.254.371.445.193.25.401.53.674.795s.652.594 1.275.594a.997.997 0 100-1.994c.237 0 .23.08.115-.031a6.55 6.55 0 01-.486-.582c-.193-.25-.401-.529-.674-.793-.272-.265-.65-.596-1.273-.596-.624 0-1.003.329-1.276.594-.272.264-.48.543-.673.793a8.56 8.56 0 01-.371.443 7.545 7.545 0 01-.372-.443c-.193-.25-.4-.53-.673-.795S8.595 11 7.97 11c-.623 0-1.002.33-1.275.594-.273.264-.48.543-.674.793-.147.19-.263.322-.371.443a7.549 7.549 0 01-.371-.443c-.194-.25-.401-.53-.674-.795s-.652-.594-1.275-.594z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible",
    opacity: 0.5,
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$8b = memo(SvgWeatherFogSymbolic);
var weather_fog_symbolic_default = Memo$8b;

const SvgWeatherOvercastSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8.5 9A2.5 2.5 0 006 11.5c0 .218.041.423.094.625A1.549 1.549 0 005.5 12a1.5 1.5 0 100 3h8a1.5 1.5 0 100-3 2 2 0 00-2-2c-.316 0-.61.088-.875.219A2.47 2.47 0 008.5 9z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.5 2a2.49 2.49 0 00-2.469 2.219C6.705 4.097 6.37 4 6.001 4a3 3 0 00-3 3c0 .098.021.185.03.281A2.013 2.013 0 002.001 7a2 2 0 100 4H5.1c.25-1.68 1.655-3 3.4-3 .98 0 1.786.49 2.416 1.143.199-.047.361-.143.584-.143 1.262 0 2.19.874 2.604 2h.396a1.5 1.5 0 100-3c-.207 0-.414.05-.594.125A2.44 2.44 0 0014 7.5c0-1.23-.893-2.228-2.062-2.437A2.5 2.5 0 009.5 2zm-1 8c-.663 0-1.207.414-1.41 1h2.838l-.16-.266C9.498 10.285 9.052 10 8.5 10z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8c = memo(SvgWeatherOvercastSymbolic);
var weather_overcast_symbolic_default = Memo$8c;

const SvgWeatherSevereAlertSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.5 2a2.49 2.49 0 00-2.469 2.219C6.704 4.097 6.37 4 6 4a3 3 0 00-3 3c0 .098.022.185.031.281A2.014 2.014 0 002 7a2 2 0 100 4h5V8.875C7 7.865 7.865 7 8.875 7h5.062a2.499 2.499 0 00-2-1.938A2.5 2.5 0 009.5 2z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#2e3436"
  }), /* @__PURE__ */ createElement("path", {
    className: "warning",
    d: "M8.875 8A.863.863 0 008 8.875v6.25c0 .492.383.875.875.875h6.25a.863.863 0 00.875-.875v-6.25A.863.863 0 0015.125 8zM11 9h2v2.5s0 .5-.5.5h-1c-.5 0-.5-.5-.5-.5zm.5 4h1c.277 0 .5.223.5.5v1c0 .277-.223.5-.5.5h-1a.499.499 0 01-.5-.5v-1c0-.277.223-.5.5-.5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#f57900"
  })));
  return render(rest, ...restArgs);
};
const Memo$8d = memo(SvgWeatherSevereAlertSymbolic);
var weather_severe_alert_symbolic_default = Memo$8d;

const SvgWeatherShowersScatteredSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M5 1.762a.75.75 0 00-.57.25C4.18 2.302 2 4.908 2 7c0 .774.267 1.5.752 2.045C3.14 9.48 3.843 10 5 10c1.969 0 3-1.509 3-3 0-2.092-2.183-4.698-2.43-4.988a.745.745 0 00-.57-.25zm6 4a.75.75 0 00-.57.25C10.18 6.302 8 8.908 8 11c0 .774.266 1.5.751 2.045C9.138 13.48 9.843 14 11 14c1.969 0 3-1.509 3-3 0-2.092-2.183-4.698-2.431-4.988a.745.745 0 00-.569-.25z",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$8e = memo(SvgWeatherShowersScatteredSymbolic);
var weather_showers_scattered_symbolic_default = Memo$8e;

const SvgWeatherShowersSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.465 0C8.192 0 7.158.973 7.017 2.219 6.693 2.097 6.361 2 5.994 2 4.351 2 3.02 3.343 3.02 5c0 .098.022.185.031.281A1.983 1.983 0 002.028 5 1.992 1.992 0 00.044 7c0 1.105.888 2 1.984 2h12.396c.821 0 1.487-.672 1.487-1.5S15.245 6 14.424 6c-.206 0-.411.05-.589.125.052-.202.093-.407.093-.625 0-1.23-.886-2.228-2.045-2.438.041-.18.062-.368.062-.562 0-1.38-1.11-2.5-2.48-2.5z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.49 9.992a.496.496 0 00-.48.404l-1 4.92a.496.496 0 10.973.198l1-4.918a.496.496 0 00-.493-.604zm2.004.004a.496.496 0 00-.48.404l-1.002 4.916a.496.496 0 10.973.198L4.987 10.6a.496.496 0 00-.493-.604zm2-.004a.496.496 0 00-.48.404l-1.002 4.92a.496.496 0 10.973.198l1.002-4.918a.496.496 0 00-.493-.604zm2.002 0a.496.496 0 00-.48.404l-1.002 4.92a.496.496 0 10.973.198l1-4.918a.496.496 0 00-.49-.604zm2 0a.496.496 0 00-.48.404l-1 4.92a.496.496 0 10.972.198l1-4.918a.496.496 0 00-.492-.604zm2.002 0a.496.496 0 00-.48.404l-1 4.92a.496.496 0 10.97.198l1.002-4.918a.496.496 0 00-.492-.604z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8f = memo(SvgWeatherShowersSymbolic);
var weather_showers_symbolic_default = Memo$8f;

const SvgWeatherSnowSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    transform: "translate(-332 -88)"
  }, /* @__PURE__ */ createElement("path", {
    id: "a",
    d: "M339.492 88.492A.5.5 0 00339 89v1.533l-1.252-.717a.5.5 0 10-.496.868l1.748 1v8.683l-1.746.987a.5.5 0 10.492.87l1.254-.708V103a.5.5 0 101 0v-1.484l1.254.709a.5.5 0 10.492-.871l-1.746-.987v-8.683l1.748-1a.5.5 0 10-.496-.868l-1.252.717V89a.5.5 0 00-.508-.508z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436",
    strokeLinecap: "round"
  }), /* @__PURE__ */ createElement("use", {
    height: "100%",
    xlinkHref: "#a",
    transform: "rotate(-60 339.5 96)",
    width: "100%"
  }), /* @__PURE__ */ createElement("use", {
    height: "100%",
    xlinkHref: "#a",
    transform: "rotate(-120 339.5 96)",
    width: "100%"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8g = memo(SvgWeatherSnowSymbolic);
var weather_snow_symbolic_default = Memo$8g;

const SvgWeatherStormSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M9.51.044c-1.273 0-2.307.973-2.448 2.218-.324-.122-.657-.218-1.023-.218-1.643 0-2.975 1.343-2.975 3 0 .098.022.186.031.281a1.982 1.982 0 00-1.022-.281 1.992 1.992 0 00-1.984 2C.09 8.15.905 9 2 9h5V7.5c-.016-.786.74-1.47 1.518-1.487.8-.017 1.499.68 1.482 1.487V9h4.5c.822 0 1.455-.627 1.455-1.456 0-.828-.666-1.5-1.487-1.5-.206 0-.411.05-.59.125a2.44 2.44 0 00.094-.625c0-1.23-.886-2.228-2.046-2.438.042-.181.062-.368.062-.562a2.49 2.49 0 00-2.479-2.5z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.492 6.994A.5.5 0 008 7.5V10H5v1H3.293L.647 13.646a.5.5 0 10.707.708L3.707 12H5v3a.5.5 0 101 0v-3.424a.5.5 0 000-.152V11h2v.707l2 2V15a.5.5 0 101 0v-1h1.362l2.38 1.428a.5.5 0 10.516-.856L12.638 13h-1.93L9 11.293v-.717a.5.5 0 000-.152V7.5a.5.5 0 00-.508-.506z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8h = memo(SvgWeatherStormSymbolic);
var weather_storm_symbolic_default = Memo$8h;

const SvgWeatherTornadoSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M1.975.994c-1.341 0-1.341 2.012 0 2.012h.287c.128 0 .222.114.03.227-.633.538-.353 1.787.683 1.773h2.263c.207.009.15.152.084.208-.52.42-.483 1.304.12 1.653.09.047.054.123-.04.123H4.98c-1.398-.052-1.398 2.072 0 2.02h1.299c.108 0 .18.125.036.208-.52.432-.467 1.315.138 1.663.177.102.067.184-.014.248-.598.353-.649 1.24-.11 1.664.125.098.05.186-.046.186H5.99c-1.362 0-1.362 2.042 0 2.042h1.02c1.016.019 1.347-1.203.724-1.77-.129-.157-.031-.235.039-.235h1.242c1.354 0 1.354-2.032 0-2.032h-.29c-.142 0-.153-.105-.076-.173.503-.38.523-1.159.064-1.571-.15-.15-.075-.23.04-.23h.268c1.007.004 1.307-1.195.708-1.752-.114-.113-.088-.248.036-.248h1.256c1.041.015 1.327-1.25.676-1.787-.082-.082-.081-.217.072-.217h1.256c1.34 0 1.34-2.012 0-2.012h-.323c-.119 0-.154-.1-.068-.17.725-.502.464-1.844-.61-1.83z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$8i = memo(SvgWeatherTornadoSymbolic);
var weather_tornado_symbolic_default = Memo$8i;

const SvgWeatherWindySymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M12.987 2.033a3.515 3.515 0 013.005 3.711A3.514 3.514 0 0112.5 9a1 1 0 110-2c.798 0 1.44-.6 1.496-1.395a1.488 1.488 0 00-1.287-1.591 1.487 1.487 0 00-1.676 1.174 1 1 0 11-1.957-.417 3.513 3.513 0 013.91-2.738z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M0 7v2h12.5V7z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9.397 15.936a2.99 2.99 0 001.95-.254 3.01 3.01 0 001.573-3.373A3.009 3.009 0 0010.002 10a1 1 0 100 2 .99.99 0 01.97.77.992.992 0 01-.523 1.125.986.986 0 01-1.21-.252 1 1 0 10-1.534 1.285c.445.53 1.047.874 1.692 1.008z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M0 10v2h10v-2z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M5.14 1.023c.533-.07 1.09.03 1.577.313a2.508 2.508 0 011.162 2.81A2.506 2.506 0 015.467 6a1 1 0 110-2 .487.487 0 00.479-.37.494.494 0 00-.231-.564.485.485 0 00-.598.079 1 1 0 11-1.416-1.413 2.49 2.49 0 011.44-.709z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M0 4v2h5.467V4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    overflow: "visible",
    fillRule: "evenodd"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8j = memo(SvgWeatherWindySymbolic);
var weather_windy_symbolic_default = Memo$8j;

const SvgWebBrowserSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16.004",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M8 4.846v10.38l-2.344-2.288-1.34 2.734c-.327.74-2.033.145-1.548-.844l1.326-2.839H1.136z",
    style: {
      marker: "none"
    },
    display: "block",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.156 1.063C3.33 1.522.578 5.02 1.063 8.843c.131 1.035.293 1.383.293 1.383l1.675-1.632A4.992 4.992 0 017.406 3.03a4.992 4.992 0 015.563 4.375c.314 2.608-1.391 5.025-3.969 5.532l.031 2s.521-.106.624-.131c3.416-.834 5.706-4.128 5.283-7.65-.46-3.827-3.955-6.555-7.782-6.095z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4.113 7.815v-.206l-.198.019.05-.393h-.117l-.115.15-.116.056-.165-.093-.017-.206.033-.225.248-.186h.199l.033-.113.247.056.182.225.033-.374.314-.262.116-.28.231-.094.133-.187.297-.056.149-.225h-.446l.28-.13h.199l.28-.094.034-.112-.1-.094-.115-.037.033-.112-.083-.169-.198.075.033-.15-.231-.13-.182.317.017.113-.182.075-.116.243-.05-.225-.313-.13-.05-.169.413-.243.182-.168.017-.206-.1-.056L4.84 4l-.082.206s-.139.027-.174.036C4.13 4.66 3.214 5.562 3 7.266c.008.04.155.268.155.268l.347.206.347.093m3.966-4.3l-.43-.168-.496.056-.611.168-.116.112.38.262v.15l-.149.15.199.392.132-.075.165-.262a5.51 5.51 0 00.727-.28l.199-.505m2.529.342l-.375.094-.219.156v.125l-.375.25.094.344.219-.157.125.157.156.093.094-.28L10 4.5l.063-.094.218-.187h.094l-.094.218v.188c.09-.024.16-.051.25-.063l-.25.188v.125l-.312.219-.281-.063v-.156l-.125.062.062.157h-.219l-.125.218-.156.157-.094.03v.188l.032.157H9.03v.53l.063-.03.094-.219L9.375 6l.031-.094.282-.062.156.187.187.094-.093.187.156-.03.062-.22-.187-.218h.062l.22.156.03.219.157.219.062-.313.094-.031c.096.1.169.231.25.344h.281l.188.125-.094.093-.156.157h-.25l-.344-.094h-.188l-.125.156-.343-.375-.25-.062-.375.062-.157.094V9l.032.031.25-.156.093.094h.281l.125.156-.093.312.187.188V10l.125.25-.093.25c-.01.161 0 .307 0 .469.08.219.143.435.218.656l.063.344v.187h.125l.219-.125h.25l.375-.437-.032-.157.25-.218-.187-.188.219-.187.218-.125.094-.125-.062-.25V9.75l.187-.375.188-.25.25-.563v-.156c-.117.015-.23.023-.344.031-.072.005-.145 0-.219 0a7.442 7.442 0 01-.312-.78l-.157-.188-.093-.313.062-.062.219.25.25.562.156.156-.062.22.156.155.25-.25.312-.218.157-.188v-.219c-.04-.073-.055-.145-.094-.218l-.156.187-.125-.156-.188-.125v-.281l.219.218.219-.03c.101.091.192.207.28.312L13 7.28c0-.174-.2-1.02-.625-1.75S11.22 4.125 11.22 4.125l-.063.094-.218.218-.25-.25h.25l.125-.125-.47-.093-.25-.094z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.3
  }))));
  return render(rest, ...restArgs);
};
const Memo$8k = memo(SvgWebBrowserSymbolic);
var web_browser_symbolic_default = Memo$8k;

const SvgWindowCloseSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 4h1.031c.255.011.51.129.688.313L8 6.592l2.312-2.28c.266-.231.447-.306.688-.313h1v1c0 .286-.034.55-.25.75L9.469 8.031l2.25 2.25c.188.188.281.454.281.719v1h-1c-.265 0-.53-.093-.719-.281L8 9.438l-2.281 2.28A1.015 1.015 0 015 12H4v-1c0-.265.093-.53.281-.719l2.281-2.25-2.28-2.281A.909.909 0 014 5z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "'Andale Mono'",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    color: "#bebebe",
    fontWeight: 400,
    fontFamily: "Andale Mono",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$8l = memo(SvgWindowCloseSymbolic);
var window_close_symbolic_default = Memo$8l;

const SvgWindowMaximizeSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.988 3.992v8.012H12V3.992zm2 2H10v4.012H5.988z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$8m = memo(SvgWindowMaximizeSymbolic);
var window_maximize_symbolic_default = Memo$8m;

const SvgWindowMinimizeSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4 10.009h8v1.989H4z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible",
    fill: "#2e3436",
    fillRule: "evenodd"
  })));
  return render(rest, ...restArgs);
};
const Memo$8n = memo(SvgWindowMinimizeSymbolic);
var window_minimize_symbolic_default = Memo$8n;

const SvgWindowNewSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#2e3436"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.994 1.008C1.994 1.008.988 2 .988 3v12.02h7.006v-2H2.988V5H13v3h2V3c0-1-1.006-1.992-2.006-1.992z",
    style: {
      lineHeight: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      whiteSpace: "normal",
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M12 10v2h-2v2h2v2h2v-2h2v-2h-2v-2z"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8o = memo(SvgWindowNewSymbolic);
var window_new_symbolic_default = Memo$8o;

const SvgWindowRestoreSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M4.988 4.992v6.012H11V4.992zm2 2H9v2.012H6.988z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      whiteSpace: "normal",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      solidColor: "#000",
      solidOpacity: 1,
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fill: "#2e3436"
  })));
  return render(rest, ...restArgs);
};
const Memo$8p = memo(SvgWindowRestoreSymbolic);
var window_restore_symbolic_default = Memo$8p;

const SvgXOfficeAddressBookSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1C1 1 1 3 1 3h11v11H1s0 2 2 2h9s.459.014.947-.23C13.436 15.524 14 14.832 14 14V3c0-.833-.564-1.525-1.053-1.77C12.46.986 12 1 12 1z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M.5 4h2a.499.499 0 110 1h-2a.499.499 0 110-1zm0 2h2a.499.499 0 110 1h-2a.499.499 0 110-1zm0 2h2a.499.499 0 110 1h-2a.499.499 0 110-1zm0 2h2a.499.499 0 110 1h-2a.499.499 0 110-1zm0 2h2a.499.499 0 110 1h-2a.499.499 0 110-1z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.285 5.004A3.506 3.506 0 004.027 8.94 3.506 3.506 0 007.515 12a5.68 5.68 0 001.644-.276l-.316-.949S8.137 11 7.512 11H7.51a2.494 2.494 0 01-2.49-2.186 2.495 2.495 0 011.867-2.738 2.797 2.797 0 011.808.164c.526.241.89.63 1.004 1.059.124.464.087.97-.084 1.275-.098.176-.403.354-.615.426v-.5C9 7.677 8.323 7 7.5 7 6.678 7 6 7.677 6 8.5c0 .822.678 1.5 1.5 1.5.176 0 .343-.037.5-.094v.045l.45.047c.941.096 1.692-.317 2.038-.936.347-.618.355-1.357.178-2.021-.208-.784-.82-1.372-1.554-1.709a3.75 3.75 0 00-1.827-.328zM7.5 8c.282 0 .5.218.5.5 0 .282-.218.5-.5.5a.493.493 0 01-.5-.5c0-.282.218-.5.5-.5z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8q = memo(SvgXOfficeAddressBookSymbolic);
var x_office_address_book_symbolic_default = Memo$8q;

const SvgXOfficeCalendarSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2.969 1.01c-1.053 0-2 .846-2 1.938v10.115c0 1.092.947 1.937 2 1.937H13c1.052 0 2-.845 2-1.937V2.948c0-1.092-.948-1.937-2-1.937zm0 3.99H5v2H2.969zM6 5h3v2H6zm4 0h3v2h-3zM2.969 8H5v2H2.969zM6 8h3v2H6zm4 0h3v2h-3zm-7.031 3H5v2H2.969zM6 11h3v2H6zm4 0h3v2h-3z",
    style: {
      lineHeight: "normal",
      InkscapeFontSpecification: "Sans",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textTransform: "none",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "Sans",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M10 8h3v2h-3z",
    style: {
      marker: "none"
    },
    overflow: "visible",
    opacity: 0.35
  }))));
  return render(rest, ...restArgs);
};
const Memo$8r = memo(SvgXOfficeCalendarSymbolic);
var x_office_calendar_symbolic_default = Memo$8r;

const SvgXOfficeDocumentSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v13a1 1 0 001 1h10a1 1 0 001-1V5.5a1 1 0 00-.293-.707l-3.5-3.5A1 1 0 009.5 1zm1 2h5.086L12 5.914V14H4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 2v4h4z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M6.418 4.986c-.86 0-1.568.708-1.568 1.569 0 .86.708 1.568 1.568 1.568.86 0 1.569-.708 1.569-1.568 0-.86-.709-1.569-1.569-1.569zm0 1c.32 0 .569.249.569.569 0 .32-.25.568-.569.568a.561.561 0 01-.568-.568c0-.32.248-.569.568-.569z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.986 7.986h2v1h-2zm-4 2h6v1h-6zm0 2h6v1h-6z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8s = memo(SvgXOfficeDocumentSymbolic);
var x_office_document_symbolic_default = Memo$8s;

const SvgXOfficeDrawingSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v13a1 1 0 001 1h10a1 1 0 001-1V5.5a1 1 0 00-.293-.707l-3.5-3.5A1 1 0 009.5 1zm1 2h5.086L12 5.914V14H4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 2v4h4z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v13a1 1 0 001 1h10a1 1 0 001-1V5.5a1 1 0 00-.293-.707l-3.5-3.5A1 1 0 009.5 1zm1 2h5.086L12 5.914V14H4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 2v4h4z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M8.553 10.316c-.467-.064-1.046-.104-1.531.276-.404.315-.777.713-1.106 1.017-.328.304-.652.438-.586.438H2.987v1H5.33c.582 0 .9-.368 1.264-.705.364-.338.731-.72 1.043-.963.106-.083.407-.124.78-.073.372.052.707.178 1.1.178.147 0 .217.037.325.13.108.091.23.25.365.444.135.194.28.42.498.623.218.204.546.381.922.381h.86v-1h-.86c-.099 0-.14-.019-.238-.111-.099-.092-.22-.262-.36-.463-.14-.2-.3-.433-.539-.637a1.518 1.518 0 00-.972-.367c-.033 0-.499-.103-.965-.168zM6.418 5.85c-.86 0-1.568.708-1.568 1.568 0 .86.708 1.568 1.568 1.568.86 0 1.569-.708 1.569-1.568 0-.86-.709-1.569-1.569-1.569zm0 1c.32 0 .569.248.569.568 0 .32-.249.568-.569.568a.561.561 0 01-.568-.568c0-.32.248-.569.568-.569z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8t = memo(SvgXOfficeDrawingSymbolic);
var x_office_drawing_symbolic_default = Memo$8t;

const SvgXOfficePresentationSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    color: "#000",
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M2 3v8h12V3zm6 1a2 2 0 012 2H8zM7 5v2h2a2 2 0 11-2-2z",
    style: {
      marker: "none"
    },
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M2.095 2a1 1 0 100 2h11.63a1 1 0 100-2zm5.398 8.493a.5.5 0 00-.492.507v1.752l-1.805 1.381a.5.5 0 10.608.795L8 13.247V11a.5.5 0 00-.508-.507z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }), /* @__PURE__ */ createElement("path", {
    d: "M7.483 12.497a.5.5 0 00-.29.896l2 1.563a.5.5 0 10.614-.788l-2-1.562a.5.5 0 00-.324-.11z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal",
      marker: "none"
    },
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8u = memo(SvgXOfficePresentationSymbolic);
var x_office_presentation_symbolic_default = Memo$8u;

const SvgXOfficeSpreadsheetSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 16 16",
    ...props
  }, /* @__PURE__ */ createElement("g", {
    fill: "#474747"
  }, /* @__PURE__ */ createElement("path", {
    d: "M3 1a1 1 0 00-1 1v13a1 1 0 001 1h10a1 1 0 001-1V5.5a1 1 0 00-.293-.707l-3.5-3.5A1 1 0 009.5 1zm1 2h5.086L12 5.914V14H4z",
    style: {
      lineHeight: "normal",
      fontVariantLigatures: "normal",
      fontVariantPosition: "normal",
      fontVariantCaps: "normal",
      fontVariantNumeric: "normal",
      fontVariantAlternates: "normal",
      fontFeatureSettings: "normal",
      textIndent: 0,
      textAlign: "start",
      textDecorationLine: "none",
      textDecorationStyle: "solid",
      textDecorationColor: "#000",
      textTransform: "none",
      textOrientation: "mixed",
      shapePadding: 0,
      isolation: "auto",
      mixBlendMode: "normal"
    },
    color: "#000",
    fontWeight: 400,
    fontFamily: "sans-serif",
    overflow: "visible",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M9 2v4h4z",
    fillRule: "evenodd"
  }), /* @__PURE__ */ createElement("path", {
    d: "M4.986 3.986h1v1h-1zm2 0h1v1h-1zm-2 2h1v1h-1zm2 0h1v1h-1zm-2 6h1v1h-1zm2 0h1v1h-1zm2 0h1v1h-1zm-4-.989h6V9.986L9.517 7.434 7.986 9.481 6.517 8.42 4.986 9.986z",
    style: {
      marker: "none"
    },
    color: "#000",
    overflow: "visible"
  }))));
  return render(rest, ...restArgs);
};
const Memo$8v = memo(SvgXOfficeSpreadsheetSymbolic);
var x_office_spreadsheet_symbolic_default = Memo$8v;

const SvgZoomFitBestSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 15.982 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.188 2C2.524 2 2 2.549 2 3.219v9.562C2 13.451 2.525 14 3.188 14h9.624c.663 0 1.188-.549 1.188-1.219V3.22C14 2.549 13.475 2 12.812 2zM4 4h3v2H6v1H4zm5 0h3v3h-2V6H9zM4 9h2v1h1v2H4zm6 0h2v3H9v-2h1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$8w = memo(SvgZoomFitBestSymbolic);
var zoom_fit_best_symbolic_default = Memo$8w;

const SvgZoomInSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 15.982 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.188 2C2.524 2 2 2.549 2 3.219v9.562C2 13.451 2.525 14 3.188 14h9.624c.663 0 1.188-.549 1.188-1.219V3.22C14 2.549 13.475 2 12.812 2zM7 5h2v2h2v2H9v2H7V9H5V7h2z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$8x = memo(SvgZoomInSymbolic);
var zoom_in_symbolic_default = Memo$8x;

const SvgZoomOriginalSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 15.982 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.188 2C2.524 2 2 2.549 2 3.219v9.562C2 13.451 2.525 14 3.188 14h9.624c.663 0 1.188-.549 1.188-1.219V3.22C14 2.549 13.475 2 12.812 2zM7 5h2v6H7V7H6V6c.694 0 1-.348 1-1z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$8y = memo(SvgZoomOriginalSymbolic);
var zoom_original_symbolic_default = Memo$8y;

const SvgZoomOutSymbolic = (passedProps, ...restArgs) => {
  const {
    colored,
    containerProps = {},
    ...rest
  } = passedProps;
  const render = (props) => /* @__PURE__ */ createElement("span", {
    ...containerProps,
    className: cx("Icon", containerProps.className, {
      colored
    })
  }, /* @__PURE__ */ createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 15.982 16",
    ...props
  }, /* @__PURE__ */ createElement("path", {
    d: "M3.188 2C2.524 2 2 2.549 2 3.219v9.562C2 13.451 2.525 14 3.188 14h9.624c.663 0 1.188-.549 1.188-1.219V3.22C14 2.549 13.475 2 12.812 2zM5 7h6v2H5z",
    style: {
      marker: "none"
    },
    color: "#bebebe",
    overflow: "visible",
    fill: "#474747"
  })));
  return render(rest, ...restArgs);
};
const Memo$8z = memo(SvgZoomOutSymbolic);
var zoom_out_symbolic_default = Memo$8z;

var icons = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AcAdapter: ac_adapter_symbolic_default,
  AccessoriesCalculator: accessories_calculator_symbolic_default,
  AccessoriesCharacterMap: accessories_character_map_symbolic_default,
  AccessoriesDictionary: accessories_dictionary_symbolic_default,
  AccessoriesTextEditor: accessories_text_editor_symbolic_default,
  ActionUnavailable: action_unavailable_symbolic_default,
  AddressBookNew: address_book_new_symbolic_default,
  AirplaneMode: airplane_mode_symbolic_default,
  Alarm: alarm_symbolic_default,
  AppletsScreenshooter: applets_screenshooter_symbolic_default,
  ApplicationCertificate: application_certificate_symbolic_default,
  ApplicationExit: application_exit_symbolic_default,
  ApplicationRssXml: application_rss_xml_symbolic_default,
  ApplicationXAddon: application_x_addon_symbolic_default,
  ApplicationXAppliance: application_x_appliance_symbolic_default,
  ApplicationXExecutable: application_x_executable_symbolic_default,
  ApplicationXFirmware: application_x_firmware_symbolic_default,
  ApplicationsEngineering: applications_engineering_symbolic_default,
  ApplicationsGames: applications_games_symbolic_default,
  ApplicationsGraphics: applications_graphics_symbolic_default,
  ApplicationsMultimedia: applications_multimedia_symbolic_default,
  ApplicationsScience: applications_science_symbolic_default,
  ApplicationsSystem: applications_system_symbolic_default,
  ApplicationsUtilities: applications_utilities_symbolic_default,
  AppointmentMissed: appointment_missed_symbolic_default,
  AppointmentNew: appointment_new_symbolic_default,
  AppointmentSoon: appointment_soon_symbolic_default,
  AudioCard: audio_card_symbolic_default,
  AudioHeadphones: audio_headphones_symbolic_default,
  AudioHeadset: audio_headset_symbolic_default,
  AudioInputMicrophone: audio_input_microphone_symbolic_default,
  AudioSpeakers: audio_speakers_symbolic_default,
  AudioVolumeHigh: audio_volume_high_symbolic_default,
  AudioVolumeLow: audio_volume_low_symbolic_default,
  AudioVolumeMedium: audio_volume_medium_symbolic_default,
  AudioVolumeMuted: audio_volume_muted_symbolic_default,
  AudioVolumeOveramplified: audio_volume_overamplified_symbolic_default,
  AudioXGeneric: audio_x_generic_symbolic_default,
  AuthFingerprint: auth_fingerprint_symbolic_default,
  AuthSim: auth_sim_symbolic_default,
  AuthSimLocked: auth_sim_locked_symbolic_default,
  AuthSimMissing: auth_sim_missing_symbolic_default,
  AuthSmartcard: auth_smartcard_symbolic_default,
  AvatarDefault: avatar_default_symbolic_default,
  Battery: battery_symbolic_default,
  BatteryCaution: battery_caution_symbolic_default,
  BatteryCautionCharging: battery_caution_charging_symbolic_default,
  BatteryEmpty: battery_empty_symbolic_default,
  BatteryEmptyCharging: battery_empty_charging_symbolic_default,
  BatteryFull: battery_full_symbolic_default,
  BatteryFullCharged: battery_full_charged_symbolic_default,
  BatteryFullCharging: battery_full_charging_symbolic_default,
  BatteryGood: battery_good_symbolic_default,
  BatteryGoodCharging: battery_good_charging_symbolic_default,
  BatteryLevel0: battery_level_0_symbolic_default,
  BatteryLevel0Charging: battery_level_0_charging_symbolic_default,
  BatteryLevel10: battery_level_10_symbolic_default,
  BatteryLevel100: battery_level_100_symbolic_default,
  BatteryLevel100Charged: battery_level_100_charged_symbolic_default,
  BatteryLevel10Charging: battery_level_10_charging_symbolic_default,
  BatteryLevel20: battery_level_20_symbolic_default,
  BatteryLevel20Charging: battery_level_20_charging_symbolic_default,
  BatteryLevel30: battery_level_30_symbolic_default,
  BatteryLevel30Charging: battery_level_30_charging_symbolic_default,
  BatteryLevel40: battery_level_40_symbolic_default,
  BatteryLevel40Charging: battery_level_40_charging_symbolic_default,
  BatteryLevel50: battery_level_50_symbolic_default,
  BatteryLevel50Charging: battery_level_50_charging_symbolic_default,
  BatteryLevel60: battery_level_60_symbolic_default,
  BatteryLevel60Charging: battery_level_60_charging_symbolic_default,
  BatteryLevel70: battery_level_70_symbolic_default,
  BatteryLevel70Charging: battery_level_70_charging_symbolic_default,
  BatteryLevel80: battery_level_80_symbolic_default,
  BatteryLevel80Charging: battery_level_80_charging_symbolic_default,
  BatteryLevel90: battery_level_90_symbolic_default,
  BatteryLevel90Charging: battery_level_90_charging_symbolic_default,
  BatteryLow: battery_low_symbolic_default,
  BatteryLowCharging: battery_low_charging_symbolic_default,
  BatteryMissing: battery_missing_symbolic_default,
  Bluetooth: bluetooth_symbolic_default,
  BluetoothActive: bluetooth_active_symbolic_default,
  BluetoothDisabled: bluetooth_disabled_symbolic_default,
  BluetoothDisconnected: bluetooth_disconnected_symbolic_default,
  BluetoothHardwareDisabled: bluetooth_hardware_disabled_symbolic_default,
  BookmarkNew: bookmark_new_symbolic_default,
  CallIncoming: call_incoming_symbolic_default,
  CallMissed: call_missed_symbolic_default,
  CallOutgoing: call_outgoing_symbolic_default,
  CallStart: call_start_symbolic_default,
  CallStop: call_stop_symbolic_default,
  CameraDisabled: camera_disabled_symbolic_default,
  CameraHardwareDisabled: camera_hardware_disabled_symbolic_default,
  CameraPhoto: camera_photo_symbolic_default,
  CameraSwitch: camera_switch_symbolic_default,
  CameraVideo: camera_video_symbolic_default,
  CameraWeb: camera_web_symbolic_default,
  CapsLock: caps_lock_symbolic_default,
  ChangesAllow: changes_allow_symbolic_default,
  ChangesPrevent: changes_prevent_symbolic_default,
  ChannelInsecure: channel_insecure_symbolic_default,
  ChannelSecure: channel_secure_symbolic_default,
  ChatMessageNew: chat_message_new_symbolic_default,
  Checkbox: checkbox_symbolic_default,
  CheckboxChecked: checkbox_checked_symbolic_default,
  CheckboxMixed: checkbox_mixed_symbolic_default,
  ColorSelect: color_select_symbolic_default,
  ColorimeterColorhug: colorimeter_colorhug_symbolic_default,
  Computer: computer_symbolic_default,
  ComputerAppleIpad: computer_apple_ipad_symbolic_default,
  ComputerFail: computer_fail_symbolic_default,
  ContactNew: contact_new_symbolic_default,
  ContentLoading: content_loading_symbolic_default,
  DaytimeSunrise: daytime_sunrise_symbolic_default,
  DaytimeSunset: daytime_sunset_symbolic_default,
  DialogError: dialog_error_symbolic_default,
  DialogInformation: dialog_information_symbolic_default,
  DialogPassword: dialog_password_symbolic_default,
  DialogQuestion: dialog_question_symbolic_default,
  DialogWarning: dialog_warning_symbolic_default,
  DisplayBrightness: display_brightness_symbolic_default,
  DisplayProjector: display_projector_symbolic_default,
  DocumentEdit: document_edit_symbolic_default,
  DocumentNew: document_new_symbolic_default,
  DocumentOpen: document_open_symbolic_default,
  DocumentOpenRecent: document_open_recent_symbolic_default,
  DocumentPageSetup: document_page_setup_symbolic_default,
  DocumentPrint: document_print_symbolic_default,
  DocumentPrintPreview: document_print_preview_symbolic_default,
  DocumentProperties: document_properties_symbolic_default,
  DocumentRevert: document_revert_symbolic_default,
  DocumentRevertRtl: document_revert_symbolic_rtl_default,
  DocumentSave: document_save_symbolic_default,
  DocumentSaveAs: document_save_as_symbolic_default,
  DocumentSend: document_send_symbolic_default,
  DriveHarddisk: drive_harddisk_symbolic_default,
  DriveHarddiskIeee1394: drive_harddisk_ieee1394_symbolic_default,
  DriveHarddiskSolidstate: drive_harddisk_solidstate_symbolic_default,
  DriveHarddiskSystem: drive_harddisk_system_symbolic_default,
  DriveHarddiskUsb: drive_harddisk_usb_symbolic_default,
  DriveMultidisk: drive_multidisk_symbolic_default,
  DriveOptical: drive_optical_symbolic_default,
  DriveRemovableMedia: drive_removable_media_symbolic_default,
  EditClear: edit_clear_symbolic_default,
  EditClearAll: edit_clear_all_symbolic_default,
  EditClearRtl: edit_clear_symbolic_rtl_default,
  EditCopy: edit_copy_symbolic_default,
  EditCut: edit_cut_symbolic_default,
  EditDelete: edit_delete_symbolic_default,
  EditFind: edit_find_symbolic_default,
  EditFindReplace: edit_find_replace_symbolic_default,
  EditPaste: edit_paste_symbolic_default,
  EditRedo: edit_redo_symbolic_default,
  EditSelect: edit_select_symbolic_default,
  EditSelectAll: edit_select_all_symbolic_default,
  EditUndo: edit_undo_symbolic_default,
  EmblemDefault: emblem_default_symbolic_default,
  EmblemDocuments: emblem_documents_symbolic_default,
  EmblemFavorite: emblem_favorite_symbolic_default,
  EmblemImportant: emblem_important_symbolic_default,
  EmblemMusic: emblem_music_symbolic_default,
  EmblemOk: emblem_ok_symbolic_default,
  EmblemPhotos: emblem_photos_symbolic_default,
  EmblemShared: emblem_shared_symbolic_default,
  EmblemSynchronizing: emblem_synchronizing_symbolic_default,
  EmblemSystem: emblem_system_symbolic_default,
  EmblemVideos: emblem_videos_symbolic_default,
  EmojiActivities: emoji_activities_symbolic_default,
  EmojiBody: emoji_body_symbolic_default,
  EmojiFlags: emoji_flags_symbolic_default,
  EmojiFood: emoji_food_symbolic_default,
  EmojiNature: emoji_nature_symbolic_default,
  EmojiObjects: emoji_objects_symbolic_default,
  EmojiPeople: emoji_people_symbolic_default,
  EmojiRecent: emoji_recent_symbolic_default,
  EmojiSymbols: emoji_symbols_symbolic_default,
  EmojiTravel: emoji_travel_symbolic_default,
  EmoteLove: emote_love_symbolic_default,
  ErrorCorrect: error_correct_symbolic_default,
  EyeNotLooking: eye_not_looking_symbolic_default,
  EyeOpenNegativeFilled: eye_open_negative_filled_symbolic_default,
  FaceAngel: face_angel_symbolic_default,
  FaceAngry: face_angry_symbolic_default,
  FaceConfused: face_confused_symbolic_default,
  FaceCool: face_cool_symbolic_default,
  FaceCrying: face_crying_symbolic_default,
  FaceDevilish: face_devilish_symbolic_default,
  FaceEmbarrassed: face_embarrassed_symbolic_default,
  FaceGlasses: face_glasses_symbolic_default,
  FaceKiss: face_kiss_symbolic_default,
  FaceLaugh: face_laugh_symbolic_default,
  FaceMonkey: face_monkey_symbolic_default,
  FacePlain: face_plain_symbolic_default,
  FaceRaspberry: face_raspberry_symbolic_default,
  FaceSad: face_sad_symbolic_default,
  FaceShutmouth: face_shutmouth_symbolic_default,
  FaceSick: face_sick_symbolic_default,
  FaceSmile: face_smile_symbolic_default,
  FaceSmileBig: face_smile_big_symbolic_default,
  FaceSmirk: face_smirk_symbolic_default,
  FaceSurprise: face_surprise_symbolic_default,
  FaceTired: face_tired_symbolic_default,
  FaceUncertain: face_uncertain_symbolic_default,
  FaceWink: face_wink_symbolic_default,
  FaceWorried: face_worried_symbolic_default,
  FaceYawn: face_yawn_symbolic_default,
  FindLocation: find_location_symbolic_default,
  FocusLegacySystray: focus_legacy_systray_symbolic_default,
  FocusTopBar: focus_top_bar_symbolic_default,
  FocusWindows: focus_windows_symbolic_default,
  Folder: folder_symbolic_default,
  FolderDocuments: folder_documents_symbolic_default,
  FolderDownload: folder_download_symbolic_default,
  FolderDragAccept: folder_drag_accept_symbolic_default,
  FolderMusic: folder_music_symbolic_default,
  FolderNew: folder_new_symbolic_default,
  FolderOpen: folder_open_symbolic_default,
  FolderPictures: folder_pictures_symbolic_default,
  FolderPublicshare: folder_publicshare_symbolic_default,
  FolderRemote: folder_remote_symbolic_default,
  FolderSavedSearch: folder_saved_search_symbolic_default,
  FolderTemplates: folder_templates_symbolic_default,
  FolderVideos: folder_videos_symbolic_default,
  FolderVisiting: folder_visiting_symbolic_default,
  FontSelect: font_select_symbolic_default,
  FontXGeneric: font_x_generic_symbolic_default,
  FormatIndentLess: format_indent_less_symbolic_default,
  FormatIndentMore: format_indent_more_symbolic_default,
  FormatJustifyCenter: format_justify_center_symbolic_default,
  FormatJustifyFill: format_justify_fill_symbolic_default,
  FormatJustifyLeft: format_justify_left_symbolic_default,
  FormatJustifyRight: format_justify_right_symbolic_default,
  FormatTextBold: format_text_bold_symbolic_default,
  FormatTextDirection: format_text_direction_symbolic_default,
  FormatTextDirectionRtl: format_text_direction_symbolic_rtl_default,
  FormatTextItalic: format_text_italic_symbolic_default,
  FormatTextStrikethrough: format_text_strikethrough_symbolic_default,
  FormatTextUnderline: format_text_underline_symbolic_default,
  GnomePowerManager: gnome_power_manager_symbolic_default,
  GoBottom: go_bottom_symbolic_default,
  GoDown: go_down_symbolic_default,
  GoFirst: go_first_symbolic_default,
  GoHome: go_home_symbolic_default,
  GoJump: go_jump_symbolic_default,
  GoJumpRtl: go_jump_symbolic_rtl_default,
  GoLast: go_last_symbolic_default,
  GoNext: go_next_symbolic_default,
  GoPrevious: go_previous_symbolic_default,
  GoTop: go_top_symbolic_default,
  GoUp: go_up_symbolic_default,
  GoaPanel: goa_panel_symbolic_default,
  HelpAbout: help_about_symbolic_default,
  HelpBrowser: help_browser_symbolic_default,
  HelpContents: help_contents_symbolic_default,
  HelpFaq: help_faq_symbolic_default,
  ImageLoading: image_loading_symbolic_default,
  ImageXGeneric: image_x_generic_symbolic_default,
  InodeDirectory: inode_directory_symbolic_default,
  InputDialpad: input_dialpad_symbolic_default,
  InputGaming: input_gaming_symbolic_default,
  InputKeyboard: input_keyboard_symbolic_default,
  InputMouse: input_mouse_symbolic_default,
  InputTablet: input_tablet_symbolic_default,
  InputTouchpad: input_touchpad_symbolic_default,
  InsertImage: insert_image_symbolic_default,
  InsertLink: insert_link_symbolic_default,
  InsertObject: insert_object_symbolic_default,
  InsertText: insert_text_symbolic_default,
  KeyboardBrightness: keyboard_brightness_symbolic_default,
  ListAdd: list_add_symbolic_default,
  ListDragHandle: list_drag_handle_symbolic_default,
  ListRemove: list_remove_symbolic_default,
  ListRemoveAll: list_remove_all_symbolic_default,
  LocationServicesActive: location_services_active_symbolic_default,
  LocationServicesDisabled: location_services_disabled_symbolic_default,
  MailAttachment: mail_attachment_symbolic_default,
  MailForward: mail_forward_symbolic_default,
  MailMarkImportant: mail_mark_important_symbolic_default,
  MailMarkJunk: mail_mark_junk_symbolic_default,
  MailMarkNotjunk: mail_mark_notjunk_symbolic_default,
  MailMessageNew: mail_message_new_symbolic_default,
  MailRead: mail_read_symbolic_default,
  MailReplied: mail_replied_symbolic_default,
  MailReplyAll: mail_reply_all_symbolic_default,
  MailReplySender: mail_reply_sender_symbolic_default,
  MailSend: mail_send_symbolic_default,
  MailSendReceive: mail_send_receive_symbolic_default,
  MailUnread: mail_unread_symbolic_default,
  MarkLocation: mark_location_symbolic_default,
  MediaEject: media_eject_symbolic_default,
  MediaFlash: media_flash_symbolic_default,
  MediaFloppy: media_floppy_symbolic_default,
  MediaOptical: media_optical_symbolic_default,
  MediaOpticalBd: media_optical_bd_symbolic_default,
  MediaOpticalCdAudio: media_optical_cd_audio_symbolic_default,
  MediaOpticalDvd: media_optical_dvd_symbolic_default,
  MediaPlaybackPause: media_playback_pause_symbolic_default,
  MediaPlaybackStart: media_playback_start_symbolic_default,
  MediaPlaybackStartRtl: media_playback_start_symbolic_rtl_default,
  MediaPlaybackStop: media_playback_stop_symbolic_default,
  MediaPlaylistConsecutive: media_playlist_consecutive_symbolic_default,
  MediaPlaylistRepeat: media_playlist_repeat_symbolic_default,
  MediaPlaylistRepeatSong: media_playlist_repeat_song_symbolic_default,
  MediaPlaylistShuffle: media_playlist_shuffle_symbolic_default,
  MediaRecord: media_record_symbolic_default,
  MediaRemovable: media_removable_symbolic_default,
  MediaSeekBackward: media_seek_backward_symbolic_default,
  MediaSeekForward: media_seek_forward_symbolic_default,
  MediaSkipBackward: media_skip_backward_symbolic_default,
  MediaSkipForward: media_skip_forward_symbolic_default,
  MediaTape: media_tape_symbolic_default,
  MediaViewSubtitles: media_view_subtitles_symbolic_default,
  MediaZip: media_zip_symbolic_default,
  MicrophoneDisabled: microphone_disabled_symbolic_default,
  MicrophoneHardwareDisabled: microphone_hardware_disabled_symbolic_default,
  MicrophoneSensitivityHigh: microphone_sensitivity_high_symbolic_default,
  MicrophoneSensitivityLow: microphone_sensitivity_low_symbolic_default,
  MicrophoneSensitivityMedium: microphone_sensitivity_medium_symbolic_default,
  MicrophoneSensitivityMuted: microphone_sensitivity_muted_symbolic_default,
  Modem: modem_symbolic_default,
  MultimediaPlayer: multimedia_player_symbolic_default,
  MultimediaPlayerAppleIpodTouch: multimedia_player_apple_ipod_touch_symbolic_default,
  MultimediaVolumeControl: multimedia_volume_control_symbolic_default,
  NetworkCellular: network_cellular_symbolic_default,
  NetworkCellular2g: network_cellular_2g_symbolic_default,
  NetworkCellular3g: network_cellular_3g_symbolic_default,
  NetworkCellular4g: network_cellular_4g_symbolic_default,
  NetworkCellularAcquiring: network_cellular_acquiring_symbolic_default,
  NetworkCellularConnected: network_cellular_connected_symbolic_default,
  NetworkCellularDisabled: network_cellular_disabled_symbolic_default,
  NetworkCellularEdge: network_cellular_edge_symbolic_default,
  NetworkCellularGprs: network_cellular_gprs_symbolic_default,
  NetworkCellularHardwareDisabled: network_cellular_hardware_disabled_symbolic_default,
  NetworkCellularHspa: network_cellular_hspa_symbolic_default,
  NetworkCellularNoRoute: network_cellular_no_route_symbolic_default,
  NetworkCellularOffline: network_cellular_offline_symbolic_default,
  NetworkCellularSignalExcellent: network_cellular_signal_excellent_symbolic_default,
  NetworkCellularSignalGood: network_cellular_signal_good_symbolic_default,
  NetworkCellularSignalNone: network_cellular_signal_none_symbolic_default,
  NetworkCellularSignalOk: network_cellular_signal_ok_symbolic_default,
  NetworkCellularSignalWeak: network_cellular_signal_weak_symbolic_default,
  NetworkError: network_error_symbolic_default,
  NetworkIdle: network_idle_symbolic_default,
  NetworkNoRoute: network_no_route_symbolic_default,
  NetworkOffline: network_offline_symbolic_default,
  NetworkReceive: network_receive_symbolic_default,
  NetworkServer: network_server_symbolic_default,
  NetworkTransmit: network_transmit_symbolic_default,
  NetworkTransmitReceive: network_transmit_receive_symbolic_default,
  NetworkVpn: network_vpn_symbolic_default,
  NetworkVpnAcquiring: network_vpn_acquiring_symbolic_default,
  NetworkVpnNoRoute: network_vpn_no_route_symbolic_default,
  NetworkWired: network_wired_symbolic_default,
  NetworkWiredAcquiring: network_wired_acquiring_symbolic_default,
  NetworkWiredDisconnected: network_wired_disconnected_symbolic_default,
  NetworkWiredNoRoute: network_wired_no_route_symbolic_default,
  NetworkWiredOffline: network_wired_offline_symbolic_default,
  NetworkWireless: network_wireless_symbolic_default,
  NetworkWirelessAcquiring: network_wireless_acquiring_symbolic_default,
  NetworkWirelessConnected: network_wireless_connected_symbolic_default,
  NetworkWirelessDisabled: network_wireless_disabled_symbolic_default,
  NetworkWirelessEncrypted: network_wireless_encrypted_symbolic_default,
  NetworkWirelessHardwareDisabled: network_wireless_hardware_disabled_symbolic_default,
  NetworkWirelessHotspot: network_wireless_hotspot_symbolic_default,
  NetworkWirelessNoRoute: network_wireless_no_route_symbolic_default,
  NetworkWirelessOffline: network_wireless_offline_symbolic_default,
  NetworkWirelessSignalExcellent: network_wireless_signal_excellent_symbolic_default,
  NetworkWirelessSignalGood: network_wireless_signal_good_symbolic_default,
  NetworkWirelessSignalNone: network_wireless_signal_none_symbolic_default,
  NetworkWirelessSignalOk: network_wireless_signal_ok_symbolic_default,
  NetworkWirelessSignalWeak: network_wireless_signal_weak_symbolic_default,
  NetworkWorkgroup: network_workgroup_symbolic_default,
  NightLight: night_light_symbolic_default,
  NonStarred: non_starred_symbolic_default,
  NotificationsDisabled: notifications_disabled_symbolic_default,
  ObjectFlipHorizontal: object_flip_horizontal_symbolic_default,
  ObjectFlipVertical: object_flip_vertical_symbolic_default,
  ObjectRotateLeft: object_rotate_left_symbolic_default,
  ObjectRotateRight: object_rotate_right_symbolic_default,
  ObjectSelect: object_select_symbolic_default,
  OpenMenu: open_menu_symbolic_default,
  OrientationLandscape: orientation_landscape_symbolic_default,
  OrientationLandscapeInverse: orientation_landscape_inverse_symbolic_default,
  OrientationPortrait: orientation_portrait_symbolic_default,
  OrientationPortraitInverse: orientation_portrait_inverse_symbolic_default,
  OrientationPortraitLeft: orientation_portrait_left_symbolic_default,
  OrientationPortraitRight: orientation_portrait_right_symbolic_default,
  PackageXGeneric: package_x_generic_symbolic_default,
  PanDown: pan_down_symbolic_default,
  PanEnd: pan_end_symbolic_default,
  PanEndRtl: pan_end_symbolic_rtl_default,
  PanStart: pan_start_symbolic_default,
  PanStartRtl: pan_start_symbolic_rtl_default,
  PanUp: pan_up_symbolic_default,
  Pda: pda_symbolic_default,
  Phone: phone_symbolic_default,
  PhoneAppleIphone: phone_apple_iphone_symbolic_default,
  PhoneOld: phone_old_symbolic_default,
  PowerProfileBalanced: power_profile_balanced_symbolic_default,
  PowerProfilePerformance: power_profile_performance_symbolic_default,
  PowerProfilePowerSaver: power_profile_power_saver_symbolic_default,
  PreferencesColor: preferences_color_symbolic_default,
  PreferencesDesktopAccessibility: preferences_desktop_accessibility_symbolic_default,
  PreferencesDesktopApps: preferences_desktop_apps_symbolic_default,
  PreferencesDesktopDisplay: preferences_desktop_display_symbolic_default,
  PreferencesDesktopFont: preferences_desktop_font_symbolic_default,
  PreferencesDesktopKeyboard: preferences_desktop_keyboard_symbolic_default,
  PreferencesDesktopKeyboardShortcuts: preferences_desktop_keyboard_shortcuts_symbolic_default,
  PreferencesDesktopLocale: preferences_desktop_locale_symbolic_default,
  PreferencesDesktopRemoteDesktop: preferences_desktop_remote_desktop_symbolic_default,
  PreferencesDesktopScreensaver: preferences_desktop_screensaver_symbolic_default,
  PreferencesDesktopWallpaper: preferences_desktop_wallpaper_symbolic_default,
  PreferencesOther: preferences_other_symbolic_default,
  PreferencesSystem: preferences_system_symbolic_default,
  PreferencesSystemDetails: preferences_system_details_symbolic_default,
  PreferencesSystemDevices: preferences_system_devices_symbolic_default,
  PreferencesSystemNetwork: preferences_system_network_symbolic_default,
  PreferencesSystemNetworkProxy: preferences_system_network_proxy_symbolic_default,
  PreferencesSystemNotifications: preferences_system_notifications_symbolic_default,
  PreferencesSystemParentalControls: preferences_system_parental_controls_symbolic_default,
  PreferencesSystemPrivacy: preferences_system_privacy_symbolic_default,
  PreferencesSystemSearch: preferences_system_search_symbolic_default,
  PreferencesSystemSharing: preferences_system_sharing_symbolic_default,
  PreferencesSystemTime: preferences_system_time_symbolic_default,
  Printer: printer_symbolic_default,
  PrinterError: printer_error_symbolic_default,
  PrinterNetwork: printer_network_symbolic_default,
  PrinterPrinting: printer_printing_symbolic_default,
  PrinterWarning: printer_warning_symbolic_default,
  ProcessStop: process_stop_symbolic_default,
  ProcessWorking: process_working_symbolic_default,
  Radio: radio_symbolic_default,
  RadioChecked: radio_checked_symbolic_default,
  RadioMixed: radio_mixed_symbolic_default,
  RotationAllowed: rotation_allowed_symbolic_default,
  RotationLocked: rotation_locked_symbolic_default,
  Scanner: scanner_symbolic_default,
  ScreenShared: screen_shared_symbolic_default,
  SecurityHigh: security_high_symbolic_default,
  SecurityLow: security_low_symbolic_default,
  SecurityMedium: security_medium_symbolic_default,
  SelectionEnd: selection_end_symbolic_default,
  SelectionStart: selection_start_symbolic_default,
  SemiStarred: semi_starred_symbolic_default,
  SemiStarredRtl: semi_starred_symbolic_rtl_default,
  SendTo: send_to_symbolic_default,
  SidebarHide: sidebar_hide_symbolic_default,
  SidebarShow: sidebar_show_symbolic_default,
  SoftwareUpdateAvailable: software_update_available_symbolic_default,
  SoftwareUpdateUrgent: software_update_urgent_symbolic_default,
  StarNew: star_new_symbolic_default,
  Starred: starred_symbolic_default,
  StartHere: start_here_symbolic_default,
  SwitchOff: switch_off_symbolic_default,
  SwitchOn: switch_on_symbolic_default,
  SystemFileManager: system_file_manager_symbolic_default,
  SystemHelp: system_help_symbolic_default,
  SystemLockScreen: system_lock_screen_symbolic_default,
  SystemLogOut: system_log_out_symbolic_default,
  SystemReboot: system_reboot_symbolic_default,
  SystemRun: system_run_symbolic_default,
  SystemSearch: system_search_symbolic_default,
  SystemShutdown: system_shutdown_symbolic_default,
  SystemSoftwareInstall: system_software_install_symbolic_default,
  SystemSwitchUser: system_switch_user_symbolic_default,
  SystemUsers: system_users_symbolic_default,
  TabNew: tab_new_symbolic_default,
  TaskDue: task_due_symbolic_default,
  TaskPastDue: task_past_due_symbolic_default,
  TextEditor: text_editor_symbolic_default,
  TextXGeneric: text_x_generic_symbolic_default,
  Thunderbolt: thunderbolt_symbolic_default,
  ThunderboltAcquiring: thunderbolt_acquiring_symbolic_default,
  ToolsCheckSpelling: tools_check_spelling_symbolic_default,
  TouchDisabled: touch_disabled_symbolic_default,
  TouchpadDisabled: touchpad_disabled_symbolic_default,
  Tv: tv_symbolic_default,
  UninterruptiblePowerSupply: uninterruptible_power_supply_symbolic_default,
  UserAvailable: user_available_symbolic_default,
  UserAway: user_away_symbolic_default,
  UserBookmarks: user_bookmarks_symbolic_default,
  UserBusy: user_busy_symbolic_default,
  UserDesktop: user_desktop_symbolic_default,
  UserHome: user_home_symbolic_default,
  UserIdle: user_idle_symbolic_default,
  UserInfo: user_info_symbolic_default,
  UserInvisible: user_invisible_symbolic_default,
  UserNotTracked: user_not_tracked_symbolic_default,
  UserOffline: user_offline_symbolic_default,
  UserStatusPending: user_status_pending_symbolic_default,
  UserTrash: user_trash_symbolic_default,
  UserTrashFull: user_trash_full_symbolic_default,
  UtilitiesTerminal: utilities_terminal_symbolic_default,
  ValueDecrease: value_decrease_symbolic_default,
  ValueIncrease: value_increase_symbolic_default,
  VideoDisplay: video_display_symbolic_default,
  VideoJoinedDisplays: video_joined_displays_symbolic_default,
  VideoSingleDisplay: video_single_display_symbolic_default,
  VideoXGeneric: video_x_generic_symbolic_default,
  ViewAppGrid: view_app_grid_symbolic_default,
  ViewConceal: view_conceal_symbolic_default,
  ViewContinuous: view_continuous_symbolic_default,
  ViewDual: view_dual_symbolic_default,
  ViewFullscreen: view_fullscreen_symbolic_default,
  ViewGrid: view_grid_symbolic_default,
  ViewList: view_list_symbolic_default,
  ViewListBullet: view_list_bullet_symbolic_default,
  ViewListOrdered: view_list_ordered_symbolic_default,
  ViewMirror: view_mirror_symbolic_default,
  ViewMore: view_more_symbolic_default,
  ViewMoreHorizontal: view_more_horizontal_symbolic_default,
  ViewPaged: view_paged_symbolic_default,
  ViewPin: view_pin_symbolic_default,
  ViewRefresh: view_refresh_symbolic_default,
  ViewRestore: view_restore_symbolic_default,
  ViewReveal: view_reveal_symbolic_default,
  ViewSortAscending: view_sort_ascending_symbolic_default,
  ViewSortDescending: view_sort_descending_symbolic_default,
  ViewWrapped: view_wrapped_symbolic_default,
  ViewWrappedRtl: view_wrapped_symbolic_rtl_default,
  WeatherClear: weather_clear_symbolic_default,
  WeatherClearNight: weather_clear_night_symbolic_default,
  WeatherFewClouds: weather_few_clouds_symbolic_default,
  WeatherFewCloudsNight: weather_few_clouds_night_symbolic_default,
  WeatherFog: weather_fog_symbolic_default,
  WeatherOvercast: weather_overcast_symbolic_default,
  WeatherSevereAlert: weather_severe_alert_symbolic_default,
  WeatherShowers: weather_showers_symbolic_default,
  WeatherShowersScattered: weather_showers_scattered_symbolic_default,
  WeatherSnow: weather_snow_symbolic_default,
  WeatherStorm: weather_storm_symbolic_default,
  WeatherTornado: weather_tornado_symbolic_default,
  WeatherWindy: weather_windy_symbolic_default,
  WebBrowser: web_browser_symbolic_default,
  WindowClose: window_close_symbolic_default,
  WindowMaximize: window_maximize_symbolic_default,
  WindowMinimize: window_minimize_symbolic_default,
  WindowNew: window_new_symbolic_default,
  WindowRestore: window_restore_symbolic_default,
  XOfficeAddressBook: x_office_address_book_symbolic_default,
  XOfficeCalendar: x_office_calendar_symbolic_default,
  XOfficeDocument: x_office_document_symbolic_default,
  XOfficeDrawing: x_office_drawing_symbolic_default,
  XOfficePresentation: x_office_presentation_symbolic_default,
  XOfficeSpreadsheet: x_office_spreadsheet_symbolic_default,
  ZoomFitBest: zoom_fit_best_symbolic_default,
  ZoomIn: zoom_in_symbolic_default,
  ZoomOriginal: zoom_original_symbolic_default,
  ZoomOut: zoom_out_symbolic_default
});

function Box({
  children,
  className,
  inline,
  compact,
  fill,
  border = false,
  horizontal,
  vertical,
  align,
  justify,
  space,
  padded,
  expandChildren,
  ...rest
}) {
  return /* @__PURE__ */ React.createElement("div", {
    className: cx("Box", className, space ? `space-${space}` : void 0, typeof fill === "string" ? `fill-${fill}` : fill ? "fill" : void 0, alignClass(align), justifyClass(justify), {
      inline,
      compact,
      vertical,
      horizontal,
      border,
      padded,
      "expand-children": expandChildren
    }),
    ...rest
  }, children);
}
function alignClass(align) {
  if (align === true)
    return "align";
  if (typeof align === "string")
    return `align-${align}`;
  return void 0;
}
function justifyClass(justify) {
  if (justify === true)
    return "justify";
  if (typeof justify === "string")
    return `justify-${justify}`;
  return void 0;
}

function Spinner({ hidden, disabled }) {
  return /* @__PURE__ */ React.createElement(process_working_symbolic_default, {
    containerProps: { className: cx("Spinner", { hidden, disabled }) }
  });
}

const Button = React.forwardRef(({
  children,
  className,
  size = "medium",
  icon: IconElement,
  type = "button",
  disabled,
  loading,
  circular,
  flat,
  link,
  active,
  hover,
  text,
  image,
  primary,
  danger,
  ...rest
}, ref) => {
  const isImageButton = image !== void 0 ? image : Boolean(!children);
  return /* @__PURE__ */ React.createElement("button", {
    className: cx("Button", size, {
      disabled,
      circular,
      flat,
      link,
      active,
      hover,
      "text-button": text,
      "image-button": isImageButton,
      "suggested-action": primary,
      "destructive-action": danger
    }) + " " + cx(className),
    disabled: disabled || loading,
    type,
    ref,
    ...rest
  }, loading && /* @__PURE__ */ React.createElement(Spinner, null), IconElement && /* @__PURE__ */ React.createElement(IconElement, {
    colored: true,
    containerProps: { className: "Button__icon" }
  }), children);
});

function Alert({
  title,
  children,
  className,
  size,
  icon: iconProp,
  showClose = false,
  onClose = () => {
  },
  info,
  success,
  warning,
  danger,
  ...rest
}) {
  const IconElement = iconProp ?? info ? dialog_information_symbolic_default : success ? emblem_ok_symbolic_default : warning ? dialog_warning_symbolic_default : danger ? dialog_warning_symbolic_default : dialog_warning_symbolic_default;
  const showIcon = Boolean(IconElement);
  const alertClassName = cx("Alert", className, size, {
    info,
    success,
    warning,
    danger
  });
  return /* @__PURE__ */ React.createElement(Box, {
    horizontal: true,
    className: alertClassName,
    ...rest
  }, showIcon && /* @__PURE__ */ React.createElement(Box, {
    className: "Alert__icon"
  }, /* @__PURE__ */ React.createElement(IconElement, null)), /* @__PURE__ */ React.createElement(Box, {
    className: "Alert__content Box__fill"
  }, title && /* @__PURE__ */ React.createElement("div", {
    className: "Alert__title"
  }, title), /* @__PURE__ */ React.createElement("div", {
    className: "Alert__message"
  }, children)), showClose && /* @__PURE__ */ React.createElement(Button, {
    className: "Alert__close",
    icon: window_close_symbolic_default,
    onClick: onClose
  }));
}

function useControlled(controlled, defaultProp, setValueProp) {
  const { current: isControlled } = React.useRef(controlled !== void 0);
  const [valueState, setValueState] = React.useState(defaultProp);
  const value = isControlled ? controlled : valueState;
  if (isControlled && typeof setValueProp !== "function")
    throw new Error("useControlled: setValue function required for controlled components");
  const setValue = React.useCallback((newValue) => {
    if (isControlled && setValueProp)
      setValueProp(newValue);
    else
      setValueState(newValue);
  }, []);
  return [value, setValue];
}

function Label({
  children,
  className,
  size = "medium",
  align,
  fill,
  ellipsis,
  title,
  disabled,
  muted,
  info,
  success,
  warning,
  danger,
  italic,
  bold,
  noSelect,
  ...rest
}) {
  const as = rest.htmlFor ? "label" : "span";
  return React.createElement(as, {
    className: cx("Label", size, align ? `align-${align}` : void 0, fill === void 0 ? void 0 : fill === true ? "fill" : `fill-${fill}`, {
      ellipsis,
      title,
      disabled,
      info,
      success,
      warning,
      danger,
      "text-muted": muted,
      "text-italic": italic,
      "text-bold": bold,
      "user-select-none": noSelect
    }) + " " + cx(className),
    ...rest
  }, children);
}

class Expander extends React.Component {
  static defaultProps = {
    transition: "vertical",
    iconPosition: "after",
    contents: false
  };
  contentRef;
  state;
  constructor(props) {
    super(props);
    this.contentRef = React.createRef();
    this.state = {
      open: false,
      containerStyle: {}
    };
  }
  setOpen = (open) => {
    this.setState({ open });
  };
  componentDidUpdate() {
    this.updateDimensions();
  }
  updateDimensions() {
    const { size, fitContent } = this.props;
    const property = this.getProperty();
    let value = size ?? 100;
    if (this.contentRef.current) {
      const rect = this.contentRef.current.getBoundingClientRect();
      value = rect[property];
      const style = {};
      style[property] = value;
      if (fitContent) {
        const inverseProperty = getInverseProperty(property);
        style[inverseProperty] = rect[inverseProperty];
      }
      if (!equals(style, this.state.containerStyle))
        this.setState({ containerStyle: style });
    }
  }
  isOpen() {
    return this.props.open ?? this.state.open;
  }
  getProperty() {
    const { transition } = this.props;
    switch (transition) {
      case "vertical":
        return "height";
      case "horizontal":
        return "width";
      default:
        throw new Error("unreachable");
    }
  }
  getContainerStyle() {
    const property = this.getProperty();
    const open = this.isOpen();
    return open ? this.state.containerStyle : { ...this.state.containerStyle, [property]: 0 };
  }
  onRef = (ref) => {
    this.contentRef.current = ref;
    if (ref)
      this.updateDimensions();
  };
  render() {
    const {
      children,
      className,
      contents,
      open: openProp,
      trigger: triggerProp,
      label,
      transition,
      size,
      fitContent,
      iconPosition,
      onChange,
      ...rest
    } = this.props;
    const open = this.isOpen();
    const setOpen = openProp !== void 0 ? onChange ?? this.setOpen : this.setOpen;
    const toggle = () => setOpen(!open);
    const property = this.getProperty();
    const contentStyle = size === void 0 ? void 0 : { [property]: size };
    const containerStyle = this.getContainerStyle();
    const triggerClassName = cx("Expander__button", { expanded: open });
    const trigger = triggerProp ? React.Children.map(typeof triggerProp === "function" ? triggerProp({ toggle }) : triggerProp, (child) => React.cloneElement(child, {
      className: cx(child.props.className, triggerClassName),
      onClick: child.props.onClick || toggle
    })) : !label ? null : /* @__PURE__ */ React.createElement("button", {
      type: "button",
      className: triggerClassName,
      onClick: toggle
    }, iconPosition === "before" && /* @__PURE__ */ React.createElement(pan_end_symbolic_default, {
      containerProps: { className: "arrow-before" }
    }), /* @__PURE__ */ React.createElement(Label, null, label), iconPosition === "after" && /* @__PURE__ */ React.createElement(pan_start_symbolic_default, {
      className: "arrow-after"
    }));
    const container = /* @__PURE__ */ React.createElement("div", {
      className: "Expander__container",
      style: containerStyle
    }, /* @__PURE__ */ React.createElement("div", {
      className: "Expander__content",
      style: contentStyle,
      ref: this.onRef
    }, children));
    if (contents)
      return /* @__PURE__ */ React.createElement(React.Fragment, null, trigger, /* @__PURE__ */ React.createElement("div", {
        className: cx("Expander", className, transition, {
          open,
          "fit-content": fitContent
        }),
        ...rest
      }, container));
    return /* @__PURE__ */ React.createElement("div", {
      className: cx("Expander", className, transition, {
        open,
        "fit-content": fitContent
      }),
      ...rest
    }, trigger, container);
  }
}
function getInverseProperty(p) {
  switch (p) {
    case "width":
      return "height";
    case "height":
      return "width";
    default:
      throw new Error("unreachable");
  }
}

function useForceUpdate() {
  return useReducer((i) => ++i % 1e4, 0)[1];
}

const noop = () => {
};
const Input = React.forwardRef(function Input2({
  type = "text",
  value: valueProp,
  defaultValue,
  className,
  size = "medium",
  loading,
  icon: IconElement,
  iconAfter: IconAfterElement,
  placeholder,
  flat,
  disabled: disabledValue,
  error,
  warning,
  progress,
  children,
  allowClear,
  onAccept,
  onKeyDown,
  onChange = noop,
  onClickIconAfter,
  ...rest
}, ref) {
  const spinner = loading ? /* @__PURE__ */ React.createElement(Spinner, null) : /* @__PURE__ */ React.createElement(React.Fragment, null);
  const disabled = disabledValue || loading;
  const forceUpdate = useForceUpdate();
  const inputRef = useRef(null);
  const isControlled = typeof valueProp === "string";
  const [value, setValue] = useControlled(valueProp, defaultValue, onChange);
  const inputClassName = cx("Input", size, {
    flat,
    disabled,
    error,
    warning,
    progress: progress !== void 0
  }) + " " + cx(className);
  const onInputChange = (ev) => {
    if (!isControlled)
      forceUpdate();
    setValue(ev.currentTarget.value);
  };
  const onInputKeyDown = (ev) => {
    if (ev.nativeEvent.key === "Enter" && onAccept) {
      onAccept(ev.currentTarget.value);
      ev.preventDefault();
      return;
    }
    if (onKeyDown) {
      onKeyDown(ev);
    }
  };
  const onClickContainer = (ev) => {
    if (ev.target !== inputRef.current && inputRef.current)
      inputRef.current.focus();
  };
  if (allowClear) {
    if (value) {
      IconAfterElement = window_close_symbolic_default;
      onClickIconAfter = () => setValue("");
    } else {
      IconAfterElement = void 0;
    }
  }
  return /* @__PURE__ */ React.createElement("div", {
    className: inputClassName,
    ref,
    onClick: onClickContainer
  }, /* @__PURE__ */ React.createElement("span", {
    className: "Input__left"
  }, IconElement ? /* @__PURE__ */ React.createElement(IconElement, null) : spinner), /* @__PURE__ */ React.createElement("div", {
    className: "Input__area"
  }, /* @__PURE__ */ React.createElement("input", {
    type,
    placeholder,
    disabled,
    className: value === "" ? "empty" : void 0,
    ref: inputRef,
    value,
    onChange: onInputChange,
    onKeyDown: onAccept ? onInputKeyDown : onKeyDown,
    ...rest
  }), children && /* @__PURE__ */ React.createElement("div", {
    className: "Input__children"
  }, children)), progress && /* @__PURE__ */ React.createElement("div", {
    className: cx("Input__progress", progress === true ? "indeterminate" : void 0)
  }, /* @__PURE__ */ React.createElement("span", {
    className: "Input__progress__bar",
    style: typeof progress === "number" ? { width: `${progress}%` } : void 0
  })), IconAfterElement && (onClickIconAfter ? /* @__PURE__ */ React.createElement(Button, {
    className: "Input__right",
    flat: true,
    size,
    onClick: onClickIconAfter
  }, /* @__PURE__ */ React.createElement(IconAfterElement, null)) : /* @__PURE__ */ React.createElement("span", {
    className: "Input__right"
  }, /* @__PURE__ */ React.createElement(IconAfterElement, null))));
});

function List({
  children,
  className,
  size = "medium",
  separators = true,
  horizontal,
  border = true,
  rounded,
  fill,
  rich,
  sidebar,
  sublist,
  ...rest
}) {
  return /* @__PURE__ */ React.createElement("div", {
    className: cx("List", className, size, borderClass(border), {
      fill: fill === true,
      "fill-width": fill === "width",
      "fill-height": fill === "height"
    }, {
      separators,
      horizontal,
      rounded,
      rich,
      sublist,
      sidebar,
      "stack-sidebar": sidebar === "stack",
      "navigation-sidebar": sidebar === "navigation"
    }),
    ...rest
  }, children);
}
function borderClass(border) {
  if (border === false)
    return "border-none";
  if (border === true)
    return "border";
  if (typeof border === "string")
    return `border-${border}`;
  if (Array.isArray(border))
    return border.map(borderClass).join(" ");
  return void 0;
}

function ListItem({
  as,
  children,
  className,
  title,
  selected,
  expandable,
  activatable,
  needsAttention,
  ...rest
}) {
  const Element = as ? as : activatable ? "button" : "div";
  return /* @__PURE__ */ React.createElement(Element, {
    className: cx("List__item", className, {
      title,
      activatable,
      expandable,
      selected,
      "needs-attention": needsAttention
    }),
    role: activatable ? "button" : void 0,
    tabIndex: activatable ? 0 : void 0,
    ...rest
  }, children, expandable && /* @__PURE__ */ React.createElement(go_next_symbolic_default, {
    className: "arrow",
    colored: false
  }));
}

const noop$1 = () => {
};
function getInversePlacement(p) {
  if (p.startsWith("top"))
    return "bottom";
  if (p.startsWith("left"))
    return "right";
  if (p.startsWith("right"))
    return "left";
  return "top";
}
class Popover extends React.PureComponent {
  static defaultProps = {
    arrow: true,
    placement: "bottom",
    align: "right",
    method: "click",
    delay: 200,
    shouldUpdatePlacement: true,
    onOpen: noop$1,
    onClose: noop$1,
    onDidOpen: noop$1,
    onDidClose: noop$1
  };
  domNode;
  isDomNodeAttached;
  isEventListening;
  openTimeout;
  closeTimeout;
  triggerRef;
  popoverRef;
  arrowRef;
  observer;
  popper;
  state;
  constructor(props) {
    super(props);
    this.domNode = document.createElement("div");
    this.domNode.className = "Popover__domNode";
    this.isDomNodeAttached = false;
    this.isEventListening = false;
    this.openTimeout = void 0;
    this.closeTimeout = void 0;
    this.state = {
      open: false,
      closing: false,
      actualPlacement: props.placement,
      styles: {}
    };
    this.triggerRef = React.createRef();
    this.popoverRef = React.createRef();
    this.arrowRef = React.createRef();
    this.observer = new ResizeObserver(this.onContentResize);
  }
  componentWillUnmount() {
    this.detachDomNode();
    this.detachPopper();
  }
  componentDidMount() {
    this.attachPopper();
    if (this.props.shouldAttachEarly)
      this.attachDomNode();
  }
  componentDidUpdate(prevProps, prevState) {
    if (prevProps.open !== this.props.open || prevState.open !== this.state.open) {
      if (this.props.shouldUpdatePlacement && this.popper)
        this.popper.update();
    }
  }
  attachDomNode() {
    if (!this.isDomNodeAttached) {
      document.body.append(this.domNode);
      document.addEventListener("click", this.onDocumentClick);
      this.isDomNodeAttached = true;
      this.forceUpdate();
    }
  }
  detachDomNode() {
    if (this.isDomNodeAttached) {
      document.body.removeChild(this.domNode);
      document.removeEventListener("click", this.onDocumentClick);
      this.isDomNodeAttached = false;
    }
  }
  attachPopper() {
    if (!this.popoverRef.current || !this.triggerRef.current)
      return;
    if (this.popper)
      return;
    this.popper = createPopper(this.triggerRef.current, this.popoverRef.current, this.getPopperOptions());
  }
  detachPopper() {
    if (this.popper) {
      this.popper.destroy();
      this.popper = void 0;
    }
  }
  updatePopperOptions() {
    if (!this.popper)
      return;
    this.popper.setOptions(this.getPopperOptions());
  }
  getPopperOptions() {
    const hasArrow = this.props.arrow;
    const isOpen = this.isOpen();
    this.isEventListening = isOpen;
    return {
      placement: this.props.placement,
      modifiers: [
        {
          name: "arrow",
          enabled: hasArrow,
          options: {
            element: this.arrowRef.current,
            padding: 15
          }
        },
        {
          name: "offset",
          options: {
            offset: [0, hasArrow ? 10 : 0]
          }
        },
        {
          name: "preventOverflow",
          options: {
            altAxis: true,
            padding: 10
          }
        },
        {
          name: "eventListeners",
          enabled: isOpen
        },
        {
          name: "updateComponentState",
          enabled: true,
          phase: "write",
          fn: this.onUpdatePopper
        }
      ]
    };
  }
  onContentResize = () => {
    if (this.popper)
      this.popper.update();
  };
  onRefPopover = (ref) => {
    if (!ref) {
      if (this.popoverRef.current) {
        this.observer.unobserve(this.popoverRef.current);
        this.popoverRef.current = null;
      }
      return;
    }
    this.popoverRef.current = ref;
    this.observer.observe(this.popoverRef.current);
  };
  onDocumentClick = (ev) => {
    if (this.props.method !== "click" && this.props.method !== "click-controlled")
      return;
    if (!this.isOpen())
      return;
    if (!(ev.target && this.triggerRef.current?.contains(ev.target) || ev.target && this.popoverRef.current?.contains(ev.target)))
      this.close();
  };
  onTransitionEnd = () => {
    this.setState({ closing: false });
    if (this.state.open && this.props.onDidOpen)
      this.props.onDidOpen();
    else if (this.props.onDidClose)
      this.props.onDidClose();
  };
  onUpdatePopper = ({ state }) => {
    if (this.state.actualPlacement !== state.placement) {
      this.setState({ actualPlacement: state.placement });
    }
    if (this.props.width) {
      const trigger = state.elements.reference;
      const rect = trigger.getBoundingClientRect();
      if (this.props.width === "trigger") {
        const currentWidth = this.state.styles.width;
        const newWidth = rect.width - 1;
        if (currentWidth !== newWidth)
          this.setState({ styles: { width: newWidth } });
      } else if (this.props.width === "trigger-min") {
        const currentWidth = this.state.styles.minWidth;
        const newWidth = rect.width - 1;
        if (currentWidth !== newWidth)
          this.setState({ styles: { minWidth: newWidth } });
      }
    }
  };
  onClick = (ev) => {
    if (!this.triggerRef.current?.contains(ev.target))
      return;
    if (this.isOpen())
      this.close();
    else
      this.open();
  };
  onMouseOver = () => {
    if (this.closeTimeout) {
      window.clearTimeout(this.closeTimeout);
      this.closeTimeout = void 0;
    }
    if (this.state.open === false) {
      if (!this.props.delay) {
        this.open();
      } else {
        this.openTimeout = window.setTimeout(() => {
          this.open();
        }, this.props.delay);
      }
    }
  };
  onMouseOut = () => {
    if (this.openTimeout) {
      window.clearTimeout(this.openTimeout);
      this.openTimeout = void 0;
    }
    if (this.state.open) {
      if (!this.props.delay) {
        this.close();
      } else {
        this.closeTimeout = window.setTimeout(() => {
          this.close();
        }, this.props.delay);
      }
    }
  };
  isControlled = () => {
    return "open" in this.props;
  };
  open = () => {
    if (this.props.open && this.state.open)
      return;
    if (this.isControlled()) {
      if (this.props.open === false) {
        if (this.props.onOpen)
          return this.props.onOpen();
        return;
      }
    }
    this.attachDomNode();
    this.updatePopperOptions();
    this.openTimeout = void 0;
    this.setState({ open: true });
    if (!this.isControlled()) {
      if (this.props.onOpen)
        return this.props.onOpen();
    }
  };
  close = () => {
    if (this.isControlled()) {
      if (this.props.open === true) {
        if (this.props.onOpen)
          return this.props.onOpen();
        return;
      }
    }
    this.updatePopperOptions();
    this.setState({ open: false, closing: true });
    if (!this.isControlled()) {
      if (this.props.onClose)
        this.props.onClose();
    }
  };
  isOpen() {
    return this.props.open ?? this.state.open;
  }
  getContent() {
    return !this.isDomNodeAttached ? null : typeof this.props.content === "function" ? this.props.content() : this.props.content;
  }
  getEventListeners() {
    const { method } = this.props;
    return method === "mouseover" ? { onMouseOver: this.onMouseOver, onMouseOut: this.onMouseOut } : method === "click" ? { onClick: this.onClick } : {};
  }
  render() {
    const { method, arrow, children, className } = this.props;
    const { actualPlacement, styles, closing } = this.state;
    const open = this.isOpen();
    const trigger = children;
    if (this.props.open && !this.state.open)
      setTimeout(this.open, 0);
    if (open !== this.isEventListening)
      this.updatePopperOptions();
    const triggerProps = trigger ? typeof trigger === "object" && trigger !== null ? "props" in trigger ? trigger.props : {} : {} : {};
    const eventListeners = this.getEventListeners();
    const props = {
      ...triggerProps,
      ...eventListeners,
      className: cx(triggerProps.className, open ? "with-popover" : void 0, open ? `popover-${actualPlacement}` : void 0),
      ref: (node) => {
        if (node)
          this.triggerRef.current = findDOMNode(node);
        if (typeof trigger === "object" && trigger && "ref" in trigger && typeof trigger["ref"] === "function")
          trigger.ref(node);
      }
    };
    const arrowPlacement = getInversePlacement(actualPlacement ?? "top");
    const popoverEventListeners = method === "mouseover" ? eventListeners : void 0;
    const popoverClassName = cx("Popover popover", className, actualPlacement, arrow ? `arrow-${arrowPlacement}` : void 0, { open, arrow, closing });
    return /* @__PURE__ */ React.createElement(React.Fragment, null, typeof trigger === "object" && trigger !== null && !Array.isArray(trigger) && React.cloneElement(trigger, props), createPortal(/* @__PURE__ */ React.createElement("div", {
      ref: this.onRefPopover,
      className: popoverClassName,
      onTransitionEnd: this.onTransitionEnd,
      ...popoverEventListeners
    }, /* @__PURE__ */ React.createElement("div", {
      className: "Popover__wrapper"
    }, arrow && /* @__PURE__ */ React.createElement("div", {
      className: cx("Popover__arrow", arrowPlacement),
      ref: this.arrowRef
    }), /* @__PURE__ */ React.createElement("div", {
      className: "Popover__container",
      style: styles
    }, /* @__PURE__ */ React.createElement("div", {
      className: "Popover__content"
    }, this.getContent())))), this.domNode));
  }
}

const Autocomplete = React.forwardRef(({
  className,
  options = [],
  value: valueProp,
  defaultValue = "",
  enableFilter = true,
  onSearch,
  onChange: onChangeProp,
  ...rest
}, refProp) => {
  const input = useRef(null);
  const [value, setValue] = useControlled(valueProp, defaultValue, onChangeProp);
  const [isFocused, setIsFocused] = useState(false);
  const open = isFocused && options.length > 0;
  const lowerCaseValue = value?.toString().toLowerCase();
  const filteredOptions = enableFilter === false ? options : options.filter((o) => lowerCaseValue && o.value.toString().toLowerCase().includes(lowerCaseValue));
  const onFocus = () => setIsFocused(true);
  const onBlur = (ev) => {
    const newValue = ev?.relatedTarget?.getAttribute("data-value");
    if (newValue) {
      setValue(newValue);
    }
    setIsFocused(false);
  };
  const elementClassName = cx("Autocomplete", className);
  const select = (option) => {
    setValue(option.value);
    if (input.current)
      input.current.querySelector("input")?.blur();
  };
  const onChange = (newValue) => {
    setValue(newValue);
    if (onSearch)
      onSearch(newValue);
  };
  const onAccept = () => {
    if (filteredOptions.length > 0) {
      const opt = filteredOptions[0];
      if (opt)
        select(opt);
    }
  };
  const content = /* @__PURE__ */ React.createElement(Expander, {
    open,
    fitContent: true
  }, /* @__PURE__ */ React.createElement(List, {
    border: false,
    separators: false
  }, filteredOptions.map((o) => /* @__PURE__ */ React.createElement(ListItem, {
    key: o.value,
    activatable: true,
    onClick: () => select(o),
    "data-value": o.value
  }, o.label || o.value)), filteredOptions.length === 0 && /* @__PURE__ */ React.createElement(ListItem, {
    key: "empty"
  }, /* @__PURE__ */ React.createElement(Box, {
    justify: "center"
  }, /* @__PURE__ */ React.createElement(Label, {
    muted: true,
    italic: true
  }, "(No results found)")))));
  return /* @__PURE__ */ React.createElement(Popover, {
    className: "Autocomplete__popover",
    open,
    content,
    arrow: false,
    placement: "bottom-start",
    width: "trigger-min",
    shouldAttachEarly: true
  }, /* @__PURE__ */ React.createElement(Input, {
    className: elementClassName,
    value: value ? value.toString() : void 0,
    onBlur,
    onFocus,
    onChange,
    onAccept,
    ...rest,
    ref: (ref) => {
      input.current = ref;
      if (refProp) {
        if (typeof refProp === "function")
          refProp(ref);
        else
          refProp.current = ref;
      }
    }
  }));
});

const InputGroup = React.forwardRef(function Group({ children, className }, ref) {
  return /* @__PURE__ */ React.createElement("div", {
    className: cx("InputGroup linked", className),
    ref
  }, children);
});

const weekDayLetters = ["S", "M", "T", "W", "T", "F", "S"];
const months = [
  [0, 1, 2],
  [3, 4, 5],
  [6, 7, 8],
  [9, 10, 11]
];
const yearButtons = Array(3).fill(0).map((_, n) => n);
class Calendar extends React.Component {
  state = {
    mode: "day" /* DAY */,
    value: new Date(),
    current: startOfMonth(new Date())
  };
  setMode(mode) {
    this.setState({ mode });
  }
  setCurrent(current) {
    this.setState({ current });
  }
  setMonth = (month) => {
    const current = new Date(this.state.current);
    current.setMonth(month);
    this.setCurrent(current);
    this.setMode("day" /* DAY */);
  };
  setYear = (year) => {
    this.changeYear(year);
    this.setMode("day" /* DAY */);
  };
  changeYear = (year) => {
    const current = new Date(this.state.current);
    current.setFullYear(year);
    this.setCurrent(current);
  };
  onPrevious = () => {
    this.setCurrent(addMonths(this.state.current, -1));
  };
  onNext = () => {
    this.setCurrent(addMonths(this.state.current, 1));
  };
  select = (item) => {
    const value = toDate(item);
    if (this.props.onChange)
      this.props.onChange(value);
    else
      this.setState({ value });
  };
  getValue() {
    return this.props.value ?? this.state.value;
  }
  renderDays() {
    const today = new Date();
    const value = this.getValue();
    const current = this.state.current;
    const weeks = getWeeks(current);
    return /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tbody", null, /* @__PURE__ */ React.createElement("tr", {
      className: "Calendar__weekDays"
    }, weekDayLetters.map((letter, j) => /* @__PURE__ */ React.createElement("td", {
      key: j,
      className: "Calendar__day"
    }, letter))), weeks.map((week, i) => /* @__PURE__ */ React.createElement("tr", {
      key: i,
      className: "Calendar__week"
    }, week.map((item, j) => /* @__PURE__ */ React.createElement("td", {
      key: j,
      className: cx("Calendar__day", `day-${j}`, {
        selected: isEqual(item, value),
        today: isEqual(item, today),
        "other-month": !isEqualMonth(item, current)
      })
    }, item !== void 0 && /* @__PURE__ */ React.createElement(Button, {
      flat: true,
      circular: true,
      onClick: () => this.select(item)
    }, item.date)))))));
  }
  renderMonths() {
    return /* @__PURE__ */ React.createElement("table", null, /* @__PURE__ */ React.createElement("tbody", null, months.map((row, i) => /* @__PURE__ */ React.createElement("tr", {
      key: i
    }, row.map((month) => /* @__PURE__ */ React.createElement("td", {
      key: month,
      className: "Calendar__month"
    }, /* @__PURE__ */ React.createElement(Button, {
      flat: true,
      onClick: () => this.setMonth(month)
    }, format(new Date(2e3, month, 15), "MMMM"))))))));
  }
  renderYears() {
    const { current } = this.state;
    const year = current.getFullYear();
    return /* @__PURE__ */ React.createElement(Box, {
      fill: true,
      align: true,
      justify: true
    }, /* @__PURE__ */ React.createElement(YearPicker, {
      value: year,
      onChange: this.changeYear,
      onAccept: this.setYear
    }));
  }
  render() {
    const { current, mode } = this.state;
    return /* @__PURE__ */ React.createElement(Box, {
      className: cx("Calendar", `mode-${mode}`),
      vertical: true,
      compact: true
    }, /* @__PURE__ */ React.createElement(Box, {
      className: "Calendar__header",
      horizontal: true,
      compact: true
    }, /* @__PURE__ */ React.createElement(Button, {
      flat: true,
      icon: go_previous_symbolic_default,
      onClick: this.onPrevious,
      className: "Calendar__previous"
    }), /* @__PURE__ */ React.createElement(Button, {
      flat: true,
      className: "Calendar__monthLabel",
      onClick: () => this.setMode(mode !== "month" /* MONTH */ ? "month" /* MONTH */ : "day" /* DAY */)
    }, mode !== "month" /* MONTH */ ? format(current, "MMMM") : /* @__PURE__ */ React.createElement(Label, {
      info: true
    }, "Go Back")), /* @__PURE__ */ React.createElement(Button, {
      flat: true,
      className: "Calendar__yearLabel",
      onClick: () => this.setMode(mode !== "year" /* YEAR */ ? "year" /* YEAR */ : "day" /* DAY */)
    }, mode !== "year" /* YEAR */ ? format(current, "yyyy") : /* @__PURE__ */ React.createElement(Label, {
      info: true
    }, "Go Back")), /* @__PURE__ */ React.createElement(Button, {
      flat: true,
      icon: go_next_symbolic_default,
      onClick: this.onNext,
      className: "Calendar__next"
    })), /* @__PURE__ */ React.createElement("div", {
      className: "Calendar__grid"
    }, mode === "day" /* DAY */ ? this.renderDays() : mode === "month" /* MONTH */ ? this.renderMonths() : mode === "year" /* YEAR */ ? this.renderYears() : null));
  }
}
function YearPicker({ value, onChange, onAccept }) {
  const [ticks, setTicks] = useState(0);
  const onWheel = (ev) => {
    ev.preventDefault();
    const direction = ev.deltaY < 0 ? -1 : ev.deltaY > 0 ? 1 : 0;
    const newTicks = ticks + direction;
    if (Math.abs(newTicks) > 5) {
      onChange(value + direction);
      setTicks(0);
    } else {
      setTicks(newTicks);
    }
  };
  const onSubmit = (ev) => {
    ev.preventDefault();
    onAccept(value);
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: "YearPicker",
    onWheel
  }, yearButtons.map((diff, i) => /* @__PURE__ */ React.createElement("div", {
    key: value - (yearButtons.length - diff),
    className: "YearPicker__year"
  }, /* @__PURE__ */ React.createElement(Button, {
    flat: true,
    onClick: () => onAccept(value - (yearButtons.length - diff))
  }, value - (yearButtons.length - diff)))), /* @__PURE__ */ React.createElement("form", {
    className: "YearPicker__input",
    onSubmit
  }, /* @__PURE__ */ React.createElement(Box, {
    horizontal: true
  }, /* @__PURE__ */ React.createElement(InputGroup, null, /* @__PURE__ */ React.createElement(Button, {
    flat: true,
    size: "huge",
    icon: go_previous_symbolic_default,
    onClick: () => onChange(value - 1)
  }), /* @__PURE__ */ React.createElement(Input, {
    flat: true,
    size: "huge",
    type: "number",
    value: value.toString(),
    onChange: (v) => onChange(Number(v.replace(/[^0-9.,]/g, "") ?? 0))
  }), /* @__PURE__ */ React.createElement(Button, {
    flat: true,
    size: "huge",
    icon: go_next_symbolic_default,
    onClick: () => onChange(value + 1)
  })))), yearButtons.map((diff) => /* @__PURE__ */ React.createElement("div", {
    key: value + 1 + diff,
    className: "YearPicker__year"
  }, /* @__PURE__ */ React.createElement(Button, {
    flat: true,
    onClick: () => onAccept(value + 1 + diff)
  }, value + 1 + diff))));
}
function isEqual(item, value) {
  return value.getFullYear() === item.year && value.getMonth() === item.month && value.getDate() === item.date;
}
function isEqualMonth(item, value) {
  return value.getFullYear() === item.year && value.getMonth() === item.month;
}
function toDate(item) {
  return new Date(item.year, item.month, item.date);
}
function getWeeks(current) {
  const year = current.getFullYear();
  const month = current.getMonth();
  const firstDay = startOfMonth(current);
  const lastDay = endOfMonth(current);
  const firstDate = firstDay.getDay();
  const lastDate = lastDay.getDate();
  const weeks = [Array(7).fill(void 0)];
  let currentWeek = weeks[0];
  let currentDate = firstDate;
  for (let i = 1; i <= lastDate; i++) {
    if (currentDate === 7) {
      currentDate = 0;
      currentWeek = Array(7).fill(void 0);
      weeks.push(currentWeek);
    }
    currentWeek[currentDate] = { year, month, date: i };
    currentDate++;
  }
  if (firstDay.getDay() !== 0) {
    const previousMonth = addMonths(current, -1);
    const currentWeek2 = weeks[0];
    const firstDayOfWeek = addDays(firstDay, -firstDay.getDay());
    const firstDayOfWeekDate = firstDayOfWeek.getDate();
    for (let i = 0; i < firstDay.getDay(); i++) {
      currentWeek2[i] = {
        year: previousMonth.getFullYear(),
        month: previousMonth.getMonth(),
        date: firstDayOfWeekDate + i
      };
    }
  }
  if (lastDay.getDay() !== 6) {
    const nextMonth = addMonths(current, 1);
    const currentWeek2 = weeks[weeks.length - 1];
    let currentDate2 = 1;
    for (let i = lastDay.getDay() + 1; i <= 6; i++) {
      currentWeek2[i] = {
        year: nextMonth.getFullYear(),
        month: nextMonth.getMonth(),
        date: currentDate2++
      };
    }
  }
  if (weeks.length <= 5) {
    const nextMonth = addMonths(current, 1);
    const lastDayOfCalendar = weeks[weeks.length - 1][6];
    const currentWeek2 = [];
    weeks.push(currentWeek2);
    const lastDayOfWeekDate = lastDayOfCalendar.month === nextMonth.getMonth() ? lastDayOfCalendar.date : 1;
    for (let i = 0; i <= 6; i++) {
      currentWeek2[i] = {
        year: nextMonth.getFullYear(),
        month: nextMonth.getMonth(),
        date: lastDayOfWeekDate + i
      };
    }
  }
  return weeks;
}

const noop$2 = () => {
};
let nextId = 1;
class Checkbox extends React.Component {
  static defaultProps = {
    showLabel: true,
    size: "medium",
    onChange: noop$2
  };
  id;
  constructor(props) {
    super(props);
    this.id = `checkbox_${nextId++}`;
  }
  onChange = (ev) => {
    if (this.props.onChange) {
      this.props.onChange(ev.target.checked, ev);
    }
  };
  render() {
    const {
      id,
      label,
      showLabel,
      children,
      className,
      size,
      value,
      defaultValue,
      disabled,
      onChange,
      ...rest
    } = this.props;
    return /* @__PURE__ */ React.createElement("div", {
      className: cx("Checkbox", className, size, { disabled })
    }, /* @__PURE__ */ React.createElement("input", {
      type: "checkbox",
      id: id || this.id,
      checked: value,
      defaultChecked: defaultValue,
      disabled,
      onChange: this.onChange
    }), /* @__PURE__ */ React.createElement("label", {
      htmlFor: id || this.id,
      ...rest
    }, /* @__PURE__ */ React.createElement("span", {
      className: "element"
    }), /* @__PURE__ */ React.createElement("span", {
      className: cx("label__text", { "sr-only": !showLabel })
    }, label)));
  }
}

function DatePicker({
  format: formatString = "d MMM yyyy",
  value: valueProp,
  defaultValue,
  onChange,
  ...rest
}) {
  const calendarRef = useRef(null);
  const [open, setOpen] = useState(false);
  const [value, setValue] = useControlled(valueProp, defaultValue, onChange);
  const [inputValue, setInputValue] = useState(value ? format(value, formatString) : "");
  const onInputChange = (newValue) => {
    setInputValue(newValue);
  };
  const onCalendarChange = (date) => {
    setValue(date);
    setInputValue(format(date, formatString));
    setOpen(false);
  };
  const onBlur = (ev) => {
    const calendar = findDOMNode(calendarRef.current);
    if (calendar && calendar.contains(ev.relatedTarget))
      return;
    const newValue = inputValue === "" ? null : parse(inputValue, formatString, new Date());
    const isNewValue = (newValue === null || !Number.isNaN(+newValue)) && (!value || !newValue || !isEqual$1(value, newValue));
    if (isNewValue) {
      setValue(newValue);
      setInputValue(newValue ? format(newValue, formatString) : "");
    } else if (value) {
      setInputValue(format(value, formatString));
    }
    setOpen(false);
  };
  const popover = /* @__PURE__ */ React.createElement(Calendar, {
    onChange: onCalendarChange,
    ref: calendarRef
  });
  return /* @__PURE__ */ React.createElement(Popover, {
    open,
    content: popover,
    className: "DatePicker__popover"
  }, /* @__PURE__ */ React.createElement(Input, {
    className: "DatePicker__input",
    iconAfter: x_office_calendar_symbolic_default,
    placeholder: "Pick a date",
    value: inputValue,
    onChange: onInputChange,
    onFocus: () => setOpen(true),
    onBlur,
    ...rest
  }));
}

function Menu({ children, className, icons, ...rest }) {
  return /* @__PURE__ */ React.createElement("div", {
    className: cx("Menu", className, { icons }),
    ...rest
  }, children);
}

function MenuButton({
  children,
  className,
  radio,
  checkbox,
  accelerator,
  icon: IconElement,
  menu,
  ...rest
}) {
  return /* @__PURE__ */ React.createElement("button", {
    className: cx("ModelButton Menu__button", className),
    ...rest
  }, checkbox !== void 0 && /* @__PURE__ */ React.createElement(emblem_ok_symbolic_default, {
    containerProps: { className: "Menu__icon" }
  }), radio && /* @__PURE__ */ React.createElement(radio_symbolic_default, {
    containerProps: { className: "Menu__icon" }
  }), /* @__PURE__ */ React.createElement("span", {
    className: "Label Menu__button__text"
  }, children), accelerator && /* @__PURE__ */ React.createElement("span", {
    className: "Label Menu__button__accelerator"
  }, accelerator), IconElement && /* @__PURE__ */ React.createElement(IconElement, {
    containerProps: { className: "Menu__iconAfter" }
  }), menu && /* @__PURE__ */ React.createElement(go_next_symbolic_default, {
    containerProps: { className: "Menu__iconAfter submenu" }
  }));
}

function MenuItem({ children, className, ...rest }) {
  return /* @__PURE__ */ React.createElement(Box, {
    horizontal: true,
    className: cx("Menu__item", className),
    ...rest
  }, children);
}

class Dropdown extends React.Component {
  static defaultProps = {
    size: "medium",
    align: "right",
    disabled: false,
    options: []
  };
  static getDerivedStateFromProps(props) {
    if ("open" in props)
      return { open: props.open };
    return null;
  }
  domNode;
  trigger;
  lastValue;
  lastOption;
  lastOptions;
  lastRenderedOptions;
  lastRenderedOptionsArgs;
  state;
  constructor(props) {
    super(props);
    this.domNode = document.createElement("div");
    document.body.append(this.domNode);
    this.lastRenderedOptions = [];
    this.lastRenderedOptionsArgs = [];
    this.state = {
      value: void 0,
      selectedOption: void 0,
      open: false,
      position: { top: 0, left: 0 },
      inputValue: "",
      previousInputValue: ""
    };
  }
  componentWillUnmount() {
    document.body.removeChild(this.domNode);
  }
  onInputBlur = () => {
    setTimeout(this.close, 200);
  };
  onInputChange = (inputValue) => {
    this.setState({ inputValue });
  };
  onInputAccept = () => {
    const options = this.getRenderedOptions();
    if (options.length === 0)
      return;
    const option = options[0];
    this.select(option);
    if (this.trigger) {
      this.trigger.querySelector("input")?.blur();
    }
  };
  onToggle = () => {
    if (this.state.open)
      this.close();
    else
      this.open();
  };
  open = () => {
    if (this.props.onOpen)
      this.props.onOpen();
    else
      this.setState({ open: true });
  };
  close = () => {
    if (this.props.onClose)
      this.props.onClose();
    else
      this.setState({ open: false });
    if (this.props.input && this.state.inputValue) {
      this.setState({ inputValue: "", previousInputValue: this.state.inputValue });
    }
  };
  isOpen = () => {
    return "open" in this.props ? this.props.open : this.state.open;
  };
  isControlled = () => {
    return "value" in this.props;
  };
  select = (option) => {
    if (this.isControlled()) {
      if (this.props.onChange)
        this.props.onChange(option ? option.value : void 0);
    } else {
      this.setState({ value: option?.value, selectedOption: option });
    }
    this.close();
  };
  getValue() {
    if (this.isControlled())
      return this.props.value;
    return this.state.value;
  }
  getRenderedOptions() {
    const { options: optionsProp, filterKey, filter } = this.props;
    const open = this.isOpen();
    const { inputValue, previousInputValue } = this.state;
    const value = open ? inputValue : previousInputValue;
    const args = [optionsProp, value, filterKey, filter];
    if (args.every((a, i) => this.lastRenderedOptionsArgs[i] === a)) {
      return this.lastRenderedOptions ?? [];
    }
    let options;
    if (!value) {
      options = optionsProp;
    } else {
      const needle = value.toLowerCase();
      options = optionsProp?.filter((o) => {
        const optionValue = filterKey ? o.data[filterKey] : filter ? filter(o) : typeof o.label === "string" ? o.label : o.value;
        return String(optionValue).toLowerCase().includes(needle);
      }) ?? [];
    }
    this.lastRenderedOptionsArgs = args;
    this.lastRenderedOptions = options;
    return options ?? [];
  }
  getSelectedOption() {
    const value = this.getValue();
    if (value === this.lastValue && this.props.options === this.lastOptions)
      return this.lastOption;
    const option = this.props.options.find((o) => o.value === value);
    if (option) {
      this.lastValue = value;
      this.lastOption = option;
      this.lastOptions = this.props.options;
      return option;
    }
    return void 0;
  }
  render() {
    const {
      className,
      triggerClassName,
      size,
      align,
      placeholder,
      label: labelValue,
      value: _value,
      options: _options,
      disabled,
      loading,
      open: _open,
      allowClear,
      input,
      filterKey,
      filter,
      onClose,
      onOpen,
      onChange: _onChange,
      ...rest
    } = this.props;
    const open = this.isOpen();
    const value = this.getValue();
    const label = labelValue || this.getSelectedOption()?.label || placeholder || value;
    let trigger;
    if (!input) {
      const buttonClassName = cx("Dropdown Box horizontal", className, size, {
        open,
        hover: open
      });
      trigger = /* @__PURE__ */ React.createElement(Button, {
        size,
        className: buttonClassName,
        loading,
        disabled,
        onClick: this.onToggle,
        ref: (ref) => ref && (this.trigger = ref),
        ...rest
      }, /* @__PURE__ */ React.createElement(Label, {
        align: "left",
        className: "Box__fill"
      }, label), /* @__PURE__ */ React.createElement(pan_down_symbolic_default, {
        containerProps: { className: "Dropdown__arrow" }
      }));
    } else {
      const { inputValue } = this.state;
      const inputClassName = cx("Dropdown", className, size, {
        open,
        hover: open
      });
      trigger = /* @__PURE__ */ React.createElement(Input, {
        className: inputClassName,
        loading,
        disabled,
        value: inputValue,
        onFocus: this.open,
        onBlur: this.onInputBlur,
        onChange: this.onInputChange,
        onAccept: this.onInputAccept,
        iconAfter: pan_down_symbolic_default,
        ref: (ref) => ref && (this.trigger = ref),
        ...rest
      }, wrapLabel(label));
    }
    const options = this.getRenderedOptions();
    const actualChildren = options.map((o) => /* @__PURE__ */ React.createElement(MenuButton, {
      key: o.value.toString(),
      selected: String(o.value) === String(value),
      onClick: () => this.select(o)
    }, o.label));
    if (actualChildren.length === 0)
      actualChildren.push(/* @__PURE__ */ React.createElement(MenuItem, {
        key: "empty_item"
      }, /* @__PURE__ */ React.createElement(Label, {
        muted: true,
        italic: true
      }, "No option found")));
    if (allowClear) {
      actualChildren.unshift(/* @__PURE__ */ React.createElement(MenuButton, {
        key: "null_item",
        onClick: () => this.select(null)
      }, /* @__PURE__ */ React.createElement(Label, {
        muted: true,
        italic: true
      }, "None")));
    }
    const popoverClassName = cx("Dropdown__menu", size);
    const menu = /* @__PURE__ */ React.createElement(Menu, {
      className: popoverClassName
    }, actualChildren);
    return /* @__PURE__ */ React.createElement(Popover, {
      className: "Dropdown__menu",
      method: "click-controlled",
      width: "trigger",
      arrow: false,
      open,
      content: menu,
      onClose: this.close,
      shouldUpdatePlacement: open
    }, trigger);
  }
}
function wrapLabel(label) {
  if (typeof label !== "string")
    return label;
  return /* @__PURE__ */ React.createElement(Label, {
    align: "left",
    fill: "width",
    ellipsis: true
  }, label);
}

function Frame({
  children,
  className,
  inline,
  background,
  scrollable,
  border = true,
  label,
  padded,
  ...rest
}) {
  const Component = label ? "fieldset" : "div";
  return /* @__PURE__ */ React.createElement(Component, {
    className: cx("Frame", className, background ? `background-${background}` : void 0, {
      inline,
      padded,
      scrollable,
      "no-border": !border
    }),
    role: Component === "fieldset" ? "presentation" : void 0,
    ...rest
  }, label && /* @__PURE__ */ React.createElement("legend", null, label), children);
}

function HeaderBar({
  className,
  children,
  titlebar,
  ...rest
}) {
  return /* @__PURE__ */ React.createElement("div", {
    className: cx("HeaderBar", className, { titlebar }),
    ...rest
  }, /* @__PURE__ */ React.createElement(Box, {
    horizontal: true,
    align: true,
    fill: true
  }, children));
}

function HeaderBarControls({
  children,
  className,
  ...rest
}) {
  return /* @__PURE__ */ React.createElement(Box, {
    ...rest,
    horizontal: true,
    align: true,
    className: cx("HeaderBar__controls", "control-buttons", className)
  }, children);
}

function HeaderBarTitle({
  children,
  subtitle,
  className,
  fill
}) {
  return /* @__PURE__ */ React.createElement(Box, {
    vertical: true,
    fill: true,
    align: true,
    justify: true,
    className: cx("HeaderBar__title", className, { Box__fill: fill })
  }, /* @__PURE__ */ React.createElement("div", {
    className: "title"
  }, children), subtitle && /* @__PURE__ */ React.createElement("div", {
    className: "subtitle"
  }, subtitle));
}

function Heading({
  as = "h1",
  children,
  className,
  weight,
  anchor = true,
  ...rest
}) {
  const Component = as;
  const id = anchor ? toID(onlyText(children)) : void 0;
  return /* @__PURE__ */ React.createElement(Component, {
    id,
    className: cx("Heading", className, weight ? `weight-${weight}` : void 0),
    ...rest
  }, anchor && /* @__PURE__ */ React.createElement("a", {
    className: "Heading__anchor link",
    href: `#${id}`
  }, "#"), children);
}
function toID(string) {
  return string.toLowerCase().replace(/\W+/g, "-");
}

function InfoBar({
  className,
  children,
  closable,
  activatable: activatableValue,
  info,
  success,
  warning,
  danger,
  close: closeValue,
  onClose,
  ...rest
}) {
  const [closeState, setClose] = useState(false);
  const close = closeValue ?? closeState;
  const activatable = activatableValue ?? Boolean(rest.onClick);
  return /* @__PURE__ */ React.createElement("div", {
    className: cx("InfoBar", className, {
      activatable,
      info,
      success,
      warning,
      danger,
      close
    }),
    role: activatable ? "button" : void 0,
    onTransitionEnd: onClose,
    ...rest
  }, /* @__PURE__ */ React.createElement(Box, {
    horizontal: true,
    align: true,
    fill: true
  }, /* @__PURE__ */ React.createElement("span", {
    className: "Box__fill"
  }, children), closable && /* @__PURE__ */ React.createElement(Button, {
    icon: window_close_symbolic_default,
    onClick: () => setClose(true)
  })));
}

const noop$3 = () => {
};
const asNumber = (value) => {
  if (value === "")
    return 0;
  return Number(value);
};
function InputNumber({
  className,
  size = "medium",
  vertical,
  disabled,
  value: valueProp,
  defaultValue,
  onChange = noop$3,
  ...rest
}) {
  const [valueState, setValueState] = useState(defaultValue ?? "");
  const value = valueProp ?? valueState;
  const step = rest.step ?? 1;
  const min = rest.min ?? -Infinity;
  const max = rest.max ?? Infinity;
  const setValue = valueProp !== void 0 ? onChange ?? setValueState : setValueState;
  const onInputChange = (ev) => {
    setValue(Number(ev.target.value));
  };
  const onUp = () => setValue(asNumber(value) + step);
  const onDown = () => setValue(asNumber(value) - step);
  const downDisabled = disabled || asNumber(value) - step < min;
  const upDisabled = disabled || asNumber(value) + step > max;
  const buttonClassNames = vertical ? "Button image-button" : void 0;
  return /* @__PURE__ */ React.createElement("div", {
    className: cx("InputNumber", className, size, { disabled, vertical })
  }, /* @__PURE__ */ React.createElement("div", {
    className: "Input__area"
  }, /* @__PURE__ */ React.createElement("input", {
    type: "number",
    disabled,
    value,
    onChange: onInputChange,
    ...rest
  })), /* @__PURE__ */ React.createElement("button", {
    tabIndex: -1,
    className: cx("InputNumber__button down", buttonClassNames),
    disabled: downDisabled,
    onClick: onDown
  }, /* @__PURE__ */ React.createElement(list_remove_symbolic_default, null)), /* @__PURE__ */ React.createElement("button", {
    tabIndex: -1,
    className: cx("InputNumber__button up", buttonClassNames),
    disabled: upDisabled,
    onClick: onUp
  }, /* @__PURE__ */ React.createElement(list_add_symbolic_default, null)));
}

const LevelBar = React.forwardRef(function LevelBar2(props, ref) {
  const {
    className,
    value = 0,
    segments = 5,
    vertical,
    level: levelValue,
    ...rest
  } = props;
  const percentage = value / (segments - 1);
  const level = percentage < 0.1 ? "danger" : percentage < 0.5 ? "warning" : percentage < 0.9 ? "info" : "success";
  return /* @__PURE__ */ React.createElement("span", {
    className: cx("LevelBar", className, { vertical }),
    ...rest,
    ref
  }, /* @__PURE__ */ React.createElement("span", {
    className: "LevelBar__content"
  }, range(0, segments).map((n) => /* @__PURE__ */ React.createElement("span", {
    key: n,
    className: cx("LevelBar__rail", value < n ? "empty" : levelValue || level)
  }))));
});

function MenuBackButton({
  children,
  className,
  ...rest
}) {
  return /* @__PURE__ */ React.createElement("button", {
    className: cx("ModelButton Menu__button Menu__back", className),
    ...rest
  }, /* @__PURE__ */ React.createElement(go_previous_symbolic_default, {
    containerProps: { className: "Menu__icon submenu" }
  }), /* @__PURE__ */ React.createElement("span", {
    className: "Label Menu__button__text"
  }, children));
}

function MenuBar({ children, className, ...rest }) {
  return /* @__PURE__ */ React.createElement("div", {
    className: cx("MenuBar", className),
    ...rest
  }, children);
}
function Button$1({ label, children, className, ...rest }) {
  const [open, setOpen] = useState(false);
  return /* @__PURE__ */ React.createElement(Popover, {
    method: "click-controlled",
    className: "MenuBar__popover",
    placement: "bottom-start",
    arrow: false,
    delay: 50,
    content: children || /* @__PURE__ */ React.createElement(EmptyMenu, null),
    open,
    onClose: () => setOpen(false)
  }, /* @__PURE__ */ React.createElement("button", {
    className: cx("MenuBar__button", className, { active: open }) + (open ? " active" : ""),
    onClick: () => setOpen(!open),
    ...rest
  }, label));
}
MenuBar.Button = Button$1;
function EmptyMenu() {
  return /* @__PURE__ */ React.createElement(Menu, null, /* @__PURE__ */ React.createElement(MenuItem, null, /* @__PURE__ */ React.createElement(Label, {
    muted: true,
    italic: true,
    noSelect: true
  }, "(Empty menu)")));
}

function MenuCircularButton({
  children,
  className,
  ...rest
}) {
  return /* @__PURE__ */ React.createElement(Box, {
    horizontal: true,
    className: cx("circular-buttons", className),
    space: "around",
    ...rest
  }, children);
}

function MenuInlineButton({
  children,
  className,
  label,
  ...rest
}) {
  return /* @__PURE__ */ React.createElement(Box, {
    horizontal: true,
    className: cx("Menu__item inline-buttons", className),
    align: true,
    ...rest
  }, /* @__PURE__ */ React.createElement(Label, {
    className: "Box__fill"
  }, label), /* @__PURE__ */ React.createElement(Box, {
    horizontal: true,
    compact: true
  }, children));
}

function MenuTitle({ children, className, ...rest }) {
  return /* @__PURE__ */ React.createElement(Label, {
    className: cx("Menu__item title", className),
    ...rest
  }, children);
}

class PageSwitcher extends React.Component {
  static defaultProps = {
    transition: "horizontal",
    expand: false,
    useMainPageDimensions: false
  };
  activePage;
  mustSetIsSwitching;
  state;
  constructor(props) {
    super(props);
    this.activePage = React.createRef();
    this.state = {
      activePage: props.activePage,
      isSwitching: false,
      width: void 0,
      height: void 0
    };
  }
  getPagesToRender() {
    const { activePage: activePageProp, transition } = this.props;
    const { activePage } = this.state;
    if (transition === false)
      return activePageProp !== void 0 ? [activePageProp] : [];
    const pages = Array.from(new Set([activePage, activePageProp].filter((n) => n !== void 0)));
    pages.sort(compare);
    return pages;
  }
  componentDidUpdate() {
    if (this.mustSetIsSwitching) {
      this.mustSetIsSwitching = false;
      requestAnimationFrame(() => {
        this.setState({ isSwitching: true });
      });
    }
  }
  onTransitionEnd = () => {
    this.setState({
      isSwitching: false,
      activePage: this.props.activePage
    });
  };
  onRef = (ref) => {
    this.activePage.current = ref;
    if (!ref)
      return;
    const { activePage, useMainPageDimensions, mainPage } = this.props;
    const isMainPage = activePage === mainPage;
    if (useMainPageDimensions === false && !isMainPage)
      return;
    const { width, height } = this.activePage.current.getBoundingClientRect();
    const state = {};
    if (isMainPage || useMainPageDimensions === true || useMainPageDimensions !== "width")
      state.width = width;
    if (isMainPage || useMainPageDimensions === true || useMainPageDimensions !== "height")
      state.height = height;
    this.setState(state);
  };
  render() {
    const {
      className,
      pages,
      activePage: activePageProp,
      mainPage,
      transition,
      expand,
      padded,
      style,
      useMainPageDimensions,
      ...rest
    } = this.props;
    const { activePage, isSwitching, width, height } = this.state;
    const renderedPages = this.getPagesToRender();
    const activePageValue = isSwitching ? activePageProp : activePage;
    if (activePage !== activePageProp && !isSwitching) {
      this.mustSetIsSwitching = true;
    }
    const containerStyle = !expand ? style : { width, height, ...style };
    return /* @__PURE__ */ React.createElement("div", {
      className: cx("PageSwitcher", className, transition, !useMainPageDimensions ? void 0 : useMainPageDimensions === true ? "use-both" : `use-${useMainPageDimensions}`, { expand }),
      style: containerStyle,
      ...rest
    }, renderedPages.map((n) => /* @__PURE__ */ React.createElement("div", {
      key: pages[n]?.key || n,
      className: cx("PageSwitcher__page", {
        active: n === activePageValue,
        main: n === mainPage,
        padded
      }),
      onTransitionEnd: this.onTransitionEnd,
      ref: expand && n === activePageValue ? this.onRef : void 0
    }, pages[n]?.content)));
  }
}
function compare(a, b) {
  return a - b;
}

const noop$4 = () => {
};
function Notebook({
  className,
  position = "top",
  transition,
  value: activePageValue,
  arrows = false,
  pages,
  action,
  onChange = noop$4,
  onClose = noop$4,
  ...rest
}) {
  const orientation = position === "top" || position === "bottom" ? "horizontal" : "vertical";
  const isHorizontal = orientation === "horizontal";
  const isControlled = activePageValue !== void 0;
  const [activePageState, setActivePage] = useState(0);
  const setPage = isControlled ? onChange : setActivePage;
  let activePage = isControlled ? activePageValue : activePageState;
  if (activePage >= pages.length) {
    activePage = pages.length - 1;
    setPage(activePage);
  }
  const previousPage = () => setPage(activePage - 1);
  const nextPage = () => setPage(activePage + 1);
  return /* @__PURE__ */ React.createElement("div", {
    className: cx("Notebook", className, position),
    ...rest
  }, /* @__PURE__ */ React.createElement("div", {
    className: cx("Notebook__header", position)
  }, /* @__PURE__ */ React.createElement("div", {
    className: "Notebook__tabs"
  }, arrows && /* @__PURE__ */ React.createElement(Button, {
    className: "Notebook__arrow",
    icon: isHorizontal ? pan_start_symbolic_default : pan_up_symbolic_default,
    disabled: activePage === 0,
    onClick: previousPage
  }), pages.map((page, i) => /* @__PURE__ */ React.createElement("div", {
    key: page.key,
    className: cx("Notebook__tab", {
      selected: i === activePage,
      reorderable: true
    }),
    role: "button",
    tabIndex: 0,
    onClick: () => setPage(i)
  }, /* @__PURE__ */ React.createElement(Label, null, page.label), page.closable && /* @__PURE__ */ React.createElement(Button, {
    size: "small",
    icon: window_close_symbolic_default,
    tabIndex: -1,
    onClick: (ev) => (ev.stopPropagation(), onClose(i))
  }))), arrows && /* @__PURE__ */ React.createElement(Button, {
    className: "Notebook__arrow",
    icon: isHorizontal ? pan_end_symbolic_default : pan_down_symbolic_default,
    disabled: activePage >= pages.length - 1,
    onClick: nextPage
  })), action && /* @__PURE__ */ React.createElement("div", {
    className: "Notebook__action"
  }, action)), /* @__PURE__ */ React.createElement("div", {
    className: "Notebook__content"
  }, /* @__PURE__ */ React.createElement(PageSwitcher, {
    pages,
    activePage,
    transition: transition ?? (position === "top" || position === "bottom" ? "horizontal" : "vertical")
  })));
}

function trackFinger(event, touchId) {
  if ("touches" in event) {
    if (touchId.current !== void 0 && event.changedTouches) {
      for (const i in event.changedTouches) {
        const touch = event.changedTouches[i];
        if (touch?.identifier === touchId.current) {
          return {
            x: touch.clientX,
            y: touch.clientY
          };
        }
      }
      return false;
    }
    return {
      x: event.touches[0].clientX,
      y: event.touches[0].clientY
    };
  }
  return {
    x: event.clientX,
    y: event.clientY
  };
}

const properties = {
  horizontal: {
    size: "width",
    position: "left",
    event: "x"
  },
  vertical: {
    size: "height",
    position: "top",
    event: "y"
  }
};
class Paned extends React.Component {
  static defaultProps = {
    orientation: "horizontal",
    border: true
  };
  handle;
  touchId;
  state;
  constructor(props) {
    super(props);
    this.handle = React.createRef();
    this.touchId = void 0;
    this.state = {
      size: props.defaultSize,
      containerSize: void 0
    };
  }
  removeEventListeners = () => {
    document.removeEventListener("mousemove", this.onTouchMove);
    document.removeEventListener("mouseup", this.onTouchEnd);
    document.removeEventListener("touchmove", this.onTouchMove);
    document.removeEventListener("touchend", this.onTouchEnd);
  };
  onTouchMove = (event) => {
    event.preventDefault();
    const { orientation = "horizontal" } = this.props;
    const finger = trackFinger(event, { current: this.touchId });
    if (!finger) {
      this.removeEventListeners();
      return;
    }
    if (this.handle.current) {
      const handle = this.handle.current.getBoundingClientRect();
      const handlePosition = handle[properties[orientation].position];
      const mousePosition = finger[properties[orientation].event];
      const delta = mousePosition - handlePosition;
      this.setState({ size: (this.state.size ?? 0) + delta });
    }
  };
  onTouchEnd = () => {
    this.setState({ dragging: false });
    this.removeEventListeners();
  };
  onTouchStart = (event) => {
    event.preventDefault();
    const touch = event.changedTouches[0];
    this.touchId = touch?.identifier;
    this.setState({ dragging: true });
    document.addEventListener("touchmove", this.onTouchMove);
    document.addEventListener("touchend", this.onTouchEnd);
  };
  onMouseDown = (event) => {
    if (event.button !== 0)
      return;
    event.preventDefault();
    this.setState({ dragging: true });
    document.addEventListener("mousemove", this.onTouchMove);
    document.addEventListener("mouseup", this.onTouchEnd);
  };
  onKeyDown = (ev) => {
    const { containerSize } = this.state;
    let size;
    switch (ev.key) {
      case "ArrowLeft":
      case "ArrowUp":
        size = (this.state.size ?? 0) - 4;
        break;
      case "ArrowRight":
      case "ArrowDown":
        size = (this.state.size ?? 0) + 4;
        break;
      default:
        return;
    }
    if (size < 0)
      size = 0;
    if (containerSize && size > containerSize)
      size = containerSize;
    this.setState({ size });
    ev.preventDefault();
  };
  updateContainerSize(dimensions) {
    const { orientation = "horizontal" } = this.props;
    const containerSize = dimensions[properties[orientation].size];
    if (this.state.size !== void 0 && this.state.containerSize === containerSize)
      return;
    setTimeout(() => {
      this.setState({ containerSize });
      if (this.state.size === void 0)
        this.setState({ size: containerSize / 2 });
    }, 0);
  }
  render() {
    const {
      children,
      className,
      orientation = "horizontal",
      border,
      fill,
      defaultSize,
      ...rest
    } = this.props;
    const { size = 0 } = this.state;
    if (!Array.isArray(children) || children.length < 2)
      throw new Error("Paned: requires 2 children at least");
    return /* @__PURE__ */ React.createElement("div", {
      className: cx("Paned", className, orientation, {
        fill: fill === true,
        "fill-width": fill === "width",
        "fill-height": fill === "height",
        "border-none": border === false,
        "border-handle": border === "handle"
      }),
      ...rest
    }, /* @__PURE__ */ React.createElement(AutoSizer, null, (dimensions) => {
      this.updateContainerSize(dimensions);
      return /* @__PURE__ */ React.createElement("div", {
        className: cx("Paned__wrapper", orientation),
        style: dimensions
      }, /* @__PURE__ */ React.createElement("div", {
        className: "Paned__pane",
        style: firstStyle(orientation, size)
      }, children[0]), /* @__PURE__ */ React.createElement("div", {
        className: "Paned__handle",
        role: "separator",
        "aria-orientation": orientation === "horizontal" ? "vertical" : "horizontal",
        tabIndex: 0,
        onMouseDown: this.onMouseDown,
        onTouchStart: this.onTouchStart,
        onKeyDown: this.onKeyDown,
        ref: this.handle,
        style: handleStyle(orientation, size)
      }), /* @__PURE__ */ React.createElement("div", {
        className: "Paned__pane",
        style: secondStyle(orientation, size, dimensions)
      }, children[1]));
    }));
  }
}
function handleStyle(orientation, size) {
  return {
    [properties[orientation].position]: size - 1
  };
}
function firstStyle(orientation, size) {
  return {
    [properties[orientation].size]: size
  };
}
function secondStyle(orientation, size, dimensions) {
  const totalSize = dimensions[properties[orientation].size];
  if (typeof totalSize !== "number" || typeof size !== "number")
    return void 0;
  const secondSize = totalSize - size;
  return {
    [properties[orientation].size]: secondSize
  };
}

const hasKey = (obj, key) => {
  return obj && key in obj;
};

function PopoverMenu({
  children,
  pages: getPages,
  open: openProp,
  onChangeOpen,
  ...rest
}) {
  const [page, setPage] = useState(0);
  const [isOpen, setOpen] = useControlled(openProp, false, onChangeOpen);
  const controls = {
    close: () => setOpen(false),
    back: () => setPage(0),
    open: () => setOpen(true),
    change: (key) => setPage(pages.findIndex((p) => typeof p === "object" && p !== null && hasKey(p, "key") && p.key === key))
  };
  const pages = getPages(controls);
  const content = /* @__PURE__ */ React.createElement(PageSwitcher, {
    expand: true,
    transition: "horizontal",
    pages,
    activePage: page,
    mainPage: 0,
    useMainPageDimensions: "width"
  });
  return /* @__PURE__ */ React.createElement(Popover, {
    placement: "bottom",
    ...rest,
    open: isOpen,
    content,
    onOpen: controls.open,
    onClose: controls.close,
    onDidClose: controls.back
  }, children);
}

const axisProps = {
  horizontal: (percent) => ({ width: `${percent}%` }),
  "horizontal-reverse": (percent) => ({ width: `${percent}%` }),
  vertical: (percent) => ({ height: `${percent}%` })
};
function Progress(props) {
  const {
    className,
    orientation = "horizontal",
    label = false,
    value,
    ...rest
  } = props;
  let axis = orientation;
  const trackSize = valueToPercent(value, 0, 100);
  const trackStyle = {
    display: trackSize === 0 ? "none" : void 0,
    ...axisProps[axis](trackSize)
  };
  return /* @__PURE__ */ React.createElement("span", {
    className: cx("Progress", {
      vertical: orientation === "vertical",
      indeterminate: typeof value !== "number",
      labeled: label
    }, className),
    ...rest
  }, label && /* @__PURE__ */ React.createElement("span", {
    className: "Progress__label text-muted"
  }, typeof label === "boolean" ? `${value} %` : label), /* @__PURE__ */ React.createElement("span", {
    className: "Progress__content"
  }, /* @__PURE__ */ React.createElement("span", {
    className: "Progress__rail"
  }), /* @__PURE__ */ React.createElement("span", {
    className: "Progress__track",
    style: trackStyle
  })));
}
function valueToPercent(value, min, max) {
  return (value - min) * 100 / (max - min);
}

const noop$5 = () => {
};
let nextId$1 = 1;
class Radio extends React.Component {
  static defaultProps = {
    showLabel: true,
    size: "medium",
    onChange: noop$5
  };
  id;
  constructor(props) {
    super(props);
    this.id = `radio_${nextId$1++}`;
  }
  onChange = (ev) => {
    if (this.props.onChange)
      this.props.onChange(ev.target.checked, ev);
  };
  render() {
    const {
      id,
      name,
      label,
      showLabel,
      className,
      size,
      value,
      checked,
      defaultChecked,
      disabled,
      onChange,
      ...rest
    } = this.props;
    return /* @__PURE__ */ React.createElement("div", {
      className: cx("Radio", className, size, { disabled })
    }, /* @__PURE__ */ React.createElement("input", {
      type: "radio",
      id: id || this.id,
      name,
      value,
      checked,
      defaultChecked,
      disabled,
      onChange: this.onChange
    }), /* @__PURE__ */ React.createElement("label", {
      htmlFor: id || this.id,
      ...rest
    }, /* @__PURE__ */ React.createElement("span", {
      className: "element"
    }), /* @__PURE__ */ React.createElement("span", {
      className: cx("label__text", { "sr-only": !showLabel })
    }, label)));
  }
}

function RadioGroup({
  size,
  compact = false,
  horizontal = true,
  value: valueProp,
  defaultValue,
  onChange,
  name,
  options
}) {
  const isControlled = valueProp !== void 0;
  const [value, setValue] = useControlled(valueProp, defaultValue, onChange);
  return /* @__PURE__ */ React.createElement(Box, {
    horizontal,
    vertical: !horizontal,
    compact
  }, options.map((o) => /* @__PURE__ */ React.createElement(Radio, {
    key: o.value,
    size,
    name,
    value: o.value,
    checked: value === o.value,
    defaultChecked: defaultValue === o.value,
    label: o.label,
    onChange: (checked) => {
      if (checked)
        setValue(o.value);
      if (!isControlled && onChange)
        onChange(o.value);
    }
  })));
}

const getPropAndCastOr = (obj, prop, defaultValue) => {
  if (hasKey(obj, prop)) {
    return obj[prop];
  }
  return defaultValue;
};

function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}

function useForkRef(refA, refB) {
  return useMemo(() => {
    if (!refA && !refB) {
      return null;
    }
    return (refValue) => {
      setRef(refA, refValue);
      setRef(refB, refValue);
    };
  }, [refA, refB]);
}

let hadKeyboardEvent = true;
let hadFocusVisibleRecently = false;
let hadFocusVisibleRecentlyTimeout = null;
const inputTypesWhitelist = {
  text: true,
  search: true,
  url: true,
  tel: true,
  email: true,
  password: true,
  number: true,
  date: true,
  month: true,
  week: true,
  time: true,
  datetime: true,
  "datetime-local": true
};
function focusTriggersKeyboardModality(node) {
  const { type, tagName } = node;
  if (tagName === "INPUT" && type && inputTypesWhitelist[type] && !node.readOnly) {
    return true;
  }
  if (tagName === "TEXTAREA" && !node.readOnly) {
    return true;
  }
  if (node.isContentEditable) {
    return true;
  }
  return false;
}
function handleKeyDown(event) {
  if (event.metaKey || event.altKey || event.ctrlKey) {
    return;
  }
  hadKeyboardEvent = true;
}
function handlePointerDown() {
  hadKeyboardEvent = false;
}
function handleVisibilityChange() {
  if (this.visibilityState === "hidden") {
    if (hadFocusVisibleRecently) {
      hadKeyboardEvent = true;
    }
  }
}
function prepare(doc) {
  doc.addEventListener("keydown", handleKeyDown, true);
  doc.addEventListener("mousedown", handlePointerDown, true);
  doc.addEventListener("pointerdown", handlePointerDown, true);
  doc.addEventListener("touchstart", handlePointerDown, true);
  doc.addEventListener("visibilitychange", handleVisibilityChange, true);
}
function isFocusVisible(event) {
  const { currentTarget } = event;
  try {
    return currentTarget.matches(":focus-visible");
  } catch (error) {
  }
  return hadKeyboardEvent || focusTriggersKeyboardModality(currentTarget);
}
function handleBlurVisible() {
  hadFocusVisibleRecently = true;
  if (hadFocusVisibleRecentlyTimeout) {
    window.clearTimeout(hadFocusVisibleRecentlyTimeout);
  }
  hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
    hadFocusVisibleRecently = false;
  }, 100);
}
function useIsFocusVisible() {
  const ref = useCallback((instance) => {
    const node = findDOMNode(instance);
    if (node != null) {
      prepare(node.ownerDocument);
    }
  }, []);
  {
    useDebugValue(isFocusVisible);
  }
  return { isFocusVisible, onBlurVisible: handleBlurVisible, ref };
}

const axisProps$1 = {
  horizontal: {
    offset: (percent) => ({ left: `${percent}%` }),
    leap: (percent) => ({ width: `${percent}%` })
  },
  "horizontal-reverse": {
    offset: (percent) => ({ right: `${percent}%` }),
    leap: (percent) => ({ width: `${percent}%` })
  },
  vertical: {
    offset: (percent) => ({ bottom: `${percent}%` }),
    leap: (percent) => ({ height: `${percent}%` })
  }
};
const Range = React.forwardRef((props, ref) => {
  const {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-valuetext": ariaValuetext,
    className,
    size = "medium",
    defaultValue = 0,
    disabled = false,
    marks: marksProp = false,
    max = 100,
    min = 0,
    name,
    onChange,
    onChangeCommitted,
    onMouseDown,
    vertical = false,
    scale = identity,
    step = 1,
    ThumbComponent = "span",
    track = "normal",
    value: valueProp,
    valueLabelDisplay = "off",
    valueLabelFormat = identity,
    ...other
  } = props;
  const orientation = vertical ? "vertical" : "horizontal";
  const touchId = React.useRef();
  const [active, setActive] = React.useState(-1);
  const [_, setOpen] = React.useState(-1);
  const [valueDerived, setValueState] = useControlled(valueProp, defaultValue);
  const range = Array.isArray(valueDerived);
  let values = range ? valueDerived.slice().sort(asc) : valueDerived !== void 0 ? [valueDerived] : [];
  values = values.map((value) => clamp(value, min, max));
  const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_2, index) => ({
    value: min + step * index,
    label: void 0
  })) : Array.isArray(marksProp) ? marksProp : [];
  const {
    isFocusVisible,
    onBlurVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [focusVisible, setFocusVisible] = React.useState(-1);
  const sliderRef = React.useRef(null);
  const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
  const handleRef = useForkRef(ref, handleFocusRef);
  const handleFocus = (event) => {
    const index = Number(event.currentTarget.getAttribute("data-index"));
    if (isFocusVisible(event)) {
      setFocusVisible(index);
    }
    setOpen(index);
  };
  const handleBlur = () => {
    if (focusVisible !== -1) {
      setFocusVisible(-1);
      onBlurVisible();
    }
    setOpen(-1);
  };
  const handleMouseOver = (event) => {
    const index = Number(event.currentTarget.getAttribute("data-index"));
    setOpen(index);
  };
  const handleMouseLeave = () => {
    setOpen(-1);
  };
  const handleKeyDown = (event) => {
    const index = Number(event.currentTarget.getAttribute("data-index"));
    const value = values[index];
    if (!value)
      return;
    const tenPercents = (max - min) / 10;
    const marksValues = marks.map((mark) => mark.value);
    const marksIndex = marksValues.indexOf(value);
    let newValue;
    const increaseKey =  "ArrowRight";
    const decreaseKey =  "ArrowLeft";
    switch (event.key) {
      case "Home":
        newValue = min;
        break;
      case "End":
        newValue = max;
        break;
      case "PageUp":
        if (step) {
          newValue = value + tenPercents;
        }
        break;
      case "PageDown":
        if (step) {
          newValue = value - tenPercents;
        }
        break;
      case increaseKey:
      case "ArrowUp":
        if (step) {
          newValue = value + step;
        } else {
          newValue = marksValues[marksIndex + 1] || marksValues[marksValues.length - 1];
        }
        break;
      case decreaseKey:
      case "ArrowDown":
        if (step) {
          newValue = value - step;
        } else {
          newValue = marksValues[marksIndex - 1] || marksValues[0];
        }
        break;
      default:
        return;
    }
    event.preventDefault();
    if (!newValue) {
      throw new Error("newValue is undefined");
    }
    if (step) {
      newValue = roundValueToStep(newValue, step, min);
    }
    newValue = clamp(newValue, min, max);
    let newValues = void 0;
    if (range) {
      const previousValue = newValue;
      newValues = setValueIndex({
        values,
        source: valueDerived,
        newValue,
        index
      }).sort(asc);
      focusThumb({
        sliderRef,
        activeIndex: newValues.indexOf(previousValue),
        setActive() {
        }
      });
    }
    setValueState(newValues ?? newValue);
    setFocusVisible(index);
    if (onChange) {
      onChange(newValues ?? newValue, event);
    }
    if (onChangeCommitted) {
      onChangeCommitted(event, newValues ?? newValue);
    }
  };
  const previousIndex = React.useRef();
  let axis = orientation;
  const getFingerNewValue = ({
    finger,
    move = false,
    values: values2,
    source
  }) => {
    if (!sliderRef.current) {
      throw new Error("sliderRef is null");
    }
    const { current: slider } = sliderRef;
    const { width, height, bottom, left } = slider.getBoundingClientRect();
    let percent;
    if (axis.indexOf("vertical") === 0) {
      percent = (bottom - finger.y) / height;
    } else {
      percent = (finger.x - left) / width;
    }
    if (axis.indexOf("-reverse") !== -1) {
      percent = 1 - percent;
    }
    let newValue = percentToValue(percent, min, max);
    if (step) {
      newValue = roundValueToStep(newValue, step, min);
    } else {
      const marksValues = marks.map((mark) => mark.value);
      const closestIndex = findClosest(marksValues, newValue);
      if (closestIndex) {
        const nv = marksValues[closestIndex];
        if (nv !== void 0)
          newValue = nv;
      }
    }
    newValue = clamp(newValue, min, max);
    let activeIndex = 0;
    let newValues = void 0;
    if (range) {
      if (!move) {
        activeIndex = findClosest(values2, newValue) ?? activeIndex;
      } else {
        activeIndex = previousIndex.current ?? activeIndex;
      }
      const previousValue = newValue;
      newValues = setValueIndex({
        values: values2,
        source,
        newValue,
        index: activeIndex
      }).sort(asc);
      activeIndex = newValues.indexOf(previousValue);
      previousIndex.current = activeIndex;
    }
    return { newValue: newValues ?? newValue, activeIndex };
  };
  const [isMoving, setIsMoving] = React.useState(false);
  const handleTouchMove = (event) => {
    const finger = trackFinger(event, touchId);
    if (!finger) {
      return;
    }
    const { newValue, activeIndex } = getFingerNewValue({
      finger,
      move: true,
      values,
      source: Array.isArray(valueDerived) ? valueDerived : valueDerived !== void 0 ? [valueDerived] : []
    });
    focusThumb({ sliderRef, activeIndex, setActive });
    setValueState(newValue);
    if (onChange) {
      onChange(newValue, event);
    }
  };
  const handleTouchEnd = (event) => {
    if (!sliderRef.current) {
      return;
    }
    const finger = trackFinger(event, touchId);
    if (!finger) {
      return;
    }
    const { newValue } = getFingerNewValue({
      finger,
      values,
      source: Array.isArray(valueDerived) ? valueDerived : valueDerived !== void 0 ? [valueDerived] : []
    });
    setActive(-1);
    if (event.type === "touchend") {
      setOpen(-1);
    }
    if (onChangeCommitted) {
      onChangeCommitted(event, newValue);
    }
    touchId.current = void 0;
    const doc = ownerDocument(sliderRef.current);
    doc.removeEventListener("mousemove", handleTouchMove);
    doc.removeEventListener("mouseup", handleTouchEnd);
    doc.removeEventListener("touchmove", handleTouchMove);
    doc.removeEventListener("touchend", handleTouchEnd);
    setIsMoving(false);
  };
  const handleTouchStart = (event) => {
    event.preventDefault();
    if (!sliderRef.current) {
      return;
    }
    const touch = event.changedTouches[0];
    if (touch != null) {
      touchId.current = touch.identifier;
    }
    const finger = trackFinger(event, touchId);
    if (!finger)
      return;
    const { newValue, activeIndex } = getFingerNewValue({
      finger,
      values,
      source: Array.isArray(valueDerived) ? valueDerived : valueDerived !== void 0 ? [valueDerived] : []
    });
    focusThumb({ sliderRef, activeIndex, setActive });
    setValueState(newValue);
    if (onChange) {
      onChange(newValue, event);
    }
    const doc = ownerDocument(sliderRef.current);
    doc.addEventListener("touchmove", handleTouchMove);
    doc.addEventListener("touchend", handleTouchEnd);
  };
  React.useEffect(() => {
    if (!sliderRef.current) {
      return;
    }
    const { current: slider } = sliderRef;
    slider.addEventListener("touchstart", handleTouchStart);
    const doc = ownerDocument(slider);
    if (isMoving) {
      const doc2 = ownerDocument(sliderRef.current);
      doc2.addEventListener("mousemove", handleTouchMove);
      doc2.addEventListener("mouseup", handleTouchEnd);
    }
    return () => {
      slider.removeEventListener("touchstart", handleTouchStart);
      doc.removeEventListener("mousemove", handleTouchMove);
      doc.removeEventListener("mouseup", handleTouchEnd);
      doc.removeEventListener("touchmove", handleTouchMove);
      doc.removeEventListener("touchend", handleTouchEnd);
    };
  }, [handleTouchEnd, handleTouchMove, handleTouchStart]);
  const handleMouseDown = (event) => {
    if (!sliderRef.current) {
      return;
    }
    if (onMouseDown) {
      onMouseDown(event);
    }
    event.preventDefault();
    const finger = trackFinger(event, touchId);
    if (!finger) {
      return;
    }
    const { newValue, activeIndex } = getFingerNewValue({
      finger,
      values,
      source: Array.isArray(valueDerived) ? valueDerived : valueDerived !== void 0 ? [valueDerived] : []
    });
    focusThumb({ sliderRef, activeIndex, setActive });
    setValueState(newValue);
    if (onChange) {
      onChange(newValue, event);
    }
    const doc = ownerDocument(sliderRef.current);
    doc.addEventListener("mousemove", handleTouchMove);
    doc.addEventListener("mouseup", handleTouchEnd);
    setIsMoving(true);
  };
  const trackOffset = valueToPercent$1(range ? values[0] ?? min : min, min, max);
  const trackLeap = valueToPercent$1(values[values.length - 1] ?? min, min, max) - trackOffset;
  const trackStyle = {
    ...axisProps$1[axis].offset(trackOffset),
    ...axisProps$1[axis].leap(trackLeap)
  };
  return /* @__PURE__ */ React.createElement("span", {
    ref: handleRef,
    className: cx("Range", size, {
      disabled,
      marked: marksProp,
      vertical,
      focus: focusVisible !== -1,
      "no-track": track === false
    }, className),
    onMouseDown: handleMouseDown,
    ...other
  }, /* @__PURE__ */ React.createElement("span", {
    className: "Range__content"
  }, /* @__PURE__ */ React.createElement("span", {
    className: "Range__rail"
  }), /* @__PURE__ */ React.createElement("span", {
    className: "Range__track",
    style: trackStyle
  }), /* @__PURE__ */ React.createElement("input", {
    value: values.join(","),
    name,
    type: "hidden"
  }), marks.map((mark, index) => {
    const percent = valueToPercent$1(mark.value, min, max);
    const style = axisProps$1[axis].offset(percent);
    let markActive;
    if (track === false) {
      markActive = values.indexOf(mark.value) !== -1;
    } else {
      const firstValue = values[0];
      const lastValue = values[values.length - 1];
      markActive = track === "normal" && (range ? firstValue !== void 0 && mark.value >= firstValue && lastValue !== void 0 && mark.value <= lastValue : firstValue !== void 0 && mark.value <= firstValue) || track === "inverted" && (range ? firstValue !== void 0 && mark.value <= firstValue || lastValue !== void 0 && mark.value >= lastValue : firstValue !== void 0 && mark.value >= firstValue);
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, {
      key: mark.value
    }, /* @__PURE__ */ React.createElement("span", {
      style,
      "data-index": index,
      className: cx("Range__mark", {
        active: markActive
      })
    }), mark.label != null ? /* @__PURE__ */ React.createElement("span", {
      "aria-hidden": true,
      "data-index": index,
      style,
      className: "Range__mark__label"
    }, mark.label) : null);
  }), values.map((value, index) => {
    const percent = valueToPercent$1(value, min, max);
    const style = axisProps$1[axis].offset(percent);
    return /* @__PURE__ */ React.createElement(ThumbComponent, {
      key: index,
      className: cx("Range__thumb", {
        active: active === index,
        disabled,
        focus: focusVisible === index
      }),
      tabIndex: disabled ? void 0 : 0,
      role: "slider",
      style,
      "data-index": index,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby,
      "aria-orientation": orientation,
      "aria-valuemax": scale(max),
      "aria-valuemin": scale(min),
      "aria-valuenow": scale(value),
      "aria-valuetext": ariaValuetext,
      onKeyDown: handleKeyDown,
      onFocus: handleFocus,
      onBlur: handleBlur,
      onMouseOver: handleMouseOver,
      onMouseLeave: handleMouseLeave
    });
  })));
});
function asc(a, b) {
  return a - b;
}
function clamp(value, min, max) {
  return Math.min(Math.max(min, value), max);
}
function findClosest(values, currentValue) {
  const result = values.reduce((acc, value, index) => {
    const distance = Math.abs(currentValue - value);
    if (acc === null || distance < acc.distance || distance === acc.distance) {
      return {
        distance,
        index
      };
    }
    return acc;
  }, null);
  return result ? result.index : result;
}
function valueToPercent$1(value, min, max) {
  return (value - min) * 100 / (max - min);
}
function percentToValue(percent, min, max) {
  return (max - min) * percent + min;
}
function getDecimalPrecision(num) {
  if (Math.abs(num) < 1) {
    const parts = num.toExponential().split("e-");
    const matissaDecimalPart = parts[0].split(".")[1];
    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
  }
  const decimalPart = num.toString().split(".")[1];
  return decimalPart ? decimalPart.length : 0;
}
function roundValueToStep(value, step, min) {
  const nearest = Math.round((value - min) / step) * step + min;
  return Number(nearest.toFixed(getDecimalPrecision(step)));
}
function setValueIndex({
  values,
  source,
  newValue,
  index
}) {
  if (values[index] === newValue) {
    return source;
  }
  const output = values.slice();
  output[index] = newValue;
  return output;
}
function focusThumb({
  sliderRef,
  activeIndex,
  setActive
}) {
  if (!sliderRef.current?.contains(document.activeElement) || Number(document.activeElement?.getAttribute("data-index")) !== activeIndex) {
    const elem = sliderRef.current?.querySelector(`[role="slider"][data-index="${activeIndex}"]`);
    getPropAndCastOr(elem, "focus", () => {
    })();
  }
  if (setActive) {
    setActive(activeIndex);
  }
}

function Separator(props) {
  return /* @__PURE__ */ React.createElement("div", {
    ...props,
    className: "separator",
    role: "separator"
  });
}

const noop$6 = () => {
};
const DEFAULT_LABELS = ["On", "Off"];
let nextId$2 = 1;
class Switch extends React.Component {
  static defaultProps = {
    size: "medium",
    labels: false,
    onChange: noop$6
  };
  id;
  constructor(props) {
    super(props);
    this.id = `switch_${nextId$2++}`;
  }
  onChange = (ev) => {
    if (this.props.onChange)
      this.props.onChange(ev.target.checked, ev);
  };
  render() {
    const {
      id,
      label,
      labels: labelsValue,
      className,
      size,
      value,
      defaultValue,
      disabled,
      onChange,
      ...rest
    } = this.props;
    const labels = Array.isArray(labelsValue) ? labelsValue : DEFAULT_LABELS;
    return /* @__PURE__ */ React.createElement("div", {
      className: cx("Switch", className, size, { disabled })
    }, /* @__PURE__ */ React.createElement("input", {
      type: "checkbox",
      id: id || this.id,
      checked: value,
      defaultChecked: defaultValue,
      disabled,
      onChange: this.onChange,
      ...rest
    }), /* @__PURE__ */ React.createElement("label", {
      htmlFor: id || this.id
    }, labelsValue && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("span", null, labels[0]), /* @__PURE__ */ React.createElement("em", {
      className: "sr-only"
    }, label), /* @__PURE__ */ React.createElement("span", null, labels[1]))));
  }
}

function Table({
  className,
  columns: columnsValue,
  data,
  sortable,
  filterable,
  ...rest
}) {
  const bodyRef = useRef(null);
  const defaultColumn = useMemo(() => ({ width: 150 }), []);
  const columns = useMemo(() => transformColumns(columnsValue), [columnsValue]);
  const scrollbarWidth = getScrollbarWidth();
  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({
    columns,
    data,
    defaultColumn
  }, ...[
    filterable ? useFilters : void 0,
    sortable ? useSortBy : void 0,
    useResizeColumns,
    useFlexLayout
  ].filter((v) => Boolean(v)));
  const RenderRow = React.useCallback(({ index, style }) => {
    const row = rows[index];
    if (!row) {
      throw new Error("Row not found");
    }
    prepareRow(row);
    return /* @__PURE__ */ React.createElement("div", {
      ...row.getRowProps({
        style
      }),
      className: "tr"
    }, row.cells.map((cell) => {
      return /* @__PURE__ */ React.createElement("div", {
        ...cell.getCellProps(),
        className: "td"
      }, cell.render("Cell"));
    }));
  }, [prepareRow, rows]);
  const onScrollBody = (event) => {
    const headers = document.getElementsByClassName("table__header");
    for (const index in headers) {
      const header = headers[index];
      if (header && event.target && hasKey(event.target, "scrollLeft"))
        header.scrollLeft = event.target.scrollLeft;
    }
  };
  useEffect(() => {
    const scrollContainer = bodyRef.current?.firstElementChild?.firstElementChild;
    if (!scrollContainer)
      return;
    scrollContainer.addEventListener("scroll", onScrollBody, { capture: true });
    return () => {
      scrollContainer.removeEventListener("scroll", onScrollBody);
    };
  }, [bodyRef.current]);
  return /* @__PURE__ */ React.createElement("div", {
    ...getTableProps(),
    className: cx("table", className),
    ...rest
  }, /* @__PURE__ */ React.createElement("div", {
    className: "table__header"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "table__header__content",
    style: {
      paddingRight: scrollbarWidth,
      marginBottom: -scrollbarWidth
    }
  }, headerGroups.map((headerGroup) => /* @__PURE__ */ React.createElement("div", {
    ...headerGroup.getHeaderGroupProps(),
    className: "tr"
  }, headerGroup.headers.map((column) => /* @__PURE__ */ React.createElement("div", {
    className: cx("th", {
      activatable: hasKey(column, "canSort") && column.canSort
    }),
    ...column.getHeaderProps()
  }, /* @__PURE__ */ React.createElement(Box, {
    horizontal: true,
    compact: true,
    align: true,
    ...sortable ? hasKey(column, "getSortByToggleProps") && column.getSortByToggleProps() : void 0
  }, /* @__PURE__ */ React.createElement(Box, {
    className: "Box__fill"
  }, column.render("Header")), hasKey(column, "canSort") && column.canSort && /* @__PURE__ */ React.createElement(pan_down_symbolic_default, {
    containerProps: {
      className: cx("table__sortIcon", {
        hidden: !hasKey(column, "isSorted") || !column.isSorted,
        descending: hasKey(column, "isSortedDesc") && column.isSortedDesc
      })
    }
  })), hasKey(column, "canResize") && column.canResize && /* @__PURE__ */ React.createElement("div", {
    ...getPropAndCastOr(columns, "getResizerProps", () => ({}))(),
    className: cx("table__resizer", {
      isResizing: getPropAndCastOr(column, "isResizing", false)
    })
  }), filterable && getPropAndCastOr(column, "canFilter", false) && /* @__PURE__ */ React.createElement("div", {
    className: "table__filter"
  }, column.render("Filter")))))))), /* @__PURE__ */ React.createElement("div", {
    ...getTableBodyProps(),
    className: "table__body",
    ref: bodyRef
  }, /* @__PURE__ */ React.createElement(AutoSizer, null, ({ width, height }) => /* @__PURE__ */ React.createElement(FixedSizeList, {
    height,
    itemCount: rows.length,
    itemSize: 28,
    width
  }, RenderRow))));
}
function transformColumns(cs) {
  return cs.map((c) => {
    const nc = { ...c };
    if (hasKey(nc, "columns") && Array.isArray(nc.columns)) {
      Object.assign(nc, {
        columns: transformColumns(nc.columns)
      });
    } else {
      if (hasKey(nc, "filter") || hasKey(nc, "Filter"))
        Object.assign(nc, { disableFilters: false });
      if (nc.disableFilters !== false)
        Object.assign(nc, { disableFilters: true });
    }
    return nc;
  });
}

function TableDropdownFilter({
  column: { filterValue, setFilter, id, options }
}) {
  return /* @__PURE__ */ React.createElement(Box, {
    horizontal: true,
    compact: true,
    className: "DropdownFilter"
  }, /* @__PURE__ */ React.createElement(Dropdown, {
    allowClear: true,
    className: "Box__fill",
    size: "small",
    id,
    value: filterValue,
    onChange: setFilter,
    options
  }), /* @__PURE__ */ React.createElement(Button, {
    flat: true,
    size: "small",
    icon: window_close_symbolic_default,
    onClick: () => setFilter && setFilter(void 0)
  }));
}

function TableTextFilter({
  column: { filterValue, setFilter, id }
}) {
  return /* @__PURE__ */ React.createElement(Input, {
    allowClear: true,
    size: "small",
    id,
    value: filterValue || "",
    onChange: setFilter
  });
}

function Text({
  children,
  className,
  size,
  align,
  weight,
  fill,
  hero,
  muted,
  info,
  success,
  warning,
  danger,
  italic,
  bold,
  noSelect,
  as = "p",
  ...rest
}) {
  return React.createElement(as, {
    className: cx("Text", size, align ? `align-${align}` : void 0, fill === void 0 ? void 0 : fill === true ? "fill" : `fill-${fill}`, weight ? `weight-${weight}` : void 0, {
      hero,
      info,
      success,
      warning,
      danger,
      "text-muted": muted,
      "text-italic": italic,
      "text-bold": bold,
      "user-select-none": noSelect
    }) + " " + cx(className),
    ...rest
  }, children);
}

const TextArea = React.forwardRef(({
  className,
  size = "medium",
  placeholder,
  flat,
  disabled: disabledValue,
  error,
  warning,
  progress,
  onChange,
  ...rest
}, ref) => {
  const disabled = disabledValue;
  const forceUpdate = useForceUpdate();
  const inputRef = useRef(null);
  const isControlled = typeof rest.value === "string";
  const value = isControlled ? rest.value : inputRef.current?.value || rest.defaultValue || "";
  const inputClassName = cx("Input TextArea", size, {
    flat,
    disabled,
    error,
    warning,
    progress: progress !== void 0
  }) + " " + cx(className);
  const onTextAreaChange = (ev) => {
    if (!isControlled)
      forceUpdate();
    onChange && onChange(ev.target.value, ev);
  };
  const onClickContainer = (ev) => {
    if (ev.target !== inputRef.current && inputRef.current)
      inputRef.current.focus();
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: inputClassName,
    ref,
    onClick: onClickContainer
  }, /* @__PURE__ */ React.createElement("textarea", {
    placeholder,
    disabled,
    className: cx("Input__area", { empty: !value }),
    ref: inputRef,
    onChange: onTextAreaChange,
    ...rest
  }));
});

function Toolbar({
  className,
  children,
  horizontal,
  vertical
}) {
  return /* @__PURE__ */ React.createElement("div", {
    className: cx("Toolbar", className, { horizontal, vertical })
  }, children);
}

export { Adwaita, Alert, Autocomplete, Box, Button, Calendar, Checkbox, DatePicker, Dropdown, Expander, Frame, HeaderBar, HeaderBarControls, HeaderBarTitle, Heading, icons as Icon, InfoBar, Input, InputGroup, InputNumber, Label, LevelBar, List, ListItem, Menu, MenuBackButton, MenuBar, MenuButton, MenuCircularButton, MenuInlineButton, MenuItem, MenuTitle, Notebook, PageSwitcher, Paned, Popover, PopoverMenu, Progress, Radio, RadioGroup, Range, Separator, Spinner, Switch, Table, TableDropdownFilter, TableTextFilter, Text, TextArea, Toolbar };
